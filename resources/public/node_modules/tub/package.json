{
  "name": "tub",
  "description": "Lax streaming tap parser",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "version": "0.1.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/tub.git"
  },
  "keywords": [],
  "main": "tub.js",
  "bin": {
    "tub": "bin.js"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "splitter": "~0.1.1"
  },
  "devDependencies": {
    "tap": "~0.4.0"
  },
  "optionalDependencies": {
    "splitter": "~0.1.1"
  },
  "bugs": {
    "url": "http://github.com/clux/tub/issues"
  },
  "license": "MIT",
  "readme": "# Tub [![Build Status](https://secure.travis-ci.org/clux/tub.png)](http://travis-ci.org/clux/tub)\n\nTub is a streaming tap parser that serves two purposes.\n\n- It's a writable stream that collects and determines the end result of the tests output. It collects assert results, failed asserts, and creates a summary string, and an `ok` bool to be able to determine easily from a callback what happened.\n\n- When piped to, the result is a readable stream, in that it provides a shorter, comment free output that can be piped to stdout for information as the tests are running.\n\nIt's based on streams2, and inherits from `stream.Transform` to accomplish this, so you will need node >= 0.10.\n\n## Options\nThe tap parser itself is a little more relaxed than most tap parsers, in that numbers does not need to exist in the tap output, as long as the amount of tests add up to what's in the plan. It also deals with the `Bail out!` statement.\n\nIt will also ignore lines it cannot parse as valid TAP by default. To throw on such error pass a `{strict:true}`\noption.\n\n## Usage 1\nUse the bundled command line logger / stream filtration tool that can be used in place of `tap`, when installing `tub` globally:\n\n```bash\n$ npm install -g tub\n$ tub test/*.js\n✗ 1 / 61 assertions failed\n7 name of failed test\n  ---\n    file:   /home/clux/repos/failedTestRepo/test.js\n    stack:  stack trace lines would follow here\n  ...\n```\n\nAny arguments passed to `tub` is passed directly through to `tap`, with the sole exception of `-a` or `--all`, which causes the output from `tub` to be additionally piped to `process.stdout` to provide go-along feedback as the tests run:\n\n```\n$ tub test/*.js --all\n✓ 1 1-dim identity\n✓ 2 noop\n✓ 3 constant\n✓ 4 !false\n✓ 5 range/elem filter\n✓ 6 range/elem filter\n✗ 7 woot\n  ---\n    file:   /home/clux/repos/failedTestRepo/test.js\n    stack:  stack trace lines would follow here\n  ...\n✓ 8 primes 5,3 are coprime\n✓ 9 21 and 14 have 7 as gcd\n...\nmore tests\n...\n1..61\n✗ 1 / 61 assertions failed\n✗ 7 woot\n  ---\n    file:   /home/clux/repos/failedTestRepo/test.js\n    stack:  stack trace lines would follow here\n  ...\n```\n\n### NEEDS TAP\nNote that a globally installed `tub` needs a globally installed `tap` at the moment.\n\n## Usage 2\nCreate your own customized results logger for command line use:\n\n```js\n// tubber.js\nvar tub = require('tub');\nvar splitter = require('splitter')\nvar onFinish = function (res) {\n  console.log(res);\n  process.exit(res.ok ? 0 : 1)\n};\nprocess.stdin\n  .pipe(splitter())\n  .pipe(tub(onFinish))\n  .pipe(process.stdout);\n```\n\nthen hook into some raw tap output (perhaps from the `tap` module) and hand it over to your script!\n\n```bash\n$ tap test/*.js --tap | node tubber.js\n```\n\nwhich would give you the raw output like the following\n\n```\n{ plan: { start: 1, end: 5 },\n  asserts:\n   [ { ok: true, number: 1, name: 'upvotes good', info: [] },\n     { ok: true, number: 2, name: 'downvotes bad', info: [] },\n     { ok: true,\n       number: 3,\n       name: 'higher confidence means lowers bounds',\n       info: [] },\n     { ok: false,\n       number: 4,\n       name: 'this will fail deliberately',\n       info: [Object] },\n     { ok: true, number: 5, name: 'upvotes good', info: [] } ],\n  version: 13,\n  failed:\n   [ { ok: false,\n       number: 4,\n       name: 'this will fail deliberately',\n       info: [Object] } ],\n  ok: false,\n  summary: '1 / 5 assertions failed' }\n```\n\nNote that the failed asserts gets copied to the failed list. When using output from `tap`, every failed test will have an info list which can be joined to produce the normal stack trace that normally accompanies them:\n\n```js\n// add this line to `onFinish`\nconsole.log(res.failed[0].info.join('\\n'));\n```\n\nwhich will give the following extra output:\n\n```\n  ---\n    file:   /home/clux/repos/decay/test/all.js\n    line:   22\n    column: 5\n    stack:\n      - getCaller (/home/clux/local/node/lib/node_modules/tap/lib/tap-assert.js:418:17)\n      - Function.assert (/home/clux/local/node/lib/node_modules/tap/lib/tap-assert.js:21:16)\n      - Test._testAssert [as ok] (/home/clux/local/node/lib/node_modules/tap/lib/tap-test.js:86:16)\n      - Test.<anonymous> (/home/clux/repos/decay/test/all.js:22:5)\n      - Test.EventEmitter.emit (events.js:117:20)\n      - Test.emit (/home/clux/local/node/lib/node_modules/tap/lib/tap-test.js:103:8)\n      - GlobalHarness.Harness.process (/home/clux/local/node/lib/node_modules/tap/lib/tap-harness.js:86:13)\n      - process._tickCallback (node.js:415:13)\n      - Function.Module.runMain (module.js:499:11)\n      - startup (node.js:119:16)\n  ...\n```\n\nBut `info` can be set on any assert. It's just indented output belonging to the previous assertion.\n\n## Usage 3\nUse `tub` as a library and pipe tap test runner data to the tub stream.\nAlternatively, any raw TAP output data could be read from a log and piped to `tub` via `splitter`. Personal use of this involves parsing TAP output generated from C++.\n\n```js\nfs.createReadStream('./tapLog.txt').pipe(splitter()).pipe(tub(onEnd));\n```\n\nObviously, if you use node's `child_process` module, you don't have to wait for the log to be written, but just pipe the spawned child directly!\n\n## Running tests\nInstall development dependencies\n\n```bash\n$ npm install\n```\n\nRun the tests\n\n```bash\n$ npm test\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "_id": "tub@0.1.4",
  "_from": "tub@"
}
