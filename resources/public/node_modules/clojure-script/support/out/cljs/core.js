goog.provide('cljs.core');
goog.require('goog.string');
goog.require('goog.string.StringBuffer');
goog.require('goog.object');
goog.require('goog.array');
cljs.core._STAR_unchecked_if_STAR_ = false;
/**
* Each runtime environment provides a diffenent way to print output.
* Whatever function *print-fn* is bound to will be passed any
* Strings which should be printed.
*/
cljs.core._STAR_print_fn_STAR_ = (function _STAR_print_fn_STAR_(_){
throw (new Error("No *print-fn* fn set for evaluation environment"));
});
void 0;
void 0;
void 0;
/**
* Internal - do not use!
*/
cljs.core.truth_ = (function truth_(x){
return (x != null && x !== false);
});
void 0;/**
* Internal - do not use!
*/
cljs.core.type_satisfies_ = (function type_satisfies_(p,x){
if((p[goog.typeOf.call(null,x)]))
{return true;
} else
{if((p["_"]))
{return true;
} else
{if("\uFDD0'else")
{return false;
} else
{return null;
}
}
}
});
void 0;cljs.core.is_proto_ = (function is_proto_(x){
return (x).constructor.prototype === x;
});
/**
* When compiled for a command-line target, whatever
* function *main-fn* is set to will be called with the command-line
* argv as arguments
*/
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.missing_protocol = (function missing_protocol(proto,obj){
return Error("No protocol method "+proto+" defined for type "+goog.typeOf.call(null,obj)+": "+obj);
});
/**
* Returns a javascript array, cloned from the passed in array
*/
cljs.core.aclone = (function aclone(array_like){
return Array.prototype.slice.call(array_like);
});
/**
* Creates a new javascript array.
* @param {...*} var_args
*/
cljs.core.array = (function array(var_args){
return Array.prototype.slice.call(arguments);
});
cljs.core.make_array = (function() {
var make_array = null;
var make_array__1 = (function (size){
return new Array(size);
});
var make_array__2 = (function (type,size){
return make_array.call(null,size);
});
make_array = function(type,size){
switch(arguments.length){
case 1:
return make_array__1.call(this,type);
case 2:
return make_array__2.call(this,type,size);
}
throw('Invalid arity: ' + arguments.length);
};
make_array.cljs$lang$arity$1 = make_array__1;
make_array.cljs$lang$arity$2 = make_array__2;
return make_array;
})()
;
void 0;
/**
* Returns the value at the index.
* @param {...*} var_args
*/
cljs.core.aget = (function() {
var aget = null;
var aget__2 = (function (array,i){
return (array[i]);
});
var aget__3 = (function() { 
var G__4121__delegate = function (array,i,idxs){
return cljs.core.apply.call(null,aget,aget.call(null,array,i),idxs);
};
var G__4121 = function (array,i,var_args){
var idxs = null;
if (goog.isDef(var_args)) {
  idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4121__delegate.call(this, array, i, idxs);
};
G__4121.cljs$lang$maxFixedArity = 2;
G__4121.cljs$lang$applyTo = (function (arglist__4122){
var array = cljs.core.first(arglist__4122);
var i = cljs.core.first(cljs.core.next(arglist__4122));
var idxs = cljs.core.rest(cljs.core.next(arglist__4122));
return G__4121__delegate(array, i, idxs);
});
G__4121.cljs$lang$arity$variadic = G__4121__delegate;
return G__4121;
})()
;
aget = function(array,i,var_args){
var idxs = var_args;
switch(arguments.length){
case 2:
return aget__2.call(this,array,i);
default:
return aget__3.cljs$lang$arity$variadic(array,i, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
aget.cljs$lang$maxFixedArity = 2;
aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
aget.cljs$lang$arity$2 = aget__2;
aget.cljs$lang$arity$variadic = aget__3.cljs$lang$arity$variadic;
return aget;
})()
;
/**
* Sets the value at the index.
*/
cljs.core.aset = (function aset(array,i,val){
return (array[i] = val);
});
/**
* Returns the length of the array. Works on arrays of all types.
*/
cljs.core.alength = (function alength(array){
return array.length;
});
void 0;
cljs.core.into_array = (function() {
var into_array = null;
var into_array__1 = (function (aseq){
return into_array.call(null,null,aseq);
});
var into_array__2 = (function (type,aseq){
return cljs.core.reduce.call(null,(function (a,x){
a.push(x);
return a;
}),[],aseq);
});
into_array = function(type,aseq){
switch(arguments.length){
case 1:
return into_array__1.call(this,type);
case 2:
return into_array__2.call(this,type,aseq);
}
throw('Invalid arity: ' + arguments.length);
};
into_array.cljs$lang$arity$1 = into_array__1;
into_array.cljs$lang$arity$2 = into_array__2;
return into_array;
})()
;
void 0;cljs.core.IFn = {};
cljs.core._invoke = (function() {
var _invoke = null;
var _invoke__1 = (function (this$){
if((function (){var and__3822__auto____4123 = this$;
if(and__3822__auto____4123)
{return this$.cljs$core$IFn$_invoke$arity$1;
} else
{return and__3822__auto____4123;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$1(this$);
} else
{return (function (){var or__3824__auto____4124 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4124)
{return or__3824__auto____4124;
} else
{var or__3824__auto____4125 = (cljs.core._invoke["_"]);
if(or__3824__auto____4125)
{return or__3824__auto____4125;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$);
}
});
var _invoke__2 = (function (this$,a){
if((function (){var and__3822__auto____4126 = this$;
if(and__3822__auto____4126)
{return this$.cljs$core$IFn$_invoke$arity$2;
} else
{return and__3822__auto____4126;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$2(this$,a);
} else
{return (function (){var or__3824__auto____4127 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4127)
{return or__3824__auto____4127;
} else
{var or__3824__auto____4128 = (cljs.core._invoke["_"]);
if(or__3824__auto____4128)
{return or__3824__auto____4128;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a);
}
});
var _invoke__3 = (function (this$,a,b){
if((function (){var and__3822__auto____4129 = this$;
if(and__3822__auto____4129)
{return this$.cljs$core$IFn$_invoke$arity$3;
} else
{return and__3822__auto____4129;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$3(this$,a,b);
} else
{return (function (){var or__3824__auto____4130 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4130)
{return or__3824__auto____4130;
} else
{var or__3824__auto____4131 = (cljs.core._invoke["_"]);
if(or__3824__auto____4131)
{return or__3824__auto____4131;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b);
}
});
var _invoke__4 = (function (this$,a,b,c){
if((function (){var and__3822__auto____4132 = this$;
if(and__3822__auto____4132)
{return this$.cljs$core$IFn$_invoke$arity$4;
} else
{return and__3822__auto____4132;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$4(this$,a,b,c);
} else
{return (function (){var or__3824__auto____4133 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4133)
{return or__3824__auto____4133;
} else
{var or__3824__auto____4134 = (cljs.core._invoke["_"]);
if(or__3824__auto____4134)
{return or__3824__auto____4134;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c);
}
});
var _invoke__5 = (function (this$,a,b,c,d){
if((function (){var and__3822__auto____4135 = this$;
if(and__3822__auto____4135)
{return this$.cljs$core$IFn$_invoke$arity$5;
} else
{return and__3822__auto____4135;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$5(this$,a,b,c,d);
} else
{return (function (){var or__3824__auto____4136 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4136)
{return or__3824__auto____4136;
} else
{var or__3824__auto____4137 = (cljs.core._invoke["_"]);
if(or__3824__auto____4137)
{return or__3824__auto____4137;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d);
}
});
var _invoke__6 = (function (this$,a,b,c,d,e){
if((function (){var and__3822__auto____4138 = this$;
if(and__3822__auto____4138)
{return this$.cljs$core$IFn$_invoke$arity$6;
} else
{return and__3822__auto____4138;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$6(this$,a,b,c,d,e);
} else
{return (function (){var or__3824__auto____4139 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4139)
{return or__3824__auto____4139;
} else
{var or__3824__auto____4140 = (cljs.core._invoke["_"]);
if(or__3824__auto____4140)
{return or__3824__auto____4140;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e);
}
});
var _invoke__7 = (function (this$,a,b,c,d,e,f){
if((function (){var and__3822__auto____4141 = this$;
if(and__3822__auto____4141)
{return this$.cljs$core$IFn$_invoke$arity$7;
} else
{return and__3822__auto____4141;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$7(this$,a,b,c,d,e,f);
} else
{return (function (){var or__3824__auto____4142 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4142)
{return or__3824__auto____4142;
} else
{var or__3824__auto____4143 = (cljs.core._invoke["_"]);
if(or__3824__auto____4143)
{return or__3824__auto____4143;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f);
}
});
var _invoke__8 = (function (this$,a,b,c,d,e,f,g){
if((function (){var and__3822__auto____4144 = this$;
if(and__3822__auto____4144)
{return this$.cljs$core$IFn$_invoke$arity$8;
} else
{return and__3822__auto____4144;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$8(this$,a,b,c,d,e,f,g);
} else
{return (function (){var or__3824__auto____4145 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4145)
{return or__3824__auto____4145;
} else
{var or__3824__auto____4146 = (cljs.core._invoke["_"]);
if(or__3824__auto____4146)
{return or__3824__auto____4146;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g);
}
});
var _invoke__9 = (function (this$,a,b,c,d,e,f,g,h){
if((function (){var and__3822__auto____4147 = this$;
if(and__3822__auto____4147)
{return this$.cljs$core$IFn$_invoke$arity$9;
} else
{return and__3822__auto____4147;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$9(this$,a,b,c,d,e,f,g,h);
} else
{return (function (){var or__3824__auto____4148 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4148)
{return or__3824__auto____4148;
} else
{var or__3824__auto____4149 = (cljs.core._invoke["_"]);
if(or__3824__auto____4149)
{return or__3824__auto____4149;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h);
}
});
var _invoke__10 = (function (this$,a,b,c,d,e,f,g,h,i){
if((function (){var and__3822__auto____4150 = this$;
if(and__3822__auto____4150)
{return this$.cljs$core$IFn$_invoke$arity$10;
} else
{return and__3822__auto____4150;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$10(this$,a,b,c,d,e,f,g,h,i);
} else
{return (function (){var or__3824__auto____4151 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4151)
{return or__3824__auto____4151;
} else
{var or__3824__auto____4152 = (cljs.core._invoke["_"]);
if(or__3824__auto____4152)
{return or__3824__auto____4152;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i);
}
});
var _invoke__11 = (function (this$,a,b,c,d,e,f,g,h,i,j){
if((function (){var and__3822__auto____4153 = this$;
if(and__3822__auto____4153)
{return this$.cljs$core$IFn$_invoke$arity$11;
} else
{return and__3822__auto____4153;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$11(this$,a,b,c,d,e,f,g,h,i,j);
} else
{return (function (){var or__3824__auto____4154 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4154)
{return or__3824__auto____4154;
} else
{var or__3824__auto____4155 = (cljs.core._invoke["_"]);
if(or__3824__auto____4155)
{return or__3824__auto____4155;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j);
}
});
var _invoke__12 = (function (this$,a,b,c,d,e,f,g,h,i,j,k){
if((function (){var and__3822__auto____4156 = this$;
if(and__3822__auto____4156)
{return this$.cljs$core$IFn$_invoke$arity$12;
} else
{return and__3822__auto____4156;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$12(this$,a,b,c,d,e,f,g,h,i,j,k);
} else
{return (function (){var or__3824__auto____4157 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4157)
{return or__3824__auto____4157;
} else
{var or__3824__auto____4158 = (cljs.core._invoke["_"]);
if(or__3824__auto____4158)
{return or__3824__auto____4158;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k);
}
});
var _invoke__13 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l){
if((function (){var and__3822__auto____4159 = this$;
if(and__3822__auto____4159)
{return this$.cljs$core$IFn$_invoke$arity$13;
} else
{return and__3822__auto____4159;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$13(this$,a,b,c,d,e,f,g,h,i,j,k,l);
} else
{return (function (){var or__3824__auto____4160 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4160)
{return or__3824__auto____4160;
} else
{var or__3824__auto____4161 = (cljs.core._invoke["_"]);
if(or__3824__auto____4161)
{return or__3824__auto____4161;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l);
}
});
var _invoke__14 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m){
if((function (){var and__3822__auto____4162 = this$;
if(and__3822__auto____4162)
{return this$.cljs$core$IFn$_invoke$arity$14;
} else
{return and__3822__auto____4162;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$14(this$,a,b,c,d,e,f,g,h,i,j,k,l,m);
} else
{return (function (){var or__3824__auto____4163 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4163)
{return or__3824__auto____4163;
} else
{var or__3824__auto____4164 = (cljs.core._invoke["_"]);
if(or__3824__auto____4164)
{return or__3824__auto____4164;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m);
}
});
var _invoke__15 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n){
if((function (){var and__3822__auto____4165 = this$;
if(and__3822__auto____4165)
{return this$.cljs$core$IFn$_invoke$arity$15;
} else
{return and__3822__auto____4165;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$15(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
} else
{return (function (){var or__3824__auto____4166 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4166)
{return or__3824__auto____4166;
} else
{var or__3824__auto____4167 = (cljs.core._invoke["_"]);
if(or__3824__auto____4167)
{return or__3824__auto____4167;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
}
});
var _invoke__16 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
if((function (){var and__3822__auto____4168 = this$;
if(and__3822__auto____4168)
{return this$.cljs$core$IFn$_invoke$arity$16;
} else
{return and__3822__auto____4168;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$16(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
} else
{return (function (){var or__3824__auto____4169 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4169)
{return or__3824__auto____4169;
} else
{var or__3824__auto____4170 = (cljs.core._invoke["_"]);
if(or__3824__auto____4170)
{return or__3824__auto____4170;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
}
});
var _invoke__17 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
if((function (){var and__3822__auto____4171 = this$;
if(and__3822__auto____4171)
{return this$.cljs$core$IFn$_invoke$arity$17;
} else
{return and__3822__auto____4171;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$17(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
} else
{return (function (){var or__3824__auto____4172 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4172)
{return or__3824__auto____4172;
} else
{var or__3824__auto____4173 = (cljs.core._invoke["_"]);
if(or__3824__auto____4173)
{return or__3824__auto____4173;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
}
});
var _invoke__18 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
if((function (){var and__3822__auto____4174 = this$;
if(and__3822__auto____4174)
{return this$.cljs$core$IFn$_invoke$arity$18;
} else
{return and__3822__auto____4174;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$18(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
} else
{return (function (){var or__3824__auto____4175 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4175)
{return or__3824__auto____4175;
} else
{var or__3824__auto____4176 = (cljs.core._invoke["_"]);
if(or__3824__auto____4176)
{return or__3824__auto____4176;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
}
});
var _invoke__19 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s){
if((function (){var and__3822__auto____4177 = this$;
if(and__3822__auto____4177)
{return this$.cljs$core$IFn$_invoke$arity$19;
} else
{return and__3822__auto____4177;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$19(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s);
} else
{return (function (){var or__3824__auto____4178 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4178)
{return or__3824__auto____4178;
} else
{var or__3824__auto____4179 = (cljs.core._invoke["_"]);
if(or__3824__auto____4179)
{return or__3824__auto____4179;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s);
}
});
var _invoke__20 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t){
if((function (){var and__3822__auto____4180 = this$;
if(and__3822__auto____4180)
{return this$.cljs$core$IFn$_invoke$arity$20;
} else
{return and__3822__auto____4180;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$20(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t);
} else
{return (function (){var or__3824__auto____4181 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4181)
{return or__3824__auto____4181;
} else
{var or__3824__auto____4182 = (cljs.core._invoke["_"]);
if(or__3824__auto____4182)
{return or__3824__auto____4182;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t);
}
});
var _invoke__21 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t,rest){
if((function (){var and__3822__auto____4183 = this$;
if(and__3822__auto____4183)
{return this$.cljs$core$IFn$_invoke$arity$21;
} else
{return and__3822__auto____4183;
}
})())
{return this$.cljs$core$IFn$_invoke$arity$21(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t,rest);
} else
{return (function (){var or__3824__auto____4184 = (cljs.core._invoke[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4184)
{return or__3824__auto____4184;
} else
{var or__3824__auto____4185 = (cljs.core._invoke["_"]);
if(or__3824__auto____4185)
{return or__3824__auto____4185;
} else
{throw cljs.core.missing_protocol.call(null,"IFn.-invoke",this$);
}
}
})().call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t,rest);
}
});
_invoke = function(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t,rest){
switch(arguments.length){
case 1:
return _invoke__1.call(this,this$);
case 2:
return _invoke__2.call(this,this$,a);
case 3:
return _invoke__3.call(this,this$,a,b);
case 4:
return _invoke__4.call(this,this$,a,b,c);
case 5:
return _invoke__5.call(this,this$,a,b,c,d);
case 6:
return _invoke__6.call(this,this$,a,b,c,d,e);
case 7:
return _invoke__7.call(this,this$,a,b,c,d,e,f);
case 8:
return _invoke__8.call(this,this$,a,b,c,d,e,f,g);
case 9:
return _invoke__9.call(this,this$,a,b,c,d,e,f,g,h);
case 10:
return _invoke__10.call(this,this$,a,b,c,d,e,f,g,h,i);
case 11:
return _invoke__11.call(this,this$,a,b,c,d,e,f,g,h,i,j);
case 12:
return _invoke__12.call(this,this$,a,b,c,d,e,f,g,h,i,j,k);
case 13:
return _invoke__13.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l);
case 14:
return _invoke__14.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m);
case 15:
return _invoke__15.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
case 16:
return _invoke__16.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
case 17:
return _invoke__17.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
case 18:
return _invoke__18.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
case 19:
return _invoke__19.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s);
case 20:
return _invoke__20.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t);
case 21:
return _invoke__21.call(this,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,t,rest);
}
throw('Invalid arity: ' + arguments.length);
};
_invoke.cljs$lang$arity$1 = _invoke__1;
_invoke.cljs$lang$arity$2 = _invoke__2;
_invoke.cljs$lang$arity$3 = _invoke__3;
_invoke.cljs$lang$arity$4 = _invoke__4;
_invoke.cljs$lang$arity$5 = _invoke__5;
_invoke.cljs$lang$arity$6 = _invoke__6;
_invoke.cljs$lang$arity$7 = _invoke__7;
_invoke.cljs$lang$arity$8 = _invoke__8;
_invoke.cljs$lang$arity$9 = _invoke__9;
_invoke.cljs$lang$arity$10 = _invoke__10;
_invoke.cljs$lang$arity$11 = _invoke__11;
_invoke.cljs$lang$arity$12 = _invoke__12;
_invoke.cljs$lang$arity$13 = _invoke__13;
_invoke.cljs$lang$arity$14 = _invoke__14;
_invoke.cljs$lang$arity$15 = _invoke__15;
_invoke.cljs$lang$arity$16 = _invoke__16;
_invoke.cljs$lang$arity$17 = _invoke__17;
_invoke.cljs$lang$arity$18 = _invoke__18;
_invoke.cljs$lang$arity$19 = _invoke__19;
_invoke.cljs$lang$arity$20 = _invoke__20;
_invoke.cljs$lang$arity$21 = _invoke__21;
return _invoke;
})()
;
void 0;void 0;cljs.core.ICounted = {};
cljs.core._count = (function _count(coll){
if((function (){var and__3822__auto____4186 = coll;
if(and__3822__auto____4186)
{return coll.cljs$core$ICounted$_count$arity$1;
} else
{return and__3822__auto____4186;
}
})())
{return coll.cljs$core$ICounted$_count$arity$1(coll);
} else
{return (function (){var or__3824__auto____4187 = (cljs.core._count[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4187)
{return or__3824__auto____4187;
} else
{var or__3824__auto____4188 = (cljs.core._count["_"]);
if(or__3824__auto____4188)
{return or__3824__auto____4188;
} else
{throw cljs.core.missing_protocol.call(null,"ICounted.-count",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.IEmptyableCollection = {};
cljs.core._empty = (function _empty(coll){
if((function (){var and__3822__auto____4189 = coll;
if(and__3822__auto____4189)
{return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
} else
{return and__3822__auto____4189;
}
})())
{return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
} else
{return (function (){var or__3824__auto____4190 = (cljs.core._empty[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4190)
{return or__3824__auto____4190;
} else
{var or__3824__auto____4191 = (cljs.core._empty["_"]);
if(or__3824__auto____4191)
{return or__3824__auto____4191;
} else
{throw cljs.core.missing_protocol.call(null,"IEmptyableCollection.-empty",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.ICollection = {};
cljs.core._conj = (function _conj(coll,o){
if((function (){var and__3822__auto____4192 = coll;
if(and__3822__auto____4192)
{return coll.cljs$core$ICollection$_conj$arity$2;
} else
{return and__3822__auto____4192;
}
})())
{return coll.cljs$core$ICollection$_conj$arity$2(coll,o);
} else
{return (function (){var or__3824__auto____4193 = (cljs.core._conj[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4193)
{return or__3824__auto____4193;
} else
{var or__3824__auto____4194 = (cljs.core._conj["_"]);
if(or__3824__auto____4194)
{return or__3824__auto____4194;
} else
{throw cljs.core.missing_protocol.call(null,"ICollection.-conj",coll);
}
}
})().call(null,coll,o);
}
});
void 0;void 0;cljs.core.IIndexed = {};
cljs.core._nth = (function() {
var _nth = null;
var _nth__2 = (function (coll,n){
if((function (){var and__3822__auto____4195 = coll;
if(and__3822__auto____4195)
{return coll.cljs$core$IIndexed$_nth$arity$2;
} else
{return and__3822__auto____4195;
}
})())
{return coll.cljs$core$IIndexed$_nth$arity$2(coll,n);
} else
{return (function (){var or__3824__auto____4196 = (cljs.core._nth[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4196)
{return or__3824__auto____4196;
} else
{var or__3824__auto____4197 = (cljs.core._nth["_"]);
if(or__3824__auto____4197)
{return or__3824__auto____4197;
} else
{throw cljs.core.missing_protocol.call(null,"IIndexed.-nth",coll);
}
}
})().call(null,coll,n);
}
});
var _nth__3 = (function (coll,n,not_found){
if((function (){var and__3822__auto____4198 = coll;
if(and__3822__auto____4198)
{return coll.cljs$core$IIndexed$_nth$arity$3;
} else
{return and__3822__auto____4198;
}
})())
{return coll.cljs$core$IIndexed$_nth$arity$3(coll,n,not_found);
} else
{return (function (){var or__3824__auto____4199 = (cljs.core._nth[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4199)
{return or__3824__auto____4199;
} else
{var or__3824__auto____4200 = (cljs.core._nth["_"]);
if(or__3824__auto____4200)
{return or__3824__auto____4200;
} else
{throw cljs.core.missing_protocol.call(null,"IIndexed.-nth",coll);
}
}
})().call(null,coll,n,not_found);
}
});
_nth = function(coll,n,not_found){
switch(arguments.length){
case 2:
return _nth__2.call(this,coll,n);
case 3:
return _nth__3.call(this,coll,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
_nth.cljs$lang$arity$2 = _nth__2;
_nth.cljs$lang$arity$3 = _nth__3;
return _nth;
})()
;
void 0;void 0;cljs.core.ASeq = {};
void 0;void 0;cljs.core.ISeq = {};
cljs.core._first = (function _first(coll){
if((function (){var and__3822__auto____4201 = coll;
if(and__3822__auto____4201)
{return coll.cljs$core$ISeq$_first$arity$1;
} else
{return and__3822__auto____4201;
}
})())
{return coll.cljs$core$ISeq$_first$arity$1(coll);
} else
{return (function (){var or__3824__auto____4202 = (cljs.core._first[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4202)
{return or__3824__auto____4202;
} else
{var or__3824__auto____4203 = (cljs.core._first["_"]);
if(or__3824__auto____4203)
{return or__3824__auto____4203;
} else
{throw cljs.core.missing_protocol.call(null,"ISeq.-first",coll);
}
}
})().call(null,coll);
}
});
cljs.core._rest = (function _rest(coll){
if((function (){var and__3822__auto____4204 = coll;
if(and__3822__auto____4204)
{return coll.cljs$core$ISeq$_rest$arity$1;
} else
{return and__3822__auto____4204;
}
})())
{return coll.cljs$core$ISeq$_rest$arity$1(coll);
} else
{return (function (){var or__3824__auto____4205 = (cljs.core._rest[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4205)
{return or__3824__auto____4205;
} else
{var or__3824__auto____4206 = (cljs.core._rest["_"]);
if(or__3824__auto____4206)
{return or__3824__auto____4206;
} else
{throw cljs.core.missing_protocol.call(null,"ISeq.-rest",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.ILookup = {};
cljs.core._lookup = (function() {
var _lookup = null;
var _lookup__2 = (function (o,k){
if((function (){var and__3822__auto____4207 = o;
if(and__3822__auto____4207)
{return o.cljs$core$ILookup$_lookup$arity$2;
} else
{return and__3822__auto____4207;
}
})())
{return o.cljs$core$ILookup$_lookup$arity$2(o,k);
} else
{return (function (){var or__3824__auto____4208 = (cljs.core._lookup[goog.typeOf.call(null,o)]);
if(or__3824__auto____4208)
{return or__3824__auto____4208;
} else
{var or__3824__auto____4209 = (cljs.core._lookup["_"]);
if(or__3824__auto____4209)
{return or__3824__auto____4209;
} else
{throw cljs.core.missing_protocol.call(null,"ILookup.-lookup",o);
}
}
})().call(null,o,k);
}
});
var _lookup__3 = (function (o,k,not_found){
if((function (){var and__3822__auto____4210 = o;
if(and__3822__auto____4210)
{return o.cljs$core$ILookup$_lookup$arity$3;
} else
{return and__3822__auto____4210;
}
})())
{return o.cljs$core$ILookup$_lookup$arity$3(o,k,not_found);
} else
{return (function (){var or__3824__auto____4211 = (cljs.core._lookup[goog.typeOf.call(null,o)]);
if(or__3824__auto____4211)
{return or__3824__auto____4211;
} else
{var or__3824__auto____4212 = (cljs.core._lookup["_"]);
if(or__3824__auto____4212)
{return or__3824__auto____4212;
} else
{throw cljs.core.missing_protocol.call(null,"ILookup.-lookup",o);
}
}
})().call(null,o,k,not_found);
}
});
_lookup = function(o,k,not_found){
switch(arguments.length){
case 2:
return _lookup__2.call(this,o,k);
case 3:
return _lookup__3.call(this,o,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
_lookup.cljs$lang$arity$2 = _lookup__2;
_lookup.cljs$lang$arity$3 = _lookup__3;
return _lookup;
})()
;
void 0;void 0;cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = (function _contains_key_QMARK_(coll,k){
if((function (){var and__3822__auto____4213 = coll;
if(and__3822__auto____4213)
{return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
} else
{return and__3822__auto____4213;
}
})())
{return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll,k);
} else
{return (function (){var or__3824__auto____4214 = (cljs.core._contains_key_QMARK_[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4214)
{return or__3824__auto____4214;
} else
{var or__3824__auto____4215 = (cljs.core._contains_key_QMARK_["_"]);
if(or__3824__auto____4215)
{return or__3824__auto____4215;
} else
{throw cljs.core.missing_protocol.call(null,"IAssociative.-contains-key?",coll);
}
}
})().call(null,coll,k);
}
});
cljs.core._assoc = (function _assoc(coll,k,v){
if((function (){var and__3822__auto____4216 = coll;
if(and__3822__auto____4216)
{return coll.cljs$core$IAssociative$_assoc$arity$3;
} else
{return and__3822__auto____4216;
}
})())
{return coll.cljs$core$IAssociative$_assoc$arity$3(coll,k,v);
} else
{return (function (){var or__3824__auto____4217 = (cljs.core._assoc[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4217)
{return or__3824__auto____4217;
} else
{var or__3824__auto____4218 = (cljs.core._assoc["_"]);
if(or__3824__auto____4218)
{return or__3824__auto____4218;
} else
{throw cljs.core.missing_protocol.call(null,"IAssociative.-assoc",coll);
}
}
})().call(null,coll,k,v);
}
});
void 0;void 0;cljs.core.IMap = {};
cljs.core._dissoc = (function _dissoc(coll,k){
if((function (){var and__3822__auto____4219 = coll;
if(and__3822__auto____4219)
{return coll.cljs$core$IMap$_dissoc$arity$2;
} else
{return and__3822__auto____4219;
}
})())
{return coll.cljs$core$IMap$_dissoc$arity$2(coll,k);
} else
{return (function (){var or__3824__auto____4220 = (cljs.core._dissoc[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4220)
{return or__3824__auto____4220;
} else
{var or__3824__auto____4221 = (cljs.core._dissoc["_"]);
if(or__3824__auto____4221)
{return or__3824__auto____4221;
} else
{throw cljs.core.missing_protocol.call(null,"IMap.-dissoc",coll);
}
}
})().call(null,coll,k);
}
});
void 0;void 0;cljs.core.IMapEntry = {};
cljs.core._key = (function _key(coll){
if((function (){var and__3822__auto____4222 = coll;
if(and__3822__auto____4222)
{return coll.cljs$core$IMapEntry$_key$arity$1;
} else
{return and__3822__auto____4222;
}
})())
{return coll.cljs$core$IMapEntry$_key$arity$1(coll);
} else
{return (function (){var or__3824__auto____4223 = (cljs.core._key[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4223)
{return or__3824__auto____4223;
} else
{var or__3824__auto____4224 = (cljs.core._key["_"]);
if(or__3824__auto____4224)
{return or__3824__auto____4224;
} else
{throw cljs.core.missing_protocol.call(null,"IMapEntry.-key",coll);
}
}
})().call(null,coll);
}
});
cljs.core._val = (function _val(coll){
if((function (){var and__3822__auto____4225 = coll;
if(and__3822__auto____4225)
{return coll.cljs$core$IMapEntry$_val$arity$1;
} else
{return and__3822__auto____4225;
}
})())
{return coll.cljs$core$IMapEntry$_val$arity$1(coll);
} else
{return (function (){var or__3824__auto____4226 = (cljs.core._val[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4226)
{return or__3824__auto____4226;
} else
{var or__3824__auto____4227 = (cljs.core._val["_"]);
if(or__3824__auto____4227)
{return or__3824__auto____4227;
} else
{throw cljs.core.missing_protocol.call(null,"IMapEntry.-val",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.ISet = {};
cljs.core._disjoin = (function _disjoin(coll,v){
if((function (){var and__3822__auto____4228 = coll;
if(and__3822__auto____4228)
{return coll.cljs$core$ISet$_disjoin$arity$2;
} else
{return and__3822__auto____4228;
}
})())
{return coll.cljs$core$ISet$_disjoin$arity$2(coll,v);
} else
{return (function (){var or__3824__auto____4229 = (cljs.core._disjoin[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4229)
{return or__3824__auto____4229;
} else
{var or__3824__auto____4230 = (cljs.core._disjoin["_"]);
if(or__3824__auto____4230)
{return or__3824__auto____4230;
} else
{throw cljs.core.missing_protocol.call(null,"ISet.-disjoin",coll);
}
}
})().call(null,coll,v);
}
});
void 0;void 0;cljs.core.IStack = {};
cljs.core._peek = (function _peek(coll){
if((function (){var and__3822__auto____4231 = coll;
if(and__3822__auto____4231)
{return coll.cljs$core$IStack$_peek$arity$1;
} else
{return and__3822__auto____4231;
}
})())
{return coll.cljs$core$IStack$_peek$arity$1(coll);
} else
{return (function (){var or__3824__auto____4232 = (cljs.core._peek[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4232)
{return or__3824__auto____4232;
} else
{var or__3824__auto____4233 = (cljs.core._peek["_"]);
if(or__3824__auto____4233)
{return or__3824__auto____4233;
} else
{throw cljs.core.missing_protocol.call(null,"IStack.-peek",coll);
}
}
})().call(null,coll);
}
});
cljs.core._pop = (function _pop(coll){
if((function (){var and__3822__auto____4234 = coll;
if(and__3822__auto____4234)
{return coll.cljs$core$IStack$_pop$arity$1;
} else
{return and__3822__auto____4234;
}
})())
{return coll.cljs$core$IStack$_pop$arity$1(coll);
} else
{return (function (){var or__3824__auto____4235 = (cljs.core._pop[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4235)
{return or__3824__auto____4235;
} else
{var or__3824__auto____4236 = (cljs.core._pop["_"]);
if(or__3824__auto____4236)
{return or__3824__auto____4236;
} else
{throw cljs.core.missing_protocol.call(null,"IStack.-pop",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.IVector = {};
cljs.core._assoc_n = (function _assoc_n(coll,n,val){
if((function (){var and__3822__auto____4237 = coll;
if(and__3822__auto____4237)
{return coll.cljs$core$IVector$_assoc_n$arity$3;
} else
{return and__3822__auto____4237;
}
})())
{return coll.cljs$core$IVector$_assoc_n$arity$3(coll,n,val);
} else
{return (function (){var or__3824__auto____4238 = (cljs.core._assoc_n[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4238)
{return or__3824__auto____4238;
} else
{var or__3824__auto____4239 = (cljs.core._assoc_n["_"]);
if(or__3824__auto____4239)
{return or__3824__auto____4239;
} else
{throw cljs.core.missing_protocol.call(null,"IVector.-assoc-n",coll);
}
}
})().call(null,coll,n,val);
}
});
void 0;void 0;cljs.core.IDeref = {};
cljs.core._deref = (function _deref(o){
if((function (){var and__3822__auto____4240 = o;
if(and__3822__auto____4240)
{return o.cljs$core$IDeref$_deref$arity$1;
} else
{return and__3822__auto____4240;
}
})())
{return o.cljs$core$IDeref$_deref$arity$1(o);
} else
{return (function (){var or__3824__auto____4241 = (cljs.core._deref[goog.typeOf.call(null,o)]);
if(or__3824__auto____4241)
{return or__3824__auto____4241;
} else
{var or__3824__auto____4242 = (cljs.core._deref["_"]);
if(or__3824__auto____4242)
{return or__3824__auto____4242;
} else
{throw cljs.core.missing_protocol.call(null,"IDeref.-deref",o);
}
}
})().call(null,o);
}
});
void 0;void 0;cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = (function _deref_with_timeout(o,msec,timeout_val){
if((function (){var and__3822__auto____4243 = o;
if(and__3822__auto____4243)
{return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
} else
{return and__3822__auto____4243;
}
})())
{return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o,msec,timeout_val);
} else
{return (function (){var or__3824__auto____4244 = (cljs.core._deref_with_timeout[goog.typeOf.call(null,o)]);
if(or__3824__auto____4244)
{return or__3824__auto____4244;
} else
{var or__3824__auto____4245 = (cljs.core._deref_with_timeout["_"]);
if(or__3824__auto____4245)
{return or__3824__auto____4245;
} else
{throw cljs.core.missing_protocol.call(null,"IDerefWithTimeout.-deref-with-timeout",o);
}
}
})().call(null,o,msec,timeout_val);
}
});
void 0;void 0;cljs.core.IMeta = {};
cljs.core._meta = (function _meta(o){
if((function (){var and__3822__auto____4246 = o;
if(and__3822__auto____4246)
{return o.cljs$core$IMeta$_meta$arity$1;
} else
{return and__3822__auto____4246;
}
})())
{return o.cljs$core$IMeta$_meta$arity$1(o);
} else
{return (function (){var or__3824__auto____4247 = (cljs.core._meta[goog.typeOf.call(null,o)]);
if(or__3824__auto____4247)
{return or__3824__auto____4247;
} else
{var or__3824__auto____4248 = (cljs.core._meta["_"]);
if(or__3824__auto____4248)
{return or__3824__auto____4248;
} else
{throw cljs.core.missing_protocol.call(null,"IMeta.-meta",o);
}
}
})().call(null,o);
}
});
void 0;void 0;cljs.core.IWithMeta = {};
cljs.core._with_meta = (function _with_meta(o,meta){
if((function (){var and__3822__auto____4249 = o;
if(and__3822__auto____4249)
{return o.cljs$core$IWithMeta$_with_meta$arity$2;
} else
{return and__3822__auto____4249;
}
})())
{return o.cljs$core$IWithMeta$_with_meta$arity$2(o,meta);
} else
{return (function (){var or__3824__auto____4250 = (cljs.core._with_meta[goog.typeOf.call(null,o)]);
if(or__3824__auto____4250)
{return or__3824__auto____4250;
} else
{var or__3824__auto____4251 = (cljs.core._with_meta["_"]);
if(or__3824__auto____4251)
{return or__3824__auto____4251;
} else
{throw cljs.core.missing_protocol.call(null,"IWithMeta.-with-meta",o);
}
}
})().call(null,o,meta);
}
});
void 0;void 0;cljs.core.IReduce = {};
cljs.core._reduce = (function() {
var _reduce = null;
var _reduce__2 = (function (coll,f){
if((function (){var and__3822__auto____4252 = coll;
if(and__3822__auto____4252)
{return coll.cljs$core$IReduce$_reduce$arity$2;
} else
{return and__3822__auto____4252;
}
})())
{return coll.cljs$core$IReduce$_reduce$arity$2(coll,f);
} else
{return (function (){var or__3824__auto____4253 = (cljs.core._reduce[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4253)
{return or__3824__auto____4253;
} else
{var or__3824__auto____4254 = (cljs.core._reduce["_"]);
if(or__3824__auto____4254)
{return or__3824__auto____4254;
} else
{throw cljs.core.missing_protocol.call(null,"IReduce.-reduce",coll);
}
}
})().call(null,coll,f);
}
});
var _reduce__3 = (function (coll,f,start){
if((function (){var and__3822__auto____4255 = coll;
if(and__3822__auto____4255)
{return coll.cljs$core$IReduce$_reduce$arity$3;
} else
{return and__3822__auto____4255;
}
})())
{return coll.cljs$core$IReduce$_reduce$arity$3(coll,f,start);
} else
{return (function (){var or__3824__auto____4256 = (cljs.core._reduce[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4256)
{return or__3824__auto____4256;
} else
{var or__3824__auto____4257 = (cljs.core._reduce["_"]);
if(or__3824__auto____4257)
{return or__3824__auto____4257;
} else
{throw cljs.core.missing_protocol.call(null,"IReduce.-reduce",coll);
}
}
})().call(null,coll,f,start);
}
});
_reduce = function(coll,f,start){
switch(arguments.length){
case 2:
return _reduce__2.call(this,coll,f);
case 3:
return _reduce__3.call(this,coll,f,start);
}
throw('Invalid arity: ' + arguments.length);
};
_reduce.cljs$lang$arity$2 = _reduce__2;
_reduce.cljs$lang$arity$3 = _reduce__3;
return _reduce;
})()
;
void 0;void 0;cljs.core.IKVReduce = {};
cljs.core._kv_reduce = (function _kv_reduce(coll,f,init){
if((function (){var and__3822__auto____4258 = coll;
if(and__3822__auto____4258)
{return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
} else
{return and__3822__auto____4258;
}
})())
{return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll,f,init);
} else
{return (function (){var or__3824__auto____4259 = (cljs.core._kv_reduce[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4259)
{return or__3824__auto____4259;
} else
{var or__3824__auto____4260 = (cljs.core._kv_reduce["_"]);
if(or__3824__auto____4260)
{return or__3824__auto____4260;
} else
{throw cljs.core.missing_protocol.call(null,"IKVReduce.-kv-reduce",coll);
}
}
})().call(null,coll,f,init);
}
});
void 0;void 0;cljs.core.IEquiv = {};
cljs.core._equiv = (function _equiv(o,other){
if((function (){var and__3822__auto____4261 = o;
if(and__3822__auto____4261)
{return o.cljs$core$IEquiv$_equiv$arity$2;
} else
{return and__3822__auto____4261;
}
})())
{return o.cljs$core$IEquiv$_equiv$arity$2(o,other);
} else
{return (function (){var or__3824__auto____4262 = (cljs.core._equiv[goog.typeOf.call(null,o)]);
if(or__3824__auto____4262)
{return or__3824__auto____4262;
} else
{var or__3824__auto____4263 = (cljs.core._equiv["_"]);
if(or__3824__auto____4263)
{return or__3824__auto____4263;
} else
{throw cljs.core.missing_protocol.call(null,"IEquiv.-equiv",o);
}
}
})().call(null,o,other);
}
});
void 0;void 0;cljs.core.IHash = {};
cljs.core._hash = (function _hash(o){
if((function (){var and__3822__auto____4264 = o;
if(and__3822__auto____4264)
{return o.cljs$core$IHash$_hash$arity$1;
} else
{return and__3822__auto____4264;
}
})())
{return o.cljs$core$IHash$_hash$arity$1(o);
} else
{return (function (){var or__3824__auto____4265 = (cljs.core._hash[goog.typeOf.call(null,o)]);
if(or__3824__auto____4265)
{return or__3824__auto____4265;
} else
{var or__3824__auto____4266 = (cljs.core._hash["_"]);
if(or__3824__auto____4266)
{return or__3824__auto____4266;
} else
{throw cljs.core.missing_protocol.call(null,"IHash.-hash",o);
}
}
})().call(null,o);
}
});
void 0;void 0;cljs.core.ISeqable = {};
cljs.core._seq = (function _seq(o){
if((function (){var and__3822__auto____4267 = o;
if(and__3822__auto____4267)
{return o.cljs$core$ISeqable$_seq$arity$1;
} else
{return and__3822__auto____4267;
}
})())
{return o.cljs$core$ISeqable$_seq$arity$1(o);
} else
{return (function (){var or__3824__auto____4268 = (cljs.core._seq[goog.typeOf.call(null,o)]);
if(or__3824__auto____4268)
{return or__3824__auto____4268;
} else
{var or__3824__auto____4269 = (cljs.core._seq["_"]);
if(or__3824__auto____4269)
{return or__3824__auto____4269;
} else
{throw cljs.core.missing_protocol.call(null,"ISeqable.-seq",o);
}
}
})().call(null,o);
}
});
void 0;void 0;cljs.core.ISequential = {};
void 0;void 0;cljs.core.IList = {};
void 0;void 0;cljs.core.IRecord = {};
void 0;void 0;cljs.core.IReversible = {};
cljs.core._rseq = (function _rseq(coll){
if((function (){var and__3822__auto____4270 = coll;
if(and__3822__auto____4270)
{return coll.cljs$core$IReversible$_rseq$arity$1;
} else
{return and__3822__auto____4270;
}
})())
{return coll.cljs$core$IReversible$_rseq$arity$1(coll);
} else
{return (function (){var or__3824__auto____4271 = (cljs.core._rseq[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4271)
{return or__3824__auto____4271;
} else
{var or__3824__auto____4272 = (cljs.core._rseq["_"]);
if(or__3824__auto____4272)
{return or__3824__auto____4272;
} else
{throw cljs.core.missing_protocol.call(null,"IReversible.-rseq",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.ISorted = {};
cljs.core._sorted_seq = (function _sorted_seq(coll,ascending_QMARK_){
if((function (){var and__3822__auto____4273 = coll;
if(and__3822__auto____4273)
{return coll.cljs$core$ISorted$_sorted_seq$arity$2;
} else
{return and__3822__auto____4273;
}
})())
{return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll,ascending_QMARK_);
} else
{return (function (){var or__3824__auto____4274 = (cljs.core._sorted_seq[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4274)
{return or__3824__auto____4274;
} else
{var or__3824__auto____4275 = (cljs.core._sorted_seq["_"]);
if(or__3824__auto____4275)
{return or__3824__auto____4275;
} else
{throw cljs.core.missing_protocol.call(null,"ISorted.-sorted-seq",coll);
}
}
})().call(null,coll,ascending_QMARK_);
}
});
cljs.core._sorted_seq_from = (function _sorted_seq_from(coll,k,ascending_QMARK_){
if((function (){var and__3822__auto____4276 = coll;
if(and__3822__auto____4276)
{return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
} else
{return and__3822__auto____4276;
}
})())
{return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll,k,ascending_QMARK_);
} else
{return (function (){var or__3824__auto____4277 = (cljs.core._sorted_seq_from[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4277)
{return or__3824__auto____4277;
} else
{var or__3824__auto____4278 = (cljs.core._sorted_seq_from["_"]);
if(or__3824__auto____4278)
{return or__3824__auto____4278;
} else
{throw cljs.core.missing_protocol.call(null,"ISorted.-sorted-seq-from",coll);
}
}
})().call(null,coll,k,ascending_QMARK_);
}
});
cljs.core._entry_key = (function _entry_key(coll,entry){
if((function (){var and__3822__auto____4279 = coll;
if(and__3822__auto____4279)
{return coll.cljs$core$ISorted$_entry_key$arity$2;
} else
{return and__3822__auto____4279;
}
})())
{return coll.cljs$core$ISorted$_entry_key$arity$2(coll,entry);
} else
{return (function (){var or__3824__auto____4280 = (cljs.core._entry_key[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4280)
{return or__3824__auto____4280;
} else
{var or__3824__auto____4281 = (cljs.core._entry_key["_"]);
if(or__3824__auto____4281)
{return or__3824__auto____4281;
} else
{throw cljs.core.missing_protocol.call(null,"ISorted.-entry-key",coll);
}
}
})().call(null,coll,entry);
}
});
cljs.core._comparator = (function _comparator(coll){
if((function (){var and__3822__auto____4282 = coll;
if(and__3822__auto____4282)
{return coll.cljs$core$ISorted$_comparator$arity$1;
} else
{return and__3822__auto____4282;
}
})())
{return coll.cljs$core$ISorted$_comparator$arity$1(coll);
} else
{return (function (){var or__3824__auto____4283 = (cljs.core._comparator[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4283)
{return or__3824__auto____4283;
} else
{var or__3824__auto____4284 = (cljs.core._comparator["_"]);
if(or__3824__auto____4284)
{return or__3824__auto____4284;
} else
{throw cljs.core.missing_protocol.call(null,"ISorted.-comparator",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.IPrintable = {};
cljs.core._pr_seq = (function _pr_seq(o,opts){
if((function (){var and__3822__auto____4285 = o;
if(and__3822__auto____4285)
{return o.cljs$core$IPrintable$_pr_seq$arity$2;
} else
{return and__3822__auto____4285;
}
})())
{return o.cljs$core$IPrintable$_pr_seq$arity$2(o,opts);
} else
{return (function (){var or__3824__auto____4286 = (cljs.core._pr_seq[goog.typeOf.call(null,o)]);
if(or__3824__auto____4286)
{return or__3824__auto____4286;
} else
{var or__3824__auto____4287 = (cljs.core._pr_seq["_"]);
if(or__3824__auto____4287)
{return or__3824__auto____4287;
} else
{throw cljs.core.missing_protocol.call(null,"IPrintable.-pr-seq",o);
}
}
})().call(null,o,opts);
}
});
void 0;void 0;cljs.core.IPending = {};
cljs.core._realized_QMARK_ = (function _realized_QMARK_(d){
if((function (){var and__3822__auto____4288 = d;
if(and__3822__auto____4288)
{return d.cljs$core$IPending$_realized_QMARK_$arity$1;
} else
{return and__3822__auto____4288;
}
})())
{return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
} else
{return (function (){var or__3824__auto____4289 = (cljs.core._realized_QMARK_[goog.typeOf.call(null,d)]);
if(or__3824__auto____4289)
{return or__3824__auto____4289;
} else
{var or__3824__auto____4290 = (cljs.core._realized_QMARK_["_"]);
if(or__3824__auto____4290)
{return or__3824__auto____4290;
} else
{throw cljs.core.missing_protocol.call(null,"IPending.-realized?",d);
}
}
})().call(null,d);
}
});
void 0;void 0;cljs.core.IWatchable = {};
cljs.core._notify_watches = (function _notify_watches(this$,oldval,newval){
if((function (){var and__3822__auto____4291 = this$;
if(and__3822__auto____4291)
{return this$.cljs$core$IWatchable$_notify_watches$arity$3;
} else
{return and__3822__auto____4291;
}
})())
{return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$,oldval,newval);
} else
{return (function (){var or__3824__auto____4292 = (cljs.core._notify_watches[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4292)
{return or__3824__auto____4292;
} else
{var or__3824__auto____4293 = (cljs.core._notify_watches["_"]);
if(or__3824__auto____4293)
{return or__3824__auto____4293;
} else
{throw cljs.core.missing_protocol.call(null,"IWatchable.-notify-watches",this$);
}
}
})().call(null,this$,oldval,newval);
}
});
cljs.core._add_watch = (function _add_watch(this$,key,f){
if((function (){var and__3822__auto____4294 = this$;
if(and__3822__auto____4294)
{return this$.cljs$core$IWatchable$_add_watch$arity$3;
} else
{return and__3822__auto____4294;
}
})())
{return this$.cljs$core$IWatchable$_add_watch$arity$3(this$,key,f);
} else
{return (function (){var or__3824__auto____4295 = (cljs.core._add_watch[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4295)
{return or__3824__auto____4295;
} else
{var or__3824__auto____4296 = (cljs.core._add_watch["_"]);
if(or__3824__auto____4296)
{return or__3824__auto____4296;
} else
{throw cljs.core.missing_protocol.call(null,"IWatchable.-add-watch",this$);
}
}
})().call(null,this$,key,f);
}
});
cljs.core._remove_watch = (function _remove_watch(this$,key){
if((function (){var and__3822__auto____4297 = this$;
if(and__3822__auto____4297)
{return this$.cljs$core$IWatchable$_remove_watch$arity$2;
} else
{return and__3822__auto____4297;
}
})())
{return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$,key);
} else
{return (function (){var or__3824__auto____4298 = (cljs.core._remove_watch[goog.typeOf.call(null,this$)]);
if(or__3824__auto____4298)
{return or__3824__auto____4298;
} else
{var or__3824__auto____4299 = (cljs.core._remove_watch["_"]);
if(or__3824__auto____4299)
{return or__3824__auto____4299;
} else
{throw cljs.core.missing_protocol.call(null,"IWatchable.-remove-watch",this$);
}
}
})().call(null,this$,key);
}
});
void 0;void 0;cljs.core.IEditableCollection = {};
cljs.core._as_transient = (function _as_transient(coll){
if((function (){var and__3822__auto____4300 = coll;
if(and__3822__auto____4300)
{return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
} else
{return and__3822__auto____4300;
}
})())
{return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
} else
{return (function (){var or__3824__auto____4301 = (cljs.core._as_transient[goog.typeOf.call(null,coll)]);
if(or__3824__auto____4301)
{return or__3824__auto____4301;
} else
{var or__3824__auto____4302 = (cljs.core._as_transient["_"]);
if(or__3824__auto____4302)
{return or__3824__auto____4302;
} else
{throw cljs.core.missing_protocol.call(null,"IEditableCollection.-as-transient",coll);
}
}
})().call(null,coll);
}
});
void 0;void 0;cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = (function _conj_BANG_(tcoll,val){
if((function (){var and__3822__auto____4303 = tcoll;
if(and__3822__auto____4303)
{return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
} else
{return and__3822__auto____4303;
}
})())
{return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll,val);
} else
{return (function (){var or__3824__auto____4304 = (cljs.core._conj_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4304)
{return or__3824__auto____4304;
} else
{var or__3824__auto____4305 = (cljs.core._conj_BANG_["_"]);
if(or__3824__auto____4305)
{return or__3824__auto____4305;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientCollection.-conj!",tcoll);
}
}
})().call(null,tcoll,val);
}
});
cljs.core._persistent_BANG_ = (function _persistent_BANG_(tcoll){
if((function (){var and__3822__auto____4306 = tcoll;
if(and__3822__auto____4306)
{return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
} else
{return and__3822__auto____4306;
}
})())
{return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
} else
{return (function (){var or__3824__auto____4307 = (cljs.core._persistent_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4307)
{return or__3824__auto____4307;
} else
{var or__3824__auto____4308 = (cljs.core._persistent_BANG_["_"]);
if(or__3824__auto____4308)
{return or__3824__auto____4308;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientCollection.-persistent!",tcoll);
}
}
})().call(null,tcoll);
}
});
void 0;void 0;cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = (function _assoc_BANG_(tcoll,key,val){
if((function (){var and__3822__auto____4309 = tcoll;
if(and__3822__auto____4309)
{return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
} else
{return and__3822__auto____4309;
}
})())
{return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll,key,val);
} else
{return (function (){var or__3824__auto____4310 = (cljs.core._assoc_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4310)
{return or__3824__auto____4310;
} else
{var or__3824__auto____4311 = (cljs.core._assoc_BANG_["_"]);
if(or__3824__auto____4311)
{return or__3824__auto____4311;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientAssociative.-assoc!",tcoll);
}
}
})().call(null,tcoll,key,val);
}
});
void 0;void 0;cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = (function _dissoc_BANG_(tcoll,key){
if((function (){var and__3822__auto____4312 = tcoll;
if(and__3822__auto____4312)
{return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
} else
{return and__3822__auto____4312;
}
})())
{return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll,key);
} else
{return (function (){var or__3824__auto____4313 = (cljs.core._dissoc_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4313)
{return or__3824__auto____4313;
} else
{var or__3824__auto____4314 = (cljs.core._dissoc_BANG_["_"]);
if(or__3824__auto____4314)
{return or__3824__auto____4314;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientMap.-dissoc!",tcoll);
}
}
})().call(null,tcoll,key);
}
});
void 0;void 0;cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = (function _assoc_n_BANG_(tcoll,n,val){
if((function (){var and__3822__auto____4315 = tcoll;
if(and__3822__auto____4315)
{return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
} else
{return and__3822__auto____4315;
}
})())
{return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll,n,val);
} else
{return (function (){var or__3824__auto____4316 = (cljs.core._assoc_n_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4316)
{return or__3824__auto____4316;
} else
{var or__3824__auto____4317 = (cljs.core._assoc_n_BANG_["_"]);
if(or__3824__auto____4317)
{return or__3824__auto____4317;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientVector.-assoc-n!",tcoll);
}
}
})().call(null,tcoll,n,val);
}
});
cljs.core._pop_BANG_ = (function _pop_BANG_(tcoll){
if((function (){var and__3822__auto____4318 = tcoll;
if(and__3822__auto____4318)
{return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
} else
{return and__3822__auto____4318;
}
})())
{return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
} else
{return (function (){var or__3824__auto____4319 = (cljs.core._pop_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4319)
{return or__3824__auto____4319;
} else
{var or__3824__auto____4320 = (cljs.core._pop_BANG_["_"]);
if(or__3824__auto____4320)
{return or__3824__auto____4320;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientVector.-pop!",tcoll);
}
}
})().call(null,tcoll);
}
});
void 0;void 0;cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = (function _disjoin_BANG_(tcoll,v){
if((function (){var and__3822__auto____4321 = tcoll;
if(and__3822__auto____4321)
{return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
} else
{return and__3822__auto____4321;
}
})())
{return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll,v);
} else
{return (function (){var or__3824__auto____4322 = (cljs.core._disjoin_BANG_[goog.typeOf.call(null,tcoll)]);
if(or__3824__auto____4322)
{return or__3824__auto____4322;
} else
{var or__3824__auto____4323 = (cljs.core._disjoin_BANG_["_"]);
if(or__3824__auto____4323)
{return or__3824__auto____4323;
} else
{throw cljs.core.missing_protocol.call(null,"ITransientSet.-disjoin!",tcoll);
}
}
})().call(null,tcoll,v);
}
});
void 0;/**
* Tests if 2 arguments are the same object
*/
cljs.core.identical_QMARK_ = (function identical_QMARK_(x,y){
return (x === y);
});
void 0;
void 0;
/**
* Equality. Returns true if x equals y, false if not. Compares
* numbers and collections in a type-independent manner.  Clojure's immutable data
* structures define -equiv (and thus =) as a value, not an identity,
* comparison.
* @param {...*} var_args
*/
cljs.core._EQ_ = (function() {
var _EQ_ = null;
var _EQ___1 = (function (x){
return true;
});
var _EQ___2 = (function (x,y){
var or__3824__auto____4324 = (x === y);
if(or__3824__auto____4324)
{return or__3824__auto____4324;
} else
{return cljs.core._equiv.call(null,x,y);
}
});
var _EQ___3 = (function() { 
var G__4325__delegate = function (x,y,more){
while(true){
if(cljs.core.truth_(_EQ_.call(null,x,y)))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4326 = y;
var G__4327 = cljs.core.first.call(null,more);
var G__4328 = cljs.core.next.call(null,more);
x = G__4326;
y = G__4327;
more = G__4328;
continue;
}
} else
{return _EQ_.call(null,y,cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4325 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4325__delegate.call(this, x, y, more);
};
G__4325.cljs$lang$maxFixedArity = 2;
G__4325.cljs$lang$applyTo = (function (arglist__4329){
var x = cljs.core.first(arglist__4329);
var y = cljs.core.first(cljs.core.next(arglist__4329));
var more = cljs.core.rest(cljs.core.next(arglist__4329));
return G__4325__delegate(x, y, more);
});
G__4325.cljs$lang$arity$variadic = G__4325__delegate;
return G__4325;
})()
;
_EQ_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _EQ___1.call(this,x);
case 2:
return _EQ___2.call(this,x,y);
default:
return _EQ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_EQ_.cljs$lang$maxFixedArity = 2;
_EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
_EQ_.cljs$lang$arity$1 = _EQ___1;
_EQ_.cljs$lang$arity$2 = _EQ___2;
_EQ_.cljs$lang$arity$variadic = _EQ___3.cljs$lang$arity$variadic;
return _EQ_;
})()
;
/**
* Returns true if x is nil, false otherwise.
*/
cljs.core.nil_QMARK_ = (function nil_QMARK_(x){
return (x == null);
});
cljs.core.type = (function type(x){
if((function (){var or__3824__auto____4330 = (x == null);
if(or__3824__auto____4330)
{return or__3824__auto____4330;
} else
{return (void 0 === x);
}
})())
{return null;
} else
{return (x).constructor;
}
});
void 0;
void 0;
void 0;
(cljs.core.IHash["null"] = true);
(cljs.core._hash["null"] = (function (o){
return 0;
}));
(cljs.core.ILookup["null"] = true);
(cljs.core._lookup["null"] = (function() {
var G__4331 = null;
var G__4331__2 = (function (o,k){
return null;
});
var G__4331__3 = (function (o,k,not_found){
return not_found;
});
G__4331 = function(o,k,not_found){
switch(arguments.length){
case 2:
return G__4331__2.call(this,o,k);
case 3:
return G__4331__3.call(this,o,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4331;
})()
);
(cljs.core.IAssociative["null"] = true);
(cljs.core._assoc["null"] = (function (_,k,v){
return cljs.core.hash_map.call(null,k,v);
}));
(cljs.core.ICollection["null"] = true);
(cljs.core._conj["null"] = (function (_,o){
return cljs.core.list.call(null,o);
}));
(cljs.core.IReduce["null"] = true);
(cljs.core._reduce["null"] = (function() {
var G__4332 = null;
var G__4332__2 = (function (_,f){
return f.call(null);
});
var G__4332__3 = (function (_,f,start){
return start;
});
G__4332 = function(_,f,start){
switch(arguments.length){
case 2:
return G__4332__2.call(this,_,f);
case 3:
return G__4332__3.call(this,_,f,start);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4332;
})()
);
(cljs.core.IPrintable["null"] = true);
(cljs.core._pr_seq["null"] = (function (o){
return cljs.core.list.call(null,"nil");
}));
(cljs.core.ISet["null"] = true);
(cljs.core._disjoin["null"] = (function (_,v){
return null;
}));
(cljs.core.ICounted["null"] = true);
(cljs.core._count["null"] = (function (_){
return 0;
}));
(cljs.core.IStack["null"] = true);
(cljs.core._peek["null"] = (function (_){
return null;
}));
(cljs.core._pop["null"] = (function (_){
return null;
}));
(cljs.core.ISeq["null"] = true);
(cljs.core._first["null"] = (function (_){
return null;
}));
(cljs.core._rest["null"] = (function (_){
return cljs.core.list.call(null);
}));
(cljs.core.IEquiv["null"] = true);
(cljs.core._equiv["null"] = (function (_,o){
return (o == null);
}));
(cljs.core.IWithMeta["null"] = true);
(cljs.core._with_meta["null"] = (function (_,meta){
return null;
}));
(cljs.core.IMeta["null"] = true);
(cljs.core._meta["null"] = (function (_){
return null;
}));
(cljs.core.IIndexed["null"] = true);
(cljs.core._nth["null"] = (function() {
var G__4333 = null;
var G__4333__2 = (function (_,n){
return null;
});
var G__4333__3 = (function (_,n,not_found){
return not_found;
});
G__4333 = function(_,n,not_found){
switch(arguments.length){
case 2:
return G__4333__2.call(this,_,n);
case 3:
return G__4333__3.call(this,_,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4333;
})()
);
(cljs.core.IEmptyableCollection["null"] = true);
(cljs.core._empty["null"] = (function (_){
return null;
}));
(cljs.core.IMap["null"] = true);
(cljs.core._dissoc["null"] = (function (_,k){
return null;
}));
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
return (o.toString() === other.toString());
});
(cljs.core.IHash["number"] = true);
(cljs.core._hash["number"] = (function (o){
return o;
}));
(cljs.core.IEquiv["number"] = true);
(cljs.core._equiv["number"] = (function (x,o){
return (x === o);
}));
(cljs.core.IHash["boolean"] = true);
(cljs.core._hash["boolean"] = (function (o){
return ((o === true) ? 1 : 0);
}));
(cljs.core.IHash["function"] = true);
(cljs.core._hash["function"] = (function (o){
return goog.getUid.call(null,o);
}));
/**
* Returns a number one greater than num.
*/
cljs.core.inc = (function inc(x){
return (x + 1);
});
void 0;
void 0;
/**
* Accepts any collection which satisfies the ICount and IIndexed protocols and
* reduces them without incurring seq initialization
*/
cljs.core.ci_reduce = (function() {
var ci_reduce = null;
var ci_reduce__2 = (function (cicoll,f){
if((cljs.core._count.call(null,cicoll) === 0))
{return f.call(null);
} else
{var val__4334 = cljs.core._nth.call(null,cicoll,0);
var n__4335 = 1;
while(true){
if((n__4335 < cljs.core._count.call(null,cicoll)))
{var nval__4336 = f.call(null,val__4334,cljs.core._nth.call(null,cicoll,n__4335));
if(cljs.core.reduced_QMARK_.call(null,nval__4336))
{return cljs.core.deref.call(null,nval__4336);
} else
{{
var G__4343 = nval__4336;
var G__4344 = (n__4335 + 1);
val__4334 = G__4343;
n__4335 = G__4344;
continue;
}
}
} else
{return val__4334;
}
break;
}
}
});
var ci_reduce__3 = (function (cicoll,f,val){
var val__4337 = val;
var n__4338 = 0;
while(true){
if((n__4338 < cljs.core._count.call(null,cicoll)))
{var nval__4339 = f.call(null,val__4337,cljs.core._nth.call(null,cicoll,n__4338));
if(cljs.core.reduced_QMARK_.call(null,nval__4339))
{return cljs.core.deref.call(null,nval__4339);
} else
{{
var G__4345 = nval__4339;
var G__4346 = (n__4338 + 1);
val__4337 = G__4345;
n__4338 = G__4346;
continue;
}
}
} else
{return val__4337;
}
break;
}
});
var ci_reduce__4 = (function (cicoll,f,val,idx){
var val__4340 = val;
var n__4341 = idx;
while(true){
if((n__4341 < cljs.core._count.call(null,cicoll)))
{var nval__4342 = f.call(null,val__4340,cljs.core._nth.call(null,cicoll,n__4341));
if(cljs.core.reduced_QMARK_.call(null,nval__4342))
{return cljs.core.deref.call(null,nval__4342);
} else
{{
var G__4347 = nval__4342;
var G__4348 = (n__4341 + 1);
val__4340 = G__4347;
n__4341 = G__4348;
continue;
}
}
} else
{return val__4340;
}
break;
}
});
ci_reduce = function(cicoll,f,val,idx){
switch(arguments.length){
case 2:
return ci_reduce__2.call(this,cicoll,f);
case 3:
return ci_reduce__3.call(this,cicoll,f,val);
case 4:
return ci_reduce__4.call(this,cicoll,f,val,idx);
}
throw('Invalid arity: ' + arguments.length);
};
ci_reduce.cljs$lang$arity$2 = ci_reduce__2;
ci_reduce.cljs$lang$arity$3 = ci_reduce__3;
ci_reduce.cljs$lang$arity$4 = ci_reduce__4;
return ci_reduce;
})()
;
void 0;
void 0;
void 0;
void 0;

/**
* @constructor
*/
cljs.core.IndexedSeq = (function (a,i){
this.a = a;
this.i = i;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15990906;
})
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.IndexedSeq");
});
cljs.core.IndexedSeq.prototype.cljs$core$IHash$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__4349 = this;
return cljs.core.hash_coll.call(null,coll);
});
cljs.core.IndexedSeq.prototype.cljs$core$ISequential$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__4350 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.IndexedSeq.prototype.cljs$core$ASeq$ = true;
cljs.core.IndexedSeq.prototype.toString = (function (){
var this__4351 = this;
var this$__4352 = this;
return cljs.core.pr_str.call(null,this$__4352);
});
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
var this__4353 = this;
if(cljs.core.counted_QMARK_.call(null,this__4353.a))
{return cljs.core.ci_reduce.call(null,this__4353.a,f,(this__4353.a[this__4353.i]),(this__4353.i + 1));
} else
{return cljs.core.ci_reduce.call(null,coll,f,(this__4353.a[this__4353.i]),0);
}
});
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
var this__4354 = this;
if(cljs.core.counted_QMARK_.call(null,this__4354.a))
{return cljs.core.ci_reduce.call(null,this__4354.a,f,start,this__4354.i);
} else
{return cljs.core.ci_reduce.call(null,coll,f,start,0);
}
});
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this__4355 = this;
return this$;
});
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){
var this__4356 = this;
return (this__4356.a.length - this__4356.i);
});
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (_){
var this__4357 = this;
return (this__4357.a[this__4357.i]);
});
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (_){
var this__4358 = this;
if(((this__4358.i + 1) < this__4358.a.length))
{return (new cljs.core.IndexedSeq(this__4358.a,(this__4358.i + 1)));
} else
{return cljs.core.list.call(null);
}
});
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__4359 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
var this__4360 = this;
var i__4361 = (n + this__4360.i);
if((i__4361 < this__4360.a.length))
{return (this__4360.a[i__4361]);
} else
{return null;
}
});
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
var this__4362 = this;
var i__4363 = (n + this__4362.i);
if((i__4363 < this__4362.a.length))
{return (this__4362.a[i__4363]);
} else
{return not_found;
}
});
cljs.core.IndexedSeq;
cljs.core.prim_seq = (function() {
var prim_seq = null;
var prim_seq__1 = (function (prim){
return prim_seq.call(null,prim,0);
});
var prim_seq__2 = (function (prim,i){
if((prim.length === 0))
{return null;
} else
{return (new cljs.core.IndexedSeq(prim,i));
}
});
prim_seq = function(prim,i){
switch(arguments.length){
case 1:
return prim_seq__1.call(this,prim);
case 2:
return prim_seq__2.call(this,prim,i);
}
throw('Invalid arity: ' + arguments.length);
};
prim_seq.cljs$lang$arity$1 = prim_seq__1;
prim_seq.cljs$lang$arity$2 = prim_seq__2;
return prim_seq;
})()
;
cljs.core.array_seq = (function() {
var array_seq = null;
var array_seq__1 = (function (array){
return cljs.core.prim_seq.call(null,array,0);
});
var array_seq__2 = (function (array,i){
return cljs.core.prim_seq.call(null,array,i);
});
array_seq = function(array,i){
switch(arguments.length){
case 1:
return array_seq__1.call(this,array);
case 2:
return array_seq__2.call(this,array,i);
}
throw('Invalid arity: ' + arguments.length);
};
array_seq.cljs$lang$arity$1 = array_seq__1;
array_seq.cljs$lang$arity$2 = array_seq__2;
return array_seq;
})()
;
(cljs.core.IReduce["array"] = true);
(cljs.core._reduce["array"] = (function() {
var G__4364 = null;
var G__4364__2 = (function (array,f){
return cljs.core.ci_reduce.call(null,array,f);
});
var G__4364__3 = (function (array,f,start){
return cljs.core.ci_reduce.call(null,array,f,start);
});
G__4364 = function(array,f,start){
switch(arguments.length){
case 2:
return G__4364__2.call(this,array,f);
case 3:
return G__4364__3.call(this,array,f,start);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4364;
})()
);
(cljs.core.ILookup["array"] = true);
(cljs.core._lookup["array"] = (function() {
var G__4365 = null;
var G__4365__2 = (function (array,k){
return (array[k]);
});
var G__4365__3 = (function (array,k,not_found){
return cljs.core._nth.call(null,array,k,not_found);
});
G__4365 = function(array,k,not_found){
switch(arguments.length){
case 2:
return G__4365__2.call(this,array,k);
case 3:
return G__4365__3.call(this,array,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4365;
})()
);
(cljs.core.IIndexed["array"] = true);
(cljs.core._nth["array"] = (function() {
var G__4366 = null;
var G__4366__2 = (function (array,n){
if((n < array.length))
{return (array[n]);
} else
{return null;
}
});
var G__4366__3 = (function (array,n,not_found){
if((n < array.length))
{return (array[n]);
} else
{return not_found;
}
});
G__4366 = function(array,n,not_found){
switch(arguments.length){
case 2:
return G__4366__2.call(this,array,n);
case 3:
return G__4366__3.call(this,array,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4366;
})()
);
(cljs.core.ICounted["array"] = true);
(cljs.core._count["array"] = (function (a){
return a.length;
}));
(cljs.core.ISeqable["array"] = true);
(cljs.core._seq["array"] = (function (array){
return cljs.core.array_seq.call(null,array,0);
}));
/**
* Returns a seq on the collection. If the collection is
* empty, returns nil.  (seq nil) returns nil. seq also works on
* Strings.
*/
cljs.core.seq = (function seq(coll){
if((coll != null))
{if((function (){var G__4367__4368 = coll;
if((G__4367__4368 != null))
{if((function (){var or__3824__auto____4369 = (G__4367__4368.cljs$lang$protocol_mask$partition0$ & 32);
if(or__3824__auto____4369)
{return or__3824__auto____4369;
} else
{return G__4367__4368.cljs$core$ASeq$;
}
})())
{return true;
} else
{if((!G__4367__4368.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ASeq,G__4367__4368);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ASeq,G__4367__4368);
}
})())
{return coll;
} else
{return cljs.core._seq.call(null,coll);
}
} else
{return null;
}
});
/**
* Returns the first item in the collection. Calls seq on its
* argument. If coll is nil, returns nil.
*/
cljs.core.first = (function first(coll){
if((coll != null))
{if((function (){var G__4370__4371 = coll;
if((G__4370__4371 != null))
{if((function (){var or__3824__auto____4372 = (G__4370__4371.cljs$lang$protocol_mask$partition0$ & 64);
if(or__3824__auto____4372)
{return or__3824__auto____4372;
} else
{return G__4370__4371.cljs$core$ISeq$;
}
})())
{return true;
} else
{if((!G__4370__4371.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4370__4371);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4370__4371);
}
})())
{return cljs.core._first.call(null,coll);
} else
{var s__4373 = cljs.core.seq.call(null,coll);
if((s__4373 != null))
{return cljs.core._first.call(null,s__4373);
} else
{return null;
}
}
} else
{return null;
}
});
/**
* Returns a possibly empty seq of the items after the first. Calls seq on its
* argument.
*/
cljs.core.rest = (function rest(coll){
if((coll != null))
{if((function (){var G__4374__4375 = coll;
if((G__4374__4375 != null))
{if((function (){var or__3824__auto____4376 = (G__4374__4375.cljs$lang$protocol_mask$partition0$ & 64);
if(or__3824__auto____4376)
{return or__3824__auto____4376;
} else
{return G__4374__4375.cljs$core$ISeq$;
}
})())
{return true;
} else
{if((!G__4374__4375.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4374__4375);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4374__4375);
}
})())
{return cljs.core._rest.call(null,coll);
} else
{var s__4377 = cljs.core.seq.call(null,coll);
if((s__4377 != null))
{return cljs.core._rest.call(null,s__4377);
} else
{return cljs.core.List.EMPTY;
}
}
} else
{return cljs.core.List.EMPTY;
}
});
/**
* Returns a seq of the items after the first. Calls seq on its
* argument.  If there are no more items, returns nil
*/
cljs.core.next = (function next(coll){
if((coll != null))
{if((function (){var G__4378__4379 = coll;
if((G__4378__4379 != null))
{if((function (){var or__3824__auto____4380 = (G__4378__4379.cljs$lang$protocol_mask$partition0$ & 64);
if(or__3824__auto____4380)
{return or__3824__auto____4380;
} else
{return G__4378__4379.cljs$core$ISeq$;
}
})())
{return true;
} else
{if((!G__4378__4379.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4378__4379);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4378__4379);
}
})())
{var coll__4381 = cljs.core._rest.call(null,coll);
if((coll__4381 != null))
{if((function (){var G__4382__4383 = coll__4381;
if((G__4382__4383 != null))
{if((function (){var or__3824__auto____4384 = (G__4382__4383.cljs$lang$protocol_mask$partition0$ & 32);
if(or__3824__auto____4384)
{return or__3824__auto____4384;
} else
{return G__4382__4383.cljs$core$ASeq$;
}
})())
{return true;
} else
{if((!G__4382__4383.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ASeq,G__4382__4383);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ASeq,G__4382__4383);
}
})())
{return coll__4381;
} else
{return cljs.core._seq.call(null,coll__4381);
}
} else
{return null;
}
} else
{return cljs.core.seq.call(null,cljs.core.rest.call(null,coll));
}
} else
{return null;
}
});
/**
* Same as (first (next x))
*/
cljs.core.second = (function second(coll){
return cljs.core.first.call(null,cljs.core.next.call(null,coll));
});
/**
* Same as (first (first x))
*/
cljs.core.ffirst = (function ffirst(coll){
return cljs.core.first.call(null,cljs.core.first.call(null,coll));
});
/**
* Same as (next (first x))
*/
cljs.core.nfirst = (function nfirst(coll){
return cljs.core.next.call(null,cljs.core.first.call(null,coll));
});
/**
* Same as (first (next x))
*/
cljs.core.fnext = (function fnext(coll){
return cljs.core.first.call(null,cljs.core.next.call(null,coll));
});
/**
* Same as (next (next x))
*/
cljs.core.nnext = (function nnext(coll){
return cljs.core.next.call(null,cljs.core.next.call(null,coll));
});
/**
* Return the last item in coll, in linear time
*/
cljs.core.last = (function last(s){
while(true){
if(cljs.core.truth_(cljs.core.next.call(null,s)))
{{
var G__4385 = cljs.core.next.call(null,s);
s = G__4385;
continue;
}
} else
{return cljs.core.first.call(null,s);
}
break;
}
});
(cljs.core.IEquiv["_"] = true);
(cljs.core._equiv["_"] = (function (x,o){
return (x === o);
}));
/**
* Returns true if x is logical false, false otherwise.
*/
cljs.core.not = (function not(x){
if(cljs.core.truth_(x))
{return false;
} else
{return true;
}
});
/**
* conj[oin]. Returns a new collection with the xs
* 'added'. (conj nil item) returns (item).  The 'addition' may
* happen at different 'places' depending on the concrete type.
* @param {...*} var_args
*/
cljs.core.conj = (function() {
var conj = null;
var conj__2 = (function (coll,x){
return cljs.core._conj.call(null,coll,x);
});
var conj__3 = (function() { 
var G__4386__delegate = function (coll,x,xs){
while(true){
if(cljs.core.truth_(xs))
{{
var G__4387 = conj.call(null,coll,x);
var G__4388 = cljs.core.first.call(null,xs);
var G__4389 = cljs.core.next.call(null,xs);
coll = G__4387;
x = G__4388;
xs = G__4389;
continue;
}
} else
{return conj.call(null,coll,x);
}
break;
}
};
var G__4386 = function (coll,x,var_args){
var xs = null;
if (goog.isDef(var_args)) {
  xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4386__delegate.call(this, coll, x, xs);
};
G__4386.cljs$lang$maxFixedArity = 2;
G__4386.cljs$lang$applyTo = (function (arglist__4390){
var coll = cljs.core.first(arglist__4390);
var x = cljs.core.first(cljs.core.next(arglist__4390));
var xs = cljs.core.rest(cljs.core.next(arglist__4390));
return G__4386__delegate(coll, x, xs);
});
G__4386.cljs$lang$arity$variadic = G__4386__delegate;
return G__4386;
})()
;
conj = function(coll,x,var_args){
var xs = var_args;
switch(arguments.length){
case 2:
return conj__2.call(this,coll,x);
default:
return conj__3.cljs$lang$arity$variadic(coll,x, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
conj.cljs$lang$maxFixedArity = 2;
conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
conj.cljs$lang$arity$2 = conj__2;
conj.cljs$lang$arity$variadic = conj__3.cljs$lang$arity$variadic;
return conj;
})()
;
/**
* Returns an empty collection of the same category as coll, or nil
*/
cljs.core.empty = (function empty(coll){
return cljs.core._empty.call(null,coll);
});
void 0;
cljs.core.accumulating_seq_count = (function accumulating_seq_count(coll){
var s__4391 = cljs.core.seq.call(null,coll);
var acc__4392 = 0;
while(true){
if(cljs.core.counted_QMARK_.call(null,s__4391))
{return (acc__4392 + cljs.core._count.call(null,s__4391));
} else
{{
var G__4393 = cljs.core.next.call(null,s__4391);
var G__4394 = (acc__4392 + 1);
s__4391 = G__4393;
acc__4392 = G__4394;
continue;
}
}
break;
}
});
/**
* Returns the number of items in the collection. (count nil) returns
* 0.  Also works on strings, arrays, and Maps
*/
cljs.core.count = (function count(coll){
if(cljs.core.counted_QMARK_.call(null,coll))
{return cljs.core._count.call(null,coll);
} else
{return cljs.core.accumulating_seq_count.call(null,coll);
}
});
void 0;
cljs.core.linear_traversal_nth = (function() {
var linear_traversal_nth = null;
var linear_traversal_nth__2 = (function (coll,n){
if((coll == null))
{throw (new Error("Index out of bounds"));
} else
{if((n === 0))
{if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{return cljs.core.first.call(null,coll);
} else
{throw (new Error("Index out of bounds"));
}
} else
{if(cljs.core.indexed_QMARK_.call(null,coll))
{return cljs.core._nth.call(null,coll,n);
} else
{if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{return linear_traversal_nth.call(null,cljs.core.next.call(null,coll),(n - 1));
} else
{if("\uFDD0'else")
{throw (new Error("Index out of bounds"));
} else
{return null;
}
}
}
}
}
});
var linear_traversal_nth__3 = (function (coll,n,not_found){
if((coll == null))
{return not_found;
} else
{if((n === 0))
{if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{return cljs.core.first.call(null,coll);
} else
{return not_found;
}
} else
{if(cljs.core.indexed_QMARK_.call(null,coll))
{return cljs.core._nth.call(null,coll,n,not_found);
} else
{if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{return linear_traversal_nth.call(null,cljs.core.next.call(null,coll),(n - 1),not_found);
} else
{if("\uFDD0'else")
{return not_found;
} else
{return null;
}
}
}
}
}
});
linear_traversal_nth = function(coll,n,not_found){
switch(arguments.length){
case 2:
return linear_traversal_nth__2.call(this,coll,n);
case 3:
return linear_traversal_nth__3.call(this,coll,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
linear_traversal_nth.cljs$lang$arity$2 = linear_traversal_nth__2;
linear_traversal_nth.cljs$lang$arity$3 = linear_traversal_nth__3;
return linear_traversal_nth;
})()
;
/**
* Returns the value at the index. get returns nil if index out of
* bounds, nth throws an exception unless not-found is supplied.  nth
* also works for strings, arrays, regex Matchers and Lists, and,
* in O(n) time, for sequences.
*/
cljs.core.nth = (function() {
var nth = null;
var nth__2 = (function (coll,n){
if((coll != null))
{if((function (){var G__4395__4396 = coll;
if((G__4395__4396 != null))
{if((function (){var or__3824__auto____4397 = (G__4395__4396.cljs$lang$protocol_mask$partition0$ & 16);
if(or__3824__auto____4397)
{return or__3824__auto____4397;
} else
{return G__4395__4396.cljs$core$IIndexed$;
}
})())
{return true;
} else
{if((!G__4395__4396.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4395__4396);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4395__4396);
}
})())
{return cljs.core._nth.call(null,coll,Math.floor(n));
} else
{return cljs.core.linear_traversal_nth.call(null,coll,Math.floor(n));
}
} else
{return null;
}
});
var nth__3 = (function (coll,n,not_found){
if((coll != null))
{if((function (){var G__4398__4399 = coll;
if((G__4398__4399 != null))
{if((function (){var or__3824__auto____4400 = (G__4398__4399.cljs$lang$protocol_mask$partition0$ & 16);
if(or__3824__auto____4400)
{return or__3824__auto____4400;
} else
{return G__4398__4399.cljs$core$IIndexed$;
}
})())
{return true;
} else
{if((!G__4398__4399.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4398__4399);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4398__4399);
}
})())
{return cljs.core._nth.call(null,coll,Math.floor(n),not_found);
} else
{return cljs.core.linear_traversal_nth.call(null,coll,Math.floor(n),not_found);
}
} else
{return not_found;
}
});
nth = function(coll,n,not_found){
switch(arguments.length){
case 2:
return nth__2.call(this,coll,n);
case 3:
return nth__3.call(this,coll,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
nth.cljs$lang$arity$2 = nth__2;
nth.cljs$lang$arity$3 = nth__3;
return nth;
})()
;
/**
* Returns the value mapped to key, not-found or nil if key not present.
*/
cljs.core.get = (function() {
var get = null;
var get__2 = (function (o,k){
return cljs.core._lookup.call(null,o,k);
});
var get__3 = (function (o,k,not_found){
return cljs.core._lookup.call(null,o,k,not_found);
});
get = function(o,k,not_found){
switch(arguments.length){
case 2:
return get__2.call(this,o,k);
case 3:
return get__3.call(this,o,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
get.cljs$lang$arity$2 = get__2;
get.cljs$lang$arity$3 = get__3;
return get;
})()
;
/**
* assoc[iate]. When applied to a map, returns a new map of the
* same (hashed/sorted) type, that contains the mapping of key(s) to
* val(s). When applied to a vector, returns a new vector that
* contains val at index.
* @param {...*} var_args
*/
cljs.core.assoc = (function() {
var assoc = null;
var assoc__3 = (function (coll,k,v){
return cljs.core._assoc.call(null,coll,k,v);
});
var assoc__4 = (function() { 
var G__4402__delegate = function (coll,k,v,kvs){
while(true){
var ret__4401 = assoc.call(null,coll,k,v);
if(cljs.core.truth_(kvs))
{{
var G__4403 = ret__4401;
var G__4404 = cljs.core.first.call(null,kvs);
var G__4405 = cljs.core.second.call(null,kvs);
var G__4406 = cljs.core.nnext.call(null,kvs);
coll = G__4403;
k = G__4404;
v = G__4405;
kvs = G__4406;
continue;
}
} else
{return ret__4401;
}
break;
}
};
var G__4402 = function (coll,k,v,var_args){
var kvs = null;
if (goog.isDef(var_args)) {
  kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4402__delegate.call(this, coll, k, v, kvs);
};
G__4402.cljs$lang$maxFixedArity = 3;
G__4402.cljs$lang$applyTo = (function (arglist__4407){
var coll = cljs.core.first(arglist__4407);
var k = cljs.core.first(cljs.core.next(arglist__4407));
var v = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4407)));
var kvs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4407)));
return G__4402__delegate(coll, k, v, kvs);
});
G__4402.cljs$lang$arity$variadic = G__4402__delegate;
return G__4402;
})()
;
assoc = function(coll,k,v,var_args){
var kvs = var_args;
switch(arguments.length){
case 3:
return assoc__3.call(this,coll,k,v);
default:
return assoc__4.cljs$lang$arity$variadic(coll,k,v, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
assoc.cljs$lang$maxFixedArity = 3;
assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
assoc.cljs$lang$arity$3 = assoc__3;
assoc.cljs$lang$arity$variadic = assoc__4.cljs$lang$arity$variadic;
return assoc;
})()
;
/**
* dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
* that does not contain a mapping for key(s).
* @param {...*} var_args
*/
cljs.core.dissoc = (function() {
var dissoc = null;
var dissoc__1 = (function (coll){
return coll;
});
var dissoc__2 = (function (coll,k){
return cljs.core._dissoc.call(null,coll,k);
});
var dissoc__3 = (function() { 
var G__4409__delegate = function (coll,k,ks){
while(true){
var ret__4408 = dissoc.call(null,coll,k);
if(cljs.core.truth_(ks))
{{
var G__4410 = ret__4408;
var G__4411 = cljs.core.first.call(null,ks);
var G__4412 = cljs.core.next.call(null,ks);
coll = G__4410;
k = G__4411;
ks = G__4412;
continue;
}
} else
{return ret__4408;
}
break;
}
};
var G__4409 = function (coll,k,var_args){
var ks = null;
if (goog.isDef(var_args)) {
  ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4409__delegate.call(this, coll, k, ks);
};
G__4409.cljs$lang$maxFixedArity = 2;
G__4409.cljs$lang$applyTo = (function (arglist__4413){
var coll = cljs.core.first(arglist__4413);
var k = cljs.core.first(cljs.core.next(arglist__4413));
var ks = cljs.core.rest(cljs.core.next(arglist__4413));
return G__4409__delegate(coll, k, ks);
});
G__4409.cljs$lang$arity$variadic = G__4409__delegate;
return G__4409;
})()
;
dissoc = function(coll,k,var_args){
var ks = var_args;
switch(arguments.length){
case 1:
return dissoc__1.call(this,coll);
case 2:
return dissoc__2.call(this,coll,k);
default:
return dissoc__3.cljs$lang$arity$variadic(coll,k, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
dissoc.cljs$lang$maxFixedArity = 2;
dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
dissoc.cljs$lang$arity$1 = dissoc__1;
dissoc.cljs$lang$arity$2 = dissoc__2;
dissoc.cljs$lang$arity$variadic = dissoc__3.cljs$lang$arity$variadic;
return dissoc;
})()
;
/**
* Returns an object of the same type and value as obj, with
* map m as its metadata.
*/
cljs.core.with_meta = (function with_meta(o,meta){
return cljs.core._with_meta.call(null,o,meta);
});
/**
* Returns the metadata of obj, returns nil if there is no metadata.
*/
cljs.core.meta = (function meta(o){
if((function (){var G__4414__4415 = o;
if((G__4414__4415 != null))
{if((function (){var or__3824__auto____4416 = (G__4414__4415.cljs$lang$protocol_mask$partition0$ & 65536);
if(or__3824__auto____4416)
{return or__3824__auto____4416;
} else
{return G__4414__4415.cljs$core$IMeta$;
}
})())
{return true;
} else
{if((!G__4414__4415.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IMeta,G__4414__4415);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IMeta,G__4414__4415);
}
})())
{return cljs.core._meta.call(null,o);
} else
{return null;
}
});
/**
* For a list or queue, same as first, for a vector, same as, but much
* more efficient than, last. If the collection is empty, returns nil.
*/
cljs.core.peek = (function peek(coll){
return cljs.core._peek.call(null,coll);
});
/**
* For a list or queue, returns a new list/queue without the first
* item, for a vector, returns a new vector without the last item.
* Note - not the same as next/butlast.
*/
cljs.core.pop = (function pop(coll){
return cljs.core._pop.call(null,coll);
});
/**
* disj[oin]. Returns a new set of the same (hashed/sorted) type, that
* does not contain key(s).
* @param {...*} var_args
*/
cljs.core.disj = (function() {
var disj = null;
var disj__1 = (function (coll){
return coll;
});
var disj__2 = (function (coll,k){
return cljs.core._disjoin.call(null,coll,k);
});
var disj__3 = (function() { 
var G__4418__delegate = function (coll,k,ks){
while(true){
var ret__4417 = disj.call(null,coll,k);
if(cljs.core.truth_(ks))
{{
var G__4419 = ret__4417;
var G__4420 = cljs.core.first.call(null,ks);
var G__4421 = cljs.core.next.call(null,ks);
coll = G__4419;
k = G__4420;
ks = G__4421;
continue;
}
} else
{return ret__4417;
}
break;
}
};
var G__4418 = function (coll,k,var_args){
var ks = null;
if (goog.isDef(var_args)) {
  ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4418__delegate.call(this, coll, k, ks);
};
G__4418.cljs$lang$maxFixedArity = 2;
G__4418.cljs$lang$applyTo = (function (arglist__4422){
var coll = cljs.core.first(arglist__4422);
var k = cljs.core.first(cljs.core.next(arglist__4422));
var ks = cljs.core.rest(cljs.core.next(arglist__4422));
return G__4418__delegate(coll, k, ks);
});
G__4418.cljs$lang$arity$variadic = G__4418__delegate;
return G__4418;
})()
;
disj = function(coll,k,var_args){
var ks = var_args;
switch(arguments.length){
case 1:
return disj__1.call(this,coll);
case 2:
return disj__2.call(this,coll,k);
default:
return disj__3.cljs$lang$arity$variadic(coll,k, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
disj.cljs$lang$maxFixedArity = 2;
disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
disj.cljs$lang$arity$1 = disj__1;
disj.cljs$lang$arity$2 = disj__2;
disj.cljs$lang$arity$variadic = disj__3.cljs$lang$arity$variadic;
return disj;
})()
;
cljs.core.hash = (function hash(o){
return cljs.core._hash.call(null,o);
});
/**
* Returns true if coll has no items - same as (not (seq coll)).
* Please use the idiom (seq x) rather than (not (empty? x))
*/
cljs.core.empty_QMARK_ = (function empty_QMARK_(coll){
return cljs.core.not.call(null,cljs.core.seq.call(null,coll));
});
/**
* Returns true if x satisfies ICollection
*/
cljs.core.coll_QMARK_ = (function coll_QMARK_(x){
if((x == null))
{return false;
} else
{var G__4423__4424 = x;
if((G__4423__4424 != null))
{if((function (){var or__3824__auto____4425 = (G__4423__4424.cljs$lang$protocol_mask$partition0$ & 8);
if(or__3824__auto____4425)
{return or__3824__auto____4425;
} else
{return G__4423__4424.cljs$core$ICollection$;
}
})())
{return true;
} else
{if((!G__4423__4424.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ICollection,G__4423__4424);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ICollection,G__4423__4424);
}
}
});
/**
* Returns true if x satisfies ISet
*/
cljs.core.set_QMARK_ = (function set_QMARK_(x){
if((x == null))
{return false;
} else
{var G__4426__4427 = x;
if((G__4426__4427 != null))
{if((function (){var or__3824__auto____4428 = (G__4426__4427.cljs$lang$protocol_mask$partition0$ & 2048);
if(or__3824__auto____4428)
{return or__3824__auto____4428;
} else
{return G__4426__4427.cljs$core$ISet$;
}
})())
{return true;
} else
{if((!G__4426__4427.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISet,G__4426__4427);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISet,G__4426__4427);
}
}
});
/**
* Returns true if coll implements Associative
*/
cljs.core.associative_QMARK_ = (function associative_QMARK_(x){
var G__4429__4430 = x;
if((G__4429__4430 != null))
{if((function (){var or__3824__auto____4431 = (G__4429__4430.cljs$lang$protocol_mask$partition0$ & 256);
if(or__3824__auto____4431)
{return or__3824__auto____4431;
} else
{return G__4429__4430.cljs$core$IAssociative$;
}
})())
{return true;
} else
{if((!G__4429__4430.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IAssociative,G__4429__4430);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IAssociative,G__4429__4430);
}
});
/**
* Returns true if coll satisfies ISequential
*/
cljs.core.sequential_QMARK_ = (function sequential_QMARK_(x){
var G__4432__4433 = x;
if((G__4432__4433 != null))
{if((function (){var or__3824__auto____4434 = (G__4432__4433.cljs$lang$protocol_mask$partition0$ & 8388608);
if(or__3824__auto____4434)
{return or__3824__auto____4434;
} else
{return G__4432__4433.cljs$core$ISequential$;
}
})())
{return true;
} else
{if((!G__4432__4433.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISequential,G__4432__4433);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISequential,G__4432__4433);
}
});
/**
* Returns true if coll implements count in constant time
*/
cljs.core.counted_QMARK_ = (function counted_QMARK_(x){
var G__4435__4436 = x;
if((G__4435__4436 != null))
{if((function (){var or__3824__auto____4437 = (G__4435__4436.cljs$lang$protocol_mask$partition0$ & 2);
if(or__3824__auto____4437)
{return or__3824__auto____4437;
} else
{return G__4435__4436.cljs$core$ICounted$;
}
})())
{return true;
} else
{if((!G__4435__4436.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ICounted,G__4435__4436);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ICounted,G__4435__4436);
}
});
/**
* Returns true if coll implements nth in constant time
*/
cljs.core.indexed_QMARK_ = (function indexed_QMARK_(x){
var G__4438__4439 = x;
if((G__4438__4439 != null))
{if((function (){var or__3824__auto____4440 = (G__4438__4439.cljs$lang$protocol_mask$partition0$ & 16);
if(or__3824__auto____4440)
{return or__3824__auto____4440;
} else
{return G__4438__4439.cljs$core$IIndexed$;
}
})())
{return true;
} else
{if((!G__4438__4439.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4438__4439);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IIndexed,G__4438__4439);
}
});
/**
* Returns true if coll satisfies IReduce
*/
cljs.core.reduceable_QMARK_ = (function reduceable_QMARK_(x){
var G__4441__4442 = x;
if((G__4441__4442 != null))
{if((function (){var or__3824__auto____4443 = (G__4441__4442.cljs$lang$protocol_mask$partition0$ & 262144);
if(or__3824__auto____4443)
{return or__3824__auto____4443;
} else
{return G__4441__4442.cljs$core$IReduce$;
}
})())
{return true;
} else
{if((!G__4441__4442.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4441__4442);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4441__4442);
}
});
/**
* Return true if x satisfies IMap
*/
cljs.core.map_QMARK_ = (function map_QMARK_(x){
if((x == null))
{return false;
} else
{var G__4444__4445 = x;
if((G__4444__4445 != null))
{if((function (){var or__3824__auto____4446 = (G__4444__4445.cljs$lang$protocol_mask$partition0$ & 512);
if(or__3824__auto____4446)
{return or__3824__auto____4446;
} else
{return G__4444__4445.cljs$core$IMap$;
}
})())
{return true;
} else
{if((!G__4444__4445.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IMap,G__4444__4445);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IMap,G__4444__4445);
}
}
});
/**
* Return true if x satisfies IVector
*/
cljs.core.vector_QMARK_ = (function vector_QMARK_(x){
var G__4447__4448 = x;
if((G__4447__4448 != null))
{if((function (){var or__3824__auto____4449 = (G__4447__4448.cljs$lang$protocol_mask$partition0$ & 8192);
if(or__3824__auto____4449)
{return or__3824__auto____4449;
} else
{return G__4447__4448.cljs$core$IVector$;
}
})())
{return true;
} else
{if((!G__4447__4448.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IVector,G__4447__4448);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IVector,G__4447__4448);
}
});
/**
* @param {...*} var_args
*/
cljs.core.js_obj = (function() {
var js_obj = null;
var js_obj__0 = (function (){
return {};
});
var js_obj__1 = (function() { 
var G__4450__delegate = function (keyvals){
return cljs.core.apply.call(null,goog.object.create,keyvals);
};
var G__4450 = function (var_args){
var keyvals = null;
if (goog.isDef(var_args)) {
  keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4450__delegate.call(this, keyvals);
};
G__4450.cljs$lang$maxFixedArity = 0;
G__4450.cljs$lang$applyTo = (function (arglist__4451){
var keyvals = cljs.core.seq(arglist__4451);;
return G__4450__delegate(keyvals);
});
G__4450.cljs$lang$arity$variadic = G__4450__delegate;
return G__4450;
})()
;
js_obj = function(var_args){
var keyvals = var_args;
switch(arguments.length){
case 0:
return js_obj__0.call(this);
default:
return js_obj__1.cljs$lang$arity$variadic(falsecljs.core.array_seq(arguments, 0));
}
throw('Invalid arity: ' + arguments.length);
};
js_obj.cljs$lang$maxFixedArity = 0;
js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
js_obj.cljs$lang$arity$0 = js_obj__0;
js_obj.cljs$lang$arity$variadic = js_obj__1.cljs$lang$arity$variadic;
return js_obj;
})()
;
cljs.core.js_keys = (function js_keys(obj){
var keys__4452 = [];
goog.object.forEach.call(null,obj,(function (val,key,obj){
return keys__4452.push(key);
}));
return keys__4452;
});
cljs.core.js_delete = (function js_delete(obj,key){
return delete obj[key];
});
cljs.core.array_copy = (function array_copy(from,i,to,j,len){
var i__4453 = i;
var j__4454 = j;
var len__4455 = len;
while(true){
if((len__4455 === 0))
{return to;
} else
{(to[j__4454] = (from[i__4453]));
{
var G__4456 = (i__4453 + 1);
var G__4457 = (j__4454 + 1);
var G__4458 = (len__4455 - 1);
i__4453 = G__4456;
j__4454 = G__4457;
len__4455 = G__4458;
continue;
}
}
break;
}
});
cljs.core.array_copy_downward = (function array_copy_downward(from,i,to,j,len){
var i__4459 = (i + (len - 1));
var j__4460 = (j + (len - 1));
var len__4461 = len;
while(true){
if((len__4461 === 0))
{return to;
} else
{(to[j__4460] = (from[i__4459]));
{
var G__4462 = (i__4459 - 1);
var G__4463 = (j__4460 - 1);
var G__4464 = (len__4461 - 1);
i__4459 = G__4462;
j__4460 = G__4463;
len__4461 = G__4464;
continue;
}
}
break;
}
});
cljs.core.lookup_sentinel = {};
/**
* Returns true if x is the value false, false otherwise.
*/
cljs.core.false_QMARK_ = (function false_QMARK_(x){
return x === false;
});
/**
* Returns true if x is the value true, false otherwise.
*/
cljs.core.true_QMARK_ = (function true_QMARK_(x){
return x === true;
});
cljs.core.undefined_QMARK_ = (function undefined_QMARK_(x){
return (void 0 === x);
});
cljs.core.instance_QMARK_ = (function instance_QMARK_(t,o){
return (o != null && (o instanceof t || o.constructor === t || t === Object));
});
/**
* Return true if s satisfies ISeq
*/
cljs.core.seq_QMARK_ = (function seq_QMARK_(s){
if((s == null))
{return false;
} else
{var G__4465__4466 = s;
if((G__4465__4466 != null))
{if((function (){var or__3824__auto____4467 = (G__4465__4466.cljs$lang$protocol_mask$partition0$ & 64);
if(or__3824__auto____4467)
{return or__3824__auto____4467;
} else
{return G__4465__4466.cljs$core$ISeq$;
}
})())
{return true;
} else
{if((!G__4465__4466.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4465__4466);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4465__4466);
}
}
});
/**
* Return true if s satisfies ISeqable
*/
cljs.core.seqable_QMARK_ = (function seqable_QMARK_(s){
var G__4468__4469 = s;
if((G__4468__4469 != null))
{if((function (){var or__3824__auto____4470 = (G__4468__4469.cljs$lang$protocol_mask$partition0$ & 4194304);
if(or__3824__auto____4470)
{return or__3824__auto____4470;
} else
{return G__4468__4469.cljs$core$ISeqable$;
}
})())
{return true;
} else
{if((!G__4468__4469.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeqable,G__4468__4469);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeqable,G__4468__4469);
}
});
cljs.core.boolean$ = (function boolean$(x){
if(cljs.core.truth_(x))
{return true;
} else
{return false;
}
});
cljs.core.string_QMARK_ = (function string_QMARK_(x){
var and__3822__auto____4471 = goog.isString.call(null,x);
if(cljs.core.truth_(and__3822__auto____4471))
{return cljs.core.not.call(null,(function (){var or__3824__auto____4472 = (x.charAt(0) === "\uFDD0");
if(or__3824__auto____4472)
{return or__3824__auto____4472;
} else
{return (x.charAt(0) === "\uFDD1");
}
})());
} else
{return and__3822__auto____4471;
}
});
cljs.core.keyword_QMARK_ = (function keyword_QMARK_(x){
var and__3822__auto____4473 = goog.isString.call(null,x);
if(cljs.core.truth_(and__3822__auto____4473))
{return (x.charAt(0) === "\uFDD0");
} else
{return and__3822__auto____4473;
}
});
cljs.core.symbol_QMARK_ = (function symbol_QMARK_(x){
var and__3822__auto____4474 = goog.isString.call(null,x);
if(cljs.core.truth_(and__3822__auto____4474))
{return (x.charAt(0) === "\uFDD1");
} else
{return and__3822__auto____4474;
}
});
cljs.core.number_QMARK_ = (function number_QMARK_(n){
return goog.isNumber.call(null,n);
});
cljs.core.fn_QMARK_ = (function fn_QMARK_(f){
return goog.isFunction.call(null,f);
});
cljs.core.ifn_QMARK_ = (function ifn_QMARK_(f){
var or__3824__auto____4475 = cljs.core.fn_QMARK_.call(null,f);
if(or__3824__auto____4475)
{return or__3824__auto____4475;
} else
{var G__4476__4477 = f;
if((G__4476__4477 != null))
{if((function (){var or__3824__auto____4478 = (G__4476__4477.cljs$lang$protocol_mask$partition0$ & 1);
if(or__3824__auto____4478)
{return or__3824__auto____4478;
} else
{return G__4476__4477.cljs$core$IFn$;
}
})())
{return true;
} else
{if((!G__4476__4477.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IFn,G__4476__4477);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IFn,G__4476__4477);
}
}
});
/**
* Returns true if n is an integer.  Warning: returns true on underflow condition.
*/
cljs.core.integer_QMARK_ = (function integer_QMARK_(n){
var and__3822__auto____4479 = cljs.core.number_QMARK_.call(null,n);
if(and__3822__auto____4479)
{return (n == n.toFixed());
} else
{return and__3822__auto____4479;
}
});
/**
* Returns true if key is present in the given collection, otherwise
* returns false.  Note that for numerically indexed collections like
* vectors and arrays, this tests if the numeric key is within the
* range of indexes. 'contains?' operates constant or logarithmic time;
* it will not perform a linear search for a value.  See also 'some'.
*/
cljs.core.contains_QMARK_ = (function contains_QMARK_(coll,v){
if((cljs.core._lookup.call(null,coll,v,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel))
{return false;
} else
{return true;
}
});
/**
* Returns the map entry for key, or nil if key not present.
*/
cljs.core.find = (function find(coll,k){
if(cljs.core.truth_((function (){var and__3822__auto____4480 = coll;
if(cljs.core.truth_(and__3822__auto____4480))
{var and__3822__auto____4481 = cljs.core.associative_QMARK_.call(null,coll);
if(and__3822__auto____4481)
{return cljs.core.contains_QMARK_.call(null,coll,k);
} else
{return and__3822__auto____4481;
}
} else
{return and__3822__auto____4480;
}
})()))
{return cljs.core.PersistentVector.fromArray([k,cljs.core._lookup.call(null,coll,k)]);
} else
{return null;
}
});
/**
* Returns true if no two of the arguments are =
* @param {...*} var_args
*/
cljs.core.distinct_QMARK_ = (function() {
var distinct_QMARK_ = null;
var distinct_QMARK___1 = (function (x){
return true;
});
var distinct_QMARK___2 = (function (x,y){
return cljs.core.not.call(null,cljs.core._EQ_.call(null,x,y));
});
var distinct_QMARK___3 = (function() { 
var G__4486__delegate = function (x,y,more){
if(cljs.core.not.call(null,cljs.core._EQ_.call(null,x,y)))
{var s__4482 = cljs.core.set([y,x]);
var xs__4483 = more;
while(true){
var x__4484 = cljs.core.first.call(null,xs__4483);
var etc__4485 = cljs.core.next.call(null,xs__4483);
if(cljs.core.truth_(xs__4483))
{if(cljs.core.contains_QMARK_.call(null,s__4482,x__4484))
{return false;
} else
{{
var G__4487 = cljs.core.conj.call(null,s__4482,x__4484);
var G__4488 = etc__4485;
s__4482 = G__4487;
xs__4483 = G__4488;
continue;
}
}
} else
{return true;
}
break;
}
} else
{return false;
}
};
var G__4486 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4486__delegate.call(this, x, y, more);
};
G__4486.cljs$lang$maxFixedArity = 2;
G__4486.cljs$lang$applyTo = (function (arglist__4489){
var x = cljs.core.first(arglist__4489);
var y = cljs.core.first(cljs.core.next(arglist__4489));
var more = cljs.core.rest(cljs.core.next(arglist__4489));
return G__4486__delegate(x, y, more);
});
G__4486.cljs$lang$arity$variadic = G__4486__delegate;
return G__4486;
})()
;
distinct_QMARK_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return distinct_QMARK___1.call(this,x);
case 2:
return distinct_QMARK___2.call(this,x,y);
default:
return distinct_QMARK___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
distinct_QMARK_.cljs$lang$maxFixedArity = 2;
distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
distinct_QMARK_.cljs$lang$arity$1 = distinct_QMARK___1;
distinct_QMARK_.cljs$lang$arity$2 = distinct_QMARK___2;
distinct_QMARK_.cljs$lang$arity$variadic = distinct_QMARK___3.cljs$lang$arity$variadic;
return distinct_QMARK_;
})()
;
/**
* Comparator. Returns a negative number, zero, or a positive number
* when x is logically 'less than', 'equal to', or 'greater than'
* y. Uses google.array.defaultCompare for objects of the same type
* and special-cases nil to be less than any other object.
*/
cljs.core.compare = (function compare(x,y){
if((cljs.core.type.call(null,x) === cljs.core.type.call(null,y)))
{return goog.array.defaultCompare.call(null,x,y);
} else
{if((x == null))
{return -1;
} else
{if((y == null))
{return 1;
} else
{if("\uFDD0'else")
{throw (new Error("compare on non-nil objects of different types"));
} else
{return null;
}
}
}
}
});
/**
* Given a fn that might be boolean valued or a comparator,
* return a fn that is a comparator.
*/
cljs.core.fn__GT_comparator = (function fn__GT_comparator(f){
if(cljs.core._EQ_.call(null,f,cljs.core.compare))
{return cljs.core.compare;
} else
{return (function (x,y){
var r__4490 = f.call(null,x,y);
if(cljs.core.number_QMARK_.call(null,r__4490))
{return r__4490;
} else
{if(cljs.core.truth_(r__4490))
{return -1;
} else
{if(cljs.core.truth_(f.call(null,y,x)))
{return 1;
} else
{return 0;
}
}
}
});
}
});
void 0;
/**
* Returns a sorted sequence of the items in coll. Comp can be
* boolean-valued comparison funcion, or a -/0/+ valued comparator.
* Comp defaults to compare.
*/
cljs.core.sort = (function() {
var sort = null;
var sort__1 = (function (coll){
return sort.call(null,cljs.core.compare,coll);
});
var sort__2 = (function (comp,coll){
if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{var a__4491 = cljs.core.to_array.call(null,coll);
goog.array.stableSort.call(null,a__4491,cljs.core.fn__GT_comparator.call(null,comp));
return cljs.core.seq.call(null,a__4491);
} else
{return cljs.core.List.EMPTY;
}
});
sort = function(comp,coll){
switch(arguments.length){
case 1:
return sort__1.call(this,comp);
case 2:
return sort__2.call(this,comp,coll);
}
throw('Invalid arity: ' + arguments.length);
};
sort.cljs$lang$arity$1 = sort__1;
sort.cljs$lang$arity$2 = sort__2;
return sort;
})()
;
/**
* Returns a sorted sequence of the items in coll, where the sort
* order is determined by comparing (keyfn item).  Comp can be
* boolean-valued comparison funcion, or a -/0/+ valued comparator.
* Comp defaults to compare.
*/
cljs.core.sort_by = (function() {
var sort_by = null;
var sort_by__2 = (function (keyfn,coll){
return sort_by.call(null,keyfn,cljs.core.compare,coll);
});
var sort_by__3 = (function (keyfn,comp,coll){
return cljs.core.sort.call(null,(function (x,y){
return cljs.core.fn__GT_comparator.call(null,comp).call(null,keyfn.call(null,x),keyfn.call(null,y));
}),coll);
});
sort_by = function(keyfn,comp,coll){
switch(arguments.length){
case 2:
return sort_by__2.call(this,keyfn,comp);
case 3:
return sort_by__3.call(this,keyfn,comp,coll);
}
throw('Invalid arity: ' + arguments.length);
};
sort_by.cljs$lang$arity$2 = sort_by__2;
sort_by.cljs$lang$arity$3 = sort_by__3;
return sort_by;
})()
;
cljs.core.seq_reduce = (function() {
var seq_reduce = null;
var seq_reduce__2 = (function (f,coll){
var temp__3971__auto____4492 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3971__auto____4492))
{var s__4493 = temp__3971__auto____4492;
return cljs.core.reduce.call(null,f,cljs.core.first.call(null,s__4493),cljs.core.next.call(null,s__4493));
} else
{return f.call(null);
}
});
var seq_reduce__3 = (function (f,val,coll){
var val__4494 = val;
var coll__4495 = cljs.core.seq.call(null,coll);
while(true){
if(cljs.core.truth_(coll__4495))
{var nval__4496 = f.call(null,val__4494,cljs.core.first.call(null,coll__4495));
if(cljs.core.reduced_QMARK_.call(null,nval__4496))
{return cljs.core.deref.call(null,nval__4496);
} else
{{
var G__4497 = nval__4496;
var G__4498 = cljs.core.next.call(null,coll__4495);
val__4494 = G__4497;
coll__4495 = G__4498;
continue;
}
}
} else
{return val__4494;
}
break;
}
});
seq_reduce = function(f,val,coll){
switch(arguments.length){
case 2:
return seq_reduce__2.call(this,f,val);
case 3:
return seq_reduce__3.call(this,f,val,coll);
}
throw('Invalid arity: ' + arguments.length);
};
seq_reduce.cljs$lang$arity$2 = seq_reduce__2;
seq_reduce.cljs$lang$arity$3 = seq_reduce__3;
return seq_reduce;
})()
;
/**
* f should be a function of 2 arguments. If val is not supplied,
* returns the result of applying f to the first 2 items in coll, then
* applying f to that result and the 3rd item, etc. If coll contains no
* items, f must accept no arguments as well, and reduce returns the
* result of calling f with no arguments.  If coll has only 1 item, it
* is returned and f is not called.  If val is supplied, returns the
* result of applying f to val and the first item in coll, then
* applying f to that result and the 2nd item, etc. If coll contains no
* items, returns val and f is not called.
*/
cljs.core.reduce = (function() {
var reduce = null;
var reduce__2 = (function (f,coll){
if((function (){var G__4499__4500 = coll;
if((G__4499__4500 != null))
{if((function (){var or__3824__auto____4501 = (G__4499__4500.cljs$lang$protocol_mask$partition0$ & 262144);
if(or__3824__auto____4501)
{return or__3824__auto____4501;
} else
{return G__4499__4500.cljs$core$IReduce$;
}
})())
{return true;
} else
{if((!G__4499__4500.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4499__4500);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4499__4500);
}
})())
{return cljs.core._reduce.call(null,coll,f);
} else
{return cljs.core.seq_reduce.call(null,f,coll);
}
});
var reduce__3 = (function (f,val,coll){
if((function (){var G__4502__4503 = coll;
if((G__4502__4503 != null))
{if((function (){var or__3824__auto____4504 = (G__4502__4503.cljs$lang$protocol_mask$partition0$ & 262144);
if(or__3824__auto____4504)
{return or__3824__auto____4504;
} else
{return G__4502__4503.cljs$core$IReduce$;
}
})())
{return true;
} else
{if((!G__4502__4503.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4502__4503);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IReduce,G__4502__4503);
}
})())
{return cljs.core._reduce.call(null,coll,f,val);
} else
{return cljs.core.seq_reduce.call(null,f,val,coll);
}
});
reduce = function(f,val,coll){
switch(arguments.length){
case 2:
return reduce__2.call(this,f,val);
case 3:
return reduce__3.call(this,f,val,coll);
}
throw('Invalid arity: ' + arguments.length);
};
reduce.cljs$lang$arity$2 = reduce__2;
reduce.cljs$lang$arity$3 = reduce__3;
return reduce;
})()
;
/**
* Reduces an associative collection. f should be a function of 3
* arguments. Returns the result of applying f to init, the first key
* and the first value in coll, then applying f to that result and the
* 2nd key and value, etc. If coll contains no entries, returns init
* and f is not called. Note that reduce-kv is supported on vectors,
* where the keys will be the ordinals.
*/
cljs.core.reduce_kv = (function reduce_kv(f,init,coll){
return cljs.core._kv_reduce.call(null,coll,f,init);
});

/**
* @constructor
*/
cljs.core.Reduced = (function (val){
this.val = val;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16384;
})
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Reduced");
});
cljs.core.Reduced.prototype.cljs$core$IDeref$ = true;
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = (function (o){
var this__4505 = this;
return this__4505.val;
});
cljs.core.Reduced;
/**
* Returns true if x is the result of a call to reduced
*/
cljs.core.reduced_QMARK_ = (function reduced_QMARK_(r){
return cljs.core.instance_QMARK_.call(null,cljs.core.Reduced,r);
});
/**
* Wraps x in a way such that a reduce will terminate with the value x
*/
cljs.core.reduced = (function reduced(x){
return (new cljs.core.Reduced(x));
});
/**
* Returns the sum of nums. (+) returns 0.
* @param {...*} var_args
*/
cljs.core._PLUS_ = (function() {
var _PLUS_ = null;
var _PLUS___0 = (function (){
return 0;
});
var _PLUS___1 = (function (x){
return x;
});
var _PLUS___2 = (function (x,y){
return (x + y);
});
var _PLUS___3 = (function() { 
var G__4506__delegate = function (x,y,more){
return cljs.core.reduce.call(null,_PLUS_,(x + y),more);
};
var G__4506 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4506__delegate.call(this, x, y, more);
};
G__4506.cljs$lang$maxFixedArity = 2;
G__4506.cljs$lang$applyTo = (function (arglist__4507){
var x = cljs.core.first(arglist__4507);
var y = cljs.core.first(cljs.core.next(arglist__4507));
var more = cljs.core.rest(cljs.core.next(arglist__4507));
return G__4506__delegate(x, y, more);
});
G__4506.cljs$lang$arity$variadic = G__4506__delegate;
return G__4506;
})()
;
_PLUS_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 0:
return _PLUS___0.call(this);
case 1:
return _PLUS___1.call(this,x);
case 2:
return _PLUS___2.call(this,x,y);
default:
return _PLUS___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_PLUS_.cljs$lang$maxFixedArity = 2;
_PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
_PLUS_.cljs$lang$arity$0 = _PLUS___0;
_PLUS_.cljs$lang$arity$1 = _PLUS___1;
_PLUS_.cljs$lang$arity$2 = _PLUS___2;
_PLUS_.cljs$lang$arity$variadic = _PLUS___3.cljs$lang$arity$variadic;
return _PLUS_;
})()
;
/**
* If no ys are supplied, returns the negation of x, else subtracts
* the ys from x and returns the result.
* @param {...*} var_args
*/
cljs.core._ = (function() {
var _ = null;
var ___1 = (function (x){
return (- x);
});
var ___2 = (function (x,y){
return (x - y);
});
var ___3 = (function() { 
var G__4508__delegate = function (x,y,more){
return cljs.core.reduce.call(null,_,(x - y),more);
};
var G__4508 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4508__delegate.call(this, x, y, more);
};
G__4508.cljs$lang$maxFixedArity = 2;
G__4508.cljs$lang$applyTo = (function (arglist__4509){
var x = cljs.core.first(arglist__4509);
var y = cljs.core.first(cljs.core.next(arglist__4509));
var more = cljs.core.rest(cljs.core.next(arglist__4509));
return G__4508__delegate(x, y, more);
});
G__4508.cljs$lang$arity$variadic = G__4508__delegate;
return G__4508;
})()
;
_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return ___1.call(this,x);
case 2:
return ___2.call(this,x,y);
default:
return ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_.cljs$lang$maxFixedArity = 2;
_.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
_.cljs$lang$arity$1 = ___1;
_.cljs$lang$arity$2 = ___2;
_.cljs$lang$arity$variadic = ___3.cljs$lang$arity$variadic;
return _;
})()
;
/**
* Returns the product of nums. (*) returns 1.
* @param {...*} var_args
*/
cljs.core._STAR_ = (function() {
var _STAR_ = null;
var _STAR___0 = (function (){
return 1;
});
var _STAR___1 = (function (x){
return x;
});
var _STAR___2 = (function (x,y){
return (x * y);
});
var _STAR___3 = (function() { 
var G__4510__delegate = function (x,y,more){
return cljs.core.reduce.call(null,_STAR_,(x * y),more);
};
var G__4510 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4510__delegate.call(this, x, y, more);
};
G__4510.cljs$lang$maxFixedArity = 2;
G__4510.cljs$lang$applyTo = (function (arglist__4511){
var x = cljs.core.first(arglist__4511);
var y = cljs.core.first(cljs.core.next(arglist__4511));
var more = cljs.core.rest(cljs.core.next(arglist__4511));
return G__4510__delegate(x, y, more);
});
G__4510.cljs$lang$arity$variadic = G__4510__delegate;
return G__4510;
})()
;
_STAR_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 0:
return _STAR___0.call(this);
case 1:
return _STAR___1.call(this,x);
case 2:
return _STAR___2.call(this,x,y);
default:
return _STAR___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_STAR_.cljs$lang$maxFixedArity = 2;
_STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
_STAR_.cljs$lang$arity$0 = _STAR___0;
_STAR_.cljs$lang$arity$1 = _STAR___1;
_STAR_.cljs$lang$arity$2 = _STAR___2;
_STAR_.cljs$lang$arity$variadic = _STAR___3.cljs$lang$arity$variadic;
return _STAR_;
})()
;
/**
* If no denominators are supplied, returns 1/numerator,
* else returns numerator divided by all of the denominators.
* @param {...*} var_args
*/
cljs.core._SLASH_ = (function() {
var _SLASH_ = null;
var _SLASH___1 = (function (x){
return _SLASH_.call(null,1,x);
});
var _SLASH___2 = (function (x,y){
return (x / y);
});
var _SLASH___3 = (function() { 
var G__4512__delegate = function (x,y,more){
return cljs.core.reduce.call(null,_SLASH_,_SLASH_.call(null,x,y),more);
};
var G__4512 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4512__delegate.call(this, x, y, more);
};
G__4512.cljs$lang$maxFixedArity = 2;
G__4512.cljs$lang$applyTo = (function (arglist__4513){
var x = cljs.core.first(arglist__4513);
var y = cljs.core.first(cljs.core.next(arglist__4513));
var more = cljs.core.rest(cljs.core.next(arglist__4513));
return G__4512__delegate(x, y, more);
});
G__4512.cljs$lang$arity$variadic = G__4512__delegate;
return G__4512;
})()
;
_SLASH_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _SLASH___1.call(this,x);
case 2:
return _SLASH___2.call(this,x,y);
default:
return _SLASH___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_SLASH_.cljs$lang$maxFixedArity = 2;
_SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
_SLASH_.cljs$lang$arity$1 = _SLASH___1;
_SLASH_.cljs$lang$arity$2 = _SLASH___2;
_SLASH_.cljs$lang$arity$variadic = _SLASH___3.cljs$lang$arity$variadic;
return _SLASH_;
})()
;
/**
* Returns non-nil if nums are in monotonically increasing order,
* otherwise false.
* @param {...*} var_args
*/
cljs.core._LT_ = (function() {
var _LT_ = null;
var _LT___1 = (function (x){
return true;
});
var _LT___2 = (function (x,y){
return (x < y);
});
var _LT___3 = (function() { 
var G__4514__delegate = function (x,y,more){
while(true){
if((x < y))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4515 = y;
var G__4516 = cljs.core.first.call(null,more);
var G__4517 = cljs.core.next.call(null,more);
x = G__4515;
y = G__4516;
more = G__4517;
continue;
}
} else
{return (y < cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4514 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4514__delegate.call(this, x, y, more);
};
G__4514.cljs$lang$maxFixedArity = 2;
G__4514.cljs$lang$applyTo = (function (arglist__4518){
var x = cljs.core.first(arglist__4518);
var y = cljs.core.first(cljs.core.next(arglist__4518));
var more = cljs.core.rest(cljs.core.next(arglist__4518));
return G__4514__delegate(x, y, more);
});
G__4514.cljs$lang$arity$variadic = G__4514__delegate;
return G__4514;
})()
;
_LT_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _LT___1.call(this,x);
case 2:
return _LT___2.call(this,x,y);
default:
return _LT___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_LT_.cljs$lang$maxFixedArity = 2;
_LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
_LT_.cljs$lang$arity$1 = _LT___1;
_LT_.cljs$lang$arity$2 = _LT___2;
_LT_.cljs$lang$arity$variadic = _LT___3.cljs$lang$arity$variadic;
return _LT_;
})()
;
/**
* Returns non-nil if nums are in monotonically non-decreasing order,
* otherwise false.
* @param {...*} var_args
*/
cljs.core._LT__EQ_ = (function() {
var _LT__EQ_ = null;
var _LT__EQ___1 = (function (x){
return true;
});
var _LT__EQ___2 = (function (x,y){
return (x <= y);
});
var _LT__EQ___3 = (function() { 
var G__4519__delegate = function (x,y,more){
while(true){
if((x <= y))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4520 = y;
var G__4521 = cljs.core.first.call(null,more);
var G__4522 = cljs.core.next.call(null,more);
x = G__4520;
y = G__4521;
more = G__4522;
continue;
}
} else
{return (y <= cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4519 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4519__delegate.call(this, x, y, more);
};
G__4519.cljs$lang$maxFixedArity = 2;
G__4519.cljs$lang$applyTo = (function (arglist__4523){
var x = cljs.core.first(arglist__4523);
var y = cljs.core.first(cljs.core.next(arglist__4523));
var more = cljs.core.rest(cljs.core.next(arglist__4523));
return G__4519__delegate(x, y, more);
});
G__4519.cljs$lang$arity$variadic = G__4519__delegate;
return G__4519;
})()
;
_LT__EQ_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _LT__EQ___1.call(this,x);
case 2:
return _LT__EQ___2.call(this,x,y);
default:
return _LT__EQ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_LT__EQ_.cljs$lang$maxFixedArity = 2;
_LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
_LT__EQ_.cljs$lang$arity$1 = _LT__EQ___1;
_LT__EQ_.cljs$lang$arity$2 = _LT__EQ___2;
_LT__EQ_.cljs$lang$arity$variadic = _LT__EQ___3.cljs$lang$arity$variadic;
return _LT__EQ_;
})()
;
/**
* Returns non-nil if nums are in monotonically decreasing order,
* otherwise false.
* @param {...*} var_args
*/
cljs.core._GT_ = (function() {
var _GT_ = null;
var _GT___1 = (function (x){
return true;
});
var _GT___2 = (function (x,y){
return (x > y);
});
var _GT___3 = (function() { 
var G__4524__delegate = function (x,y,more){
while(true){
if((x > y))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4525 = y;
var G__4526 = cljs.core.first.call(null,more);
var G__4527 = cljs.core.next.call(null,more);
x = G__4525;
y = G__4526;
more = G__4527;
continue;
}
} else
{return (y > cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4524 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4524__delegate.call(this, x, y, more);
};
G__4524.cljs$lang$maxFixedArity = 2;
G__4524.cljs$lang$applyTo = (function (arglist__4528){
var x = cljs.core.first(arglist__4528);
var y = cljs.core.first(cljs.core.next(arglist__4528));
var more = cljs.core.rest(cljs.core.next(arglist__4528));
return G__4524__delegate(x, y, more);
});
G__4524.cljs$lang$arity$variadic = G__4524__delegate;
return G__4524;
})()
;
_GT_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _GT___1.call(this,x);
case 2:
return _GT___2.call(this,x,y);
default:
return _GT___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_GT_.cljs$lang$maxFixedArity = 2;
_GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
_GT_.cljs$lang$arity$1 = _GT___1;
_GT_.cljs$lang$arity$2 = _GT___2;
_GT_.cljs$lang$arity$variadic = _GT___3.cljs$lang$arity$variadic;
return _GT_;
})()
;
/**
* Returns non-nil if nums are in monotonically non-increasing order,
* otherwise false.
* @param {...*} var_args
*/
cljs.core._GT__EQ_ = (function() {
var _GT__EQ_ = null;
var _GT__EQ___1 = (function (x){
return true;
});
var _GT__EQ___2 = (function (x,y){
return (x >= y);
});
var _GT__EQ___3 = (function() { 
var G__4529__delegate = function (x,y,more){
while(true){
if((x >= y))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4530 = y;
var G__4531 = cljs.core.first.call(null,more);
var G__4532 = cljs.core.next.call(null,more);
x = G__4530;
y = G__4531;
more = G__4532;
continue;
}
} else
{return (y >= cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4529 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4529__delegate.call(this, x, y, more);
};
G__4529.cljs$lang$maxFixedArity = 2;
G__4529.cljs$lang$applyTo = (function (arglist__4533){
var x = cljs.core.first(arglist__4533);
var y = cljs.core.first(cljs.core.next(arglist__4533));
var more = cljs.core.rest(cljs.core.next(arglist__4533));
return G__4529__delegate(x, y, more);
});
G__4529.cljs$lang$arity$variadic = G__4529__delegate;
return G__4529;
})()
;
_GT__EQ_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _GT__EQ___1.call(this,x);
case 2:
return _GT__EQ___2.call(this,x,y);
default:
return _GT__EQ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_GT__EQ_.cljs$lang$maxFixedArity = 2;
_GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
_GT__EQ_.cljs$lang$arity$1 = _GT__EQ___1;
_GT__EQ_.cljs$lang$arity$2 = _GT__EQ___2;
_GT__EQ_.cljs$lang$arity$variadic = _GT__EQ___3.cljs$lang$arity$variadic;
return _GT__EQ_;
})()
;
/**
* Returns a number one less than num.
*/
cljs.core.dec = (function dec(x){
return (x - 1);
});
/**
* Returns the greatest of the nums.
* @param {...*} var_args
*/
cljs.core.max = (function() {
var max = null;
var max__1 = (function (x){
return x;
});
var max__2 = (function (x,y){
return ((x > y) ? x : y);
});
var max__3 = (function() { 
var G__4534__delegate = function (x,y,more){
return cljs.core.reduce.call(null,max,((x > y) ? x : y),more);
};
var G__4534 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4534__delegate.call(this, x, y, more);
};
G__4534.cljs$lang$maxFixedArity = 2;
G__4534.cljs$lang$applyTo = (function (arglist__4535){
var x = cljs.core.first(arglist__4535);
var y = cljs.core.first(cljs.core.next(arglist__4535));
var more = cljs.core.rest(cljs.core.next(arglist__4535));
return G__4534__delegate(x, y, more);
});
G__4534.cljs$lang$arity$variadic = G__4534__delegate;
return G__4534;
})()
;
max = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return max__1.call(this,x);
case 2:
return max__2.call(this,x,y);
default:
return max__3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
max.cljs$lang$maxFixedArity = 2;
max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
max.cljs$lang$arity$1 = max__1;
max.cljs$lang$arity$2 = max__2;
max.cljs$lang$arity$variadic = max__3.cljs$lang$arity$variadic;
return max;
})()
;
/**
* Returns the least of the nums.
* @param {...*} var_args
*/
cljs.core.min = (function() {
var min = null;
var min__1 = (function (x){
return x;
});
var min__2 = (function (x,y){
return ((x < y) ? x : y);
});
var min__3 = (function() { 
var G__4536__delegate = function (x,y,more){
return cljs.core.reduce.call(null,min,((x < y) ? x : y),more);
};
var G__4536 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4536__delegate.call(this, x, y, more);
};
G__4536.cljs$lang$maxFixedArity = 2;
G__4536.cljs$lang$applyTo = (function (arglist__4537){
var x = cljs.core.first(arglist__4537);
var y = cljs.core.first(cljs.core.next(arglist__4537));
var more = cljs.core.rest(cljs.core.next(arglist__4537));
return G__4536__delegate(x, y, more);
});
G__4536.cljs$lang$arity$variadic = G__4536__delegate;
return G__4536;
})()
;
min = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return min__1.call(this,x);
case 2:
return min__2.call(this,x,y);
default:
return min__3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
min.cljs$lang$maxFixedArity = 2;
min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
min.cljs$lang$arity$1 = min__1;
min.cljs$lang$arity$2 = min__2;
min.cljs$lang$arity$variadic = min__3.cljs$lang$arity$variadic;
return min;
})()
;
cljs.core.fix = (function fix(q){
if((q >= 0))
{return Math.floor.call(null,q);
} else
{return Math.ceil.call(null,q);
}
});
/**
* Coerce to int by stripping decimal places.
*/
cljs.core.int$ = (function int$(x){
return cljs.core.fix.call(null,x);
});
/**
* Coerce to long by stripping decimal places. Identical to `int'.
*/
cljs.core.long$ = (function long$(x){
return cljs.core.fix.call(null,x);
});
/**
* Modulus of num and div. Truncates toward negative infinity.
*/
cljs.core.mod = (function mod(n,d){
return (n % d);
});
/**
* quot[ient] of dividing numerator by denominator.
*/
cljs.core.quot = (function quot(n,d){
var rem__4538 = (n % d);
return cljs.core.fix.call(null,((n - rem__4538) / d));
});
/**
* remainder of dividing numerator by denominator.
*/
cljs.core.rem = (function rem(n,d){
var q__4539 = cljs.core.quot.call(null,n,d);
return (n - (d * q__4539));
});
/**
* Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).
*/
cljs.core.rand = (function() {
var rand = null;
var rand__0 = (function (){
return Math.random.call(null);
});
var rand__1 = (function (n){
return (n * rand.call(null));
});
rand = function(n){
switch(arguments.length){
case 0:
return rand__0.call(this);
case 1:
return rand__1.call(this,n);
}
throw('Invalid arity: ' + arguments.length);
};
rand.cljs$lang$arity$0 = rand__0;
rand.cljs$lang$arity$1 = rand__1;
return rand;
})()
;
/**
* Returns a random integer between 0 (inclusive) and n (exclusive).
*/
cljs.core.rand_int = (function rand_int(n){
return cljs.core.fix.call(null,cljs.core.rand.call(null,n));
});
/**
* Bitwise exclusive or
*/
cljs.core.bit_xor = (function bit_xor(x,y){
return (x ^ y);
});
/**
* Bitwise and
*/
cljs.core.bit_and = (function bit_and(x,y){
return (x & y);
});
/**
* Bitwise or
*/
cljs.core.bit_or = (function bit_or(x,y){
return (x | y);
});
/**
* Bitwise and
*/
cljs.core.bit_and_not = (function bit_and_not(x,y){
return (x & ~y);
});
/**
* Clear bit at index n
*/
cljs.core.bit_clear = (function bit_clear(x,n){
return (x & ~(1 << n));
});
/**
* Flip bit at index n
*/
cljs.core.bit_flip = (function bit_flip(x,n){
return (x ^ (1 << n));
});
/**
* Bitwise complement
*/
cljs.core.bit_not = (function bit_not(x){
return (~ x);
});
/**
* Set bit at index n
*/
cljs.core.bit_set = (function bit_set(x,n){
return (x | (1 << n));
});
/**
* Test bit at index n
*/
cljs.core.bit_test = (function bit_test(x,n){
return ((x & (1 << n)) != 0);
});
/**
* Bitwise shift left
*/
cljs.core.bit_shift_left = (function bit_shift_left(x,n){
return (x << n);
});
/**
* Bitwise shift right
*/
cljs.core.bit_shift_right = (function bit_shift_right(x,n){
return (x >> n);
});
/**
* Bitwise shift right with zero fill
*/
cljs.core.bit_shift_right_zero_fill = (function bit_shift_right_zero_fill(x,n){
return (x >>> n);
});
/**
* Counts the number of bits set in n
*/
cljs.core.bit_count = (function bit_count(n){
var c__4540 = 0;
var n__4541 = n;
while(true){
if((n__4541 === 0))
{return c__4540;
} else
{{
var G__4542 = (c__4540 + 1);
var G__4543 = (n__4541 & (n__4541 - 1));
c__4540 = G__4542;
n__4541 = G__4543;
continue;
}
}
break;
}
});
/**
* Returns non-nil if nums all have the equivalent
* value, otherwise false. Behavior on non nums is
* undefined.
* @param {...*} var_args
*/
cljs.core._EQ__EQ_ = (function() {
var _EQ__EQ_ = null;
var _EQ__EQ___1 = (function (x){
return true;
});
var _EQ__EQ___2 = (function (x,y){
return cljs.core._equiv.call(null,x,y);
});
var _EQ__EQ___3 = (function() { 
var G__4544__delegate = function (x,y,more){
while(true){
if(cljs.core.truth_(_EQ__EQ_.call(null,x,y)))
{if(cljs.core.truth_(cljs.core.next.call(null,more)))
{{
var G__4545 = y;
var G__4546 = cljs.core.first.call(null,more);
var G__4547 = cljs.core.next.call(null,more);
x = G__4545;
y = G__4546;
more = G__4547;
continue;
}
} else
{return _EQ__EQ_.call(null,y,cljs.core.first.call(null,more));
}
} else
{return false;
}
break;
}
};
var G__4544 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4544__delegate.call(this, x, y, more);
};
G__4544.cljs$lang$maxFixedArity = 2;
G__4544.cljs$lang$applyTo = (function (arglist__4548){
var x = cljs.core.first(arglist__4548);
var y = cljs.core.first(cljs.core.next(arglist__4548));
var more = cljs.core.rest(cljs.core.next(arglist__4548));
return G__4544__delegate(x, y, more);
});
G__4544.cljs$lang$arity$variadic = G__4544__delegate;
return G__4544;
})()
;
_EQ__EQ_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return _EQ__EQ___1.call(this,x);
case 2:
return _EQ__EQ___2.call(this,x,y);
default:
return _EQ__EQ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
_EQ__EQ_.cljs$lang$maxFixedArity = 2;
_EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
_EQ__EQ_.cljs$lang$arity$1 = _EQ__EQ___1;
_EQ__EQ_.cljs$lang$arity$2 = _EQ__EQ___2;
_EQ__EQ_.cljs$lang$arity$variadic = _EQ__EQ___3.cljs$lang$arity$variadic;
return _EQ__EQ_;
})()
;
/**
* Returns true if num is greater than zero, else false
*/
cljs.core.pos_QMARK_ = (function pos_QMARK_(n){
return (n > 0);
});
cljs.core.zero_QMARK_ = (function zero_QMARK_(n){
return (n === 0);
});
/**
* Returns true if num is less than zero, else false
*/
cljs.core.neg_QMARK_ = (function neg_QMARK_(x){
return (x < 0);
});
/**
* Returns the nth next of coll, (seq coll) when n is 0.
*/
cljs.core.nthnext = (function nthnext(coll,n){
var n__4549 = n;
var xs__4550 = cljs.core.seq.call(null,coll);
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____4551 = xs__4550;
if(cljs.core.truth_(and__3822__auto____4551))
{return (n__4549 > 0);
} else
{return and__3822__auto____4551;
}
})()))
{{
var G__4552 = (n__4549 - 1);
var G__4553 = cljs.core.next.call(null,xs__4550);
n__4549 = G__4552;
xs__4550 = G__4553;
continue;
}
} else
{return xs__4550;
}
break;
}
});
/**
* Internal - do not use!
* @param {...*} var_args
*/
cljs.core.str_STAR_ = (function() {
var str_STAR_ = null;
var str_STAR___0 = (function (){
return "";
});
var str_STAR___1 = (function (x){
if((x == null))
{return "";
} else
{if("\uFDD0'else")
{return x.toString();
} else
{return null;
}
}
});
var str_STAR___2 = (function() { 
var G__4554__delegate = function (x,ys){
return (function (sb,more){
while(true){
if(cljs.core.truth_(more))
{{
var G__4555 = sb.append(str_STAR_.call(null,cljs.core.first.call(null,more)));
var G__4556 = cljs.core.next.call(null,more);
sb = G__4555;
more = G__4556;
continue;
}
} else
{return str_STAR_.call(null,sb);
}
break;
}
}).call(null,(new goog.string.StringBuffer(str_STAR_.call(null,x))),ys);
};
var G__4554 = function (x,var_args){
var ys = null;
if (goog.isDef(var_args)) {
  ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return G__4554__delegate.call(this, x, ys);
};
G__4554.cljs$lang$maxFixedArity = 1;
G__4554.cljs$lang$applyTo = (function (arglist__4557){
var x = cljs.core.first(arglist__4557);
var ys = cljs.core.rest(arglist__4557);
return G__4554__delegate(x, ys);
});
G__4554.cljs$lang$arity$variadic = G__4554__delegate;
return G__4554;
})()
;
str_STAR_ = function(x,var_args){
var ys = var_args;
switch(arguments.length){
case 0:
return str_STAR___0.call(this);
case 1:
return str_STAR___1.call(this,x);
default:
return str_STAR___2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1));
}
throw('Invalid arity: ' + arguments.length);
};
str_STAR_.cljs$lang$maxFixedArity = 1;
str_STAR_.cljs$lang$applyTo = str_STAR___2.cljs$lang$applyTo;
str_STAR_.cljs$lang$arity$0 = str_STAR___0;
str_STAR_.cljs$lang$arity$1 = str_STAR___1;
str_STAR_.cljs$lang$arity$variadic = str_STAR___2.cljs$lang$arity$variadic;
return str_STAR_;
})()
;
/**
* With no args, returns the empty string. With one arg x, returns
* x.toString().  (str nil) returns the empty string. With more than
* one arg, returns the concatenation of the str values of the args.
* @param {...*} var_args
*/
cljs.core.str = (function() {
var str = null;
var str__0 = (function (){
return "";
});
var str__1 = (function (x){
if(cljs.core.symbol_QMARK_.call(null,x))
{return x.substring(2,x.length);
} else
{if(cljs.core.keyword_QMARK_.call(null,x))
{return cljs.core.str_STAR_.call(null,":",x.substring(2,x.length));
} else
{if((x == null))
{return "";
} else
{if("\uFDD0'else")
{return x.toString();
} else
{return null;
}
}
}
}
});
var str__2 = (function() { 
var G__4558__delegate = function (x,ys){
return (function (sb,more){
while(true){
if(cljs.core.truth_(more))
{{
var G__4559 = sb.append(str.call(null,cljs.core.first.call(null,more)));
var G__4560 = cljs.core.next.call(null,more);
sb = G__4559;
more = G__4560;
continue;
}
} else
{return cljs.core.str_STAR_.call(null,sb);
}
break;
}
}).call(null,(new goog.string.StringBuffer(str.call(null,x))),ys);
};
var G__4558 = function (x,var_args){
var ys = null;
if (goog.isDef(var_args)) {
  ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return G__4558__delegate.call(this, x, ys);
};
G__4558.cljs$lang$maxFixedArity = 1;
G__4558.cljs$lang$applyTo = (function (arglist__4561){
var x = cljs.core.first(arglist__4561);
var ys = cljs.core.rest(arglist__4561);
return G__4558__delegate(x, ys);
});
G__4558.cljs$lang$arity$variadic = G__4558__delegate;
return G__4558;
})()
;
str = function(x,var_args){
var ys = var_args;
switch(arguments.length){
case 0:
return str__0.call(this);
case 1:
return str__1.call(this,x);
default:
return str__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1));
}
throw('Invalid arity: ' + arguments.length);
};
str.cljs$lang$maxFixedArity = 1;
str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
str.cljs$lang$arity$0 = str__0;
str.cljs$lang$arity$1 = str__1;
str.cljs$lang$arity$variadic = str__2.cljs$lang$arity$variadic;
return str;
})()
;
/**
* Returns the substring of s beginning at start inclusive, and ending
* at end (defaults to length of string), exclusive.
*/
cljs.core.subs = (function() {
var subs = null;
var subs__2 = (function (s,start){
return s.substring(start);
});
var subs__3 = (function (s,start,end){
return s.substring(start,end);
});
subs = function(s,start,end){
switch(arguments.length){
case 2:
return subs__2.call(this,s,start);
case 3:
return subs__3.call(this,s,start,end);
}
throw('Invalid arity: ' + arguments.length);
};
subs.cljs$lang$arity$2 = subs__2;
subs.cljs$lang$arity$3 = subs__3;
return subs;
})()
;
/**
* Returns a Symbol with the given namespace and name.
*/
cljs.core.symbol = (function() {
var symbol = null;
var symbol__1 = (function (name){
if(cljs.core.symbol_QMARK_.call(null,name))
{name;
} else
{if(cljs.core.keyword_QMARK_.call(null,name))
{cljs.core.str_STAR_.call(null,"\uFDD1","'",cljs.core.subs.call(null,name,2));
} else
{}
}
return cljs.core.str_STAR_.call(null,"\uFDD1","'",name);
});
var symbol__2 = (function (ns,name){
return symbol.call(null,cljs.core.str_STAR_.call(null,ns,"/",name));
});
symbol = function(ns,name){
switch(arguments.length){
case 1:
return symbol__1.call(this,ns);
case 2:
return symbol__2.call(this,ns,name);
}
throw('Invalid arity: ' + arguments.length);
};
symbol.cljs$lang$arity$1 = symbol__1;
symbol.cljs$lang$arity$2 = symbol__2;
return symbol;
})()
;
/**
* Returns a Keyword with the given namespace and name.  Do not use :
* in the keyword strings, it will be added automatically.
*/
cljs.core.keyword = (function() {
var keyword = null;
var keyword__1 = (function (name){
if(cljs.core.keyword_QMARK_.call(null,name))
{return name;
} else
{if(cljs.core.symbol_QMARK_.call(null,name))
{return cljs.core.str_STAR_.call(null,"\uFDD0","'",cljs.core.subs.call(null,name,2));
} else
{if("\uFDD0'else")
{return cljs.core.str_STAR_.call(null,"\uFDD0","'",name);
} else
{return null;
}
}
}
});
var keyword__2 = (function (ns,name){
return keyword.call(null,cljs.core.str_STAR_.call(null,ns,"/",name));
});
keyword = function(ns,name){
switch(arguments.length){
case 1:
return keyword__1.call(this,ns);
case 2:
return keyword__2.call(this,ns,name);
}
throw('Invalid arity: ' + arguments.length);
};
keyword.cljs$lang$arity$1 = keyword__1;
keyword.cljs$lang$arity$2 = keyword__2;
return keyword;
})()
;
/**
* Assumes x is sequential. Returns true if x equals y, otherwise
* returns false.
*/
cljs.core.equiv_sequential = (function equiv_sequential(x,y){
return cljs.core.boolean$.call(null,((cljs.core.sequential_QMARK_.call(null,y))?(function (){var xs__4562 = cljs.core.seq.call(null,x);
var ys__4563 = cljs.core.seq.call(null,y);
while(true){
if((xs__4562 == null))
{return (ys__4563 == null);
} else
{if((ys__4563 == null))
{return false;
} else
{if(cljs.core._EQ_.call(null,cljs.core.first.call(null,xs__4562),cljs.core.first.call(null,ys__4563)))
{{
var G__4564 = cljs.core.next.call(null,xs__4562);
var G__4565 = cljs.core.next.call(null,ys__4563);
xs__4562 = G__4564;
ys__4563 = G__4565;
continue;
}
} else
{if("\uFDD0'else")
{return false;
} else
{return null;
}
}
}
}
break;
}
})():null));
});
cljs.core.hash_combine = (function hash_combine(seed,hash){
return (seed ^ (((hash + 2654435769) + (seed << 6)) + (seed >> 2)));
});
cljs.core.hash_coll = (function hash_coll(coll){
return cljs.core.reduce.call(null,(function (p1__4566_SHARP_,p2__4567_SHARP_){
return cljs.core.hash_combine.call(null,p1__4566_SHARP_,cljs.core.hash.call(null,p2__4567_SHARP_));
}),cljs.core.hash.call(null,cljs.core.first.call(null,coll)),cljs.core.next.call(null,coll));
});
void 0;
void 0;
cljs.core.hash_imap = (function hash_imap(m){
var h__4568 = 0;
var s__4569 = cljs.core.seq.call(null,m);
while(true){
if(cljs.core.truth_(s__4569))
{var e__4570 = cljs.core.first.call(null,s__4569);
{
var G__4571 = ((h__4568 + (cljs.core.hash.call(null,cljs.core.key.call(null,e__4570)) ^ cljs.core.hash.call(null,cljs.core.val.call(null,e__4570)))) % 4503599627370496);
var G__4572 = cljs.core.next.call(null,s__4569);
h__4568 = G__4571;
s__4569 = G__4572;
continue;
}
} else
{return h__4568;
}
break;
}
});
cljs.core.hash_iset = (function hash_iset(s){
var h__4573 = 0;
var s__4574 = cljs.core.seq.call(null,s);
while(true){
if(cljs.core.truth_(s__4574))
{var e__4575 = cljs.core.first.call(null,s__4574);
{
var G__4576 = ((h__4573 + cljs.core.hash.call(null,e__4575)) % 4503599627370496);
var G__4577 = cljs.core.next.call(null,s__4574);
h__4573 = G__4576;
s__4574 = G__4577;
continue;
}
} else
{return h__4573;
}
break;
}
});
void 0;
/**
* Takes a JavaScript object and a map of names to functions and
* attaches said functions as methods on the object.  Any references to
* JavaScript's implict this (via the this-as macro) will resolve to the
* object that the function is attached.
*/
cljs.core.extend_object_BANG_ = (function extend_object_BANG_(obj,fn_map){
var G__4578__4579 = cljs.core.seq.call(null,fn_map);
if(cljs.core.truth_(G__4578__4579))
{var G__4581__4583 = cljs.core.first.call(null,G__4578__4579);
var vec__4582__4584 = G__4581__4583;
var key_name__4585 = cljs.core.nth.call(null,vec__4582__4584,0,null);
var f__4586 = cljs.core.nth.call(null,vec__4582__4584,1,null);
var G__4578__4587 = G__4578__4579;
var G__4581__4588 = G__4581__4583;
var G__4578__4589 = G__4578__4587;
while(true){
var vec__4590__4591 = G__4581__4588;
var key_name__4592 = cljs.core.nth.call(null,vec__4590__4591,0,null);
var f__4593 = cljs.core.nth.call(null,vec__4590__4591,1,null);
var G__4578__4594 = G__4578__4589;
var str_name__4595 = cljs.core.name.call(null,key_name__4592);
obj[str_name__4595] = f__4593;
var temp__3974__auto____4596 = cljs.core.next.call(null,G__4578__4594);
if(cljs.core.truth_(temp__3974__auto____4596))
{var G__4578__4597 = temp__3974__auto____4596;
{
var G__4598 = cljs.core.first.call(null,G__4578__4597);
var G__4599 = G__4578__4597;
G__4581__4588 = G__4598;
G__4578__4589 = G__4599;
continue;
}
} else
{}
break;
}
} else
{}
return obj;
});

/**
* @constructor
*/
cljs.core.List = (function (meta,first,rest,count,__hash){
this.meta = meta;
this.first = first;
this.rest = rest;
this.count = count;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 32706670;
})
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.List");
});
cljs.core.List.prototype.cljs$core$IHash$ = true;
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__4600 = this;
var h__264__auto____4601 = this__4600.__hash;
if((h__264__auto____4601 != null))
{return h__264__auto____4601;
} else
{var h__264__auto____4602 = cljs.core.hash_coll.call(null,coll);
this__4600.__hash = h__264__auto____4602;
return h__264__auto____4602;
}
});
cljs.core.List.prototype.cljs$core$ISequential$ = true;
cljs.core.List.prototype.cljs$core$ICollection$ = true;
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__4603 = this;
return (new cljs.core.List(this__4603.meta,o,coll,(this__4603.count + 1),null));
});
cljs.core.List.prototype.cljs$core$ASeq$ = true;
cljs.core.List.prototype.toString = (function (){
var this__4604 = this;
var this$__4605 = this;
return cljs.core.pr_str.call(null,this$__4605);
});
cljs.core.List.prototype.cljs$core$ISeqable$ = true;
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__4606 = this;
return coll;
});
cljs.core.List.prototype.cljs$core$ICounted$ = true;
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__4607 = this;
return this__4607.count;
});
cljs.core.List.prototype.cljs$core$IStack$ = true;
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__4608 = this;
return this__4608.first;
});
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__4609 = this;
return cljs.core._rest.call(null,coll);
});
cljs.core.List.prototype.cljs$core$ISeq$ = true;
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__4610 = this;
return this__4610.first;
});
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__4611 = this;
return this__4611.rest;
});
cljs.core.List.prototype.cljs$core$IEquiv$ = true;
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__4612 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.List.prototype.cljs$core$IWithMeta$ = true;
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__4613 = this;
return (new cljs.core.List(meta,this__4613.first,this__4613.rest,this__4613.count,this__4613.__hash));
});
cljs.core.List.prototype.cljs$core$IMeta$ = true;
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__4614 = this;
return this__4614.meta;
});
cljs.core.List.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__4615 = this;
return cljs.core.List.EMPTY;
});
cljs.core.List.prototype.cljs$core$IList$ = true;
cljs.core.List;

/**
* @constructor
*/
cljs.core.EmptyList = (function (meta){
this.meta = meta;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 32706638;
})
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.EmptyList");
});
cljs.core.EmptyList.prototype.cljs$core$IHash$ = true;
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__4616 = this;
return 0;
});
cljs.core.EmptyList.prototype.cljs$core$ISequential$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICollection$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__4617 = this;
return (new cljs.core.List(this__4617.meta,o,null,1,null));
});
cljs.core.EmptyList.prototype.toString = (function (){
var this__4618 = this;
var this$__4619 = this;
return cljs.core.pr_str.call(null,this$__4619);
});
cljs.core.EmptyList.prototype.cljs$core$ISeqable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__4620 = this;
return null;
});
cljs.core.EmptyList.prototype.cljs$core$ICounted$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__4621 = this;
return 0;
});
cljs.core.EmptyList.prototype.cljs$core$IStack$ = true;
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__4622 = this;
return null;
});
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__4623 = this;
return null;
});
cljs.core.EmptyList.prototype.cljs$core$ISeq$ = true;
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__4624 = this;
return null;
});
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__4625 = this;
return null;
});
cljs.core.EmptyList.prototype.cljs$core$IEquiv$ = true;
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__4626 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$ = true;
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__4627 = this;
return (new cljs.core.EmptyList(meta));
});
cljs.core.EmptyList.prototype.cljs$core$IMeta$ = true;
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__4628 = this;
return this__4628.meta;
});
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__4629 = this;
return coll;
});
cljs.core.EmptyList.prototype.cljs$core$IList$ = true;
cljs.core.EmptyList;
cljs.core.List.EMPTY = (new cljs.core.EmptyList(null));
cljs.core.reversible_QMARK_ = (function reversible_QMARK_(coll){
var G__4630__4631 = coll;
if((G__4630__4631 != null))
{if((function (){var or__3824__auto____4632 = (G__4630__4631.cljs$lang$protocol_mask$partition0$ & 67108864);
if(or__3824__auto____4632)
{return or__3824__auto____4632;
} else
{return G__4630__4631.cljs$core$IReversible$;
}
})())
{return true;
} else
{if((!G__4630__4631.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IReversible,G__4630__4631);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IReversible,G__4630__4631);
}
});
cljs.core.rseq = (function rseq(coll){
return cljs.core._rseq.call(null,coll);
});
/**
* Returns a seq of the items in coll in reverse order. Not lazy.
*/
cljs.core.reverse = (function reverse(coll){
return cljs.core.reduce.call(null,cljs.core.conj,cljs.core.List.EMPTY,coll);
});
/**
* @param {...*} var_args
*/
cljs.core.list = (function() { 
var list__delegate = function (items){
return cljs.core.reduce.call(null,cljs.core.conj,cljs.core.List.EMPTY,cljs.core.reverse.call(null,items));
};
var list = function (var_args){
var items = null;
if (goog.isDef(var_args)) {
  items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return list__delegate.call(this, items);
};
list.cljs$lang$maxFixedArity = 0;
list.cljs$lang$applyTo = (function (arglist__4633){
var items = cljs.core.seq(arglist__4633);;
return list__delegate(items);
});
list.cljs$lang$arity$variadic = list__delegate;
return list;
})()
;

/**
* @constructor
*/
cljs.core.Cons = (function (meta,first,rest,__hash){
this.meta = meta;
this.first = first;
this.rest = rest;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 32702572;
})
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Cons");
});
cljs.core.Cons.prototype.cljs$core$IHash$ = true;
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__4634 = this;
var h__264__auto____4635 = this__4634.__hash;
if((h__264__auto____4635 != null))
{return h__264__auto____4635;
} else
{var h__264__auto____4636 = cljs.core.hash_coll.call(null,coll);
this__4634.__hash = h__264__auto____4636;
return h__264__auto____4636;
}
});
cljs.core.Cons.prototype.cljs$core$ISequential$ = true;
cljs.core.Cons.prototype.cljs$core$ICollection$ = true;
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__4637 = this;
return (new cljs.core.Cons(null,o,coll,this__4637.__hash));
});
cljs.core.Cons.prototype.cljs$core$ASeq$ = true;
cljs.core.Cons.prototype.toString = (function (){
var this__4638 = this;
var this$__4639 = this;
return cljs.core.pr_str.call(null,this$__4639);
});
cljs.core.Cons.prototype.cljs$core$ISeqable$ = true;
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__4640 = this;
return coll;
});
cljs.core.Cons.prototype.cljs$core$ISeq$ = true;
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__4641 = this;
return this__4641.first;
});
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__4642 = this;
if((this__4642.rest == null))
{return cljs.core.List.EMPTY;
} else
{return this__4642.rest;
}
});
cljs.core.Cons.prototype.cljs$core$IEquiv$ = true;
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__4643 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.Cons.prototype.cljs$core$IWithMeta$ = true;
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__4644 = this;
return (new cljs.core.Cons(meta,this__4644.first,this__4644.rest,this__4644.__hash));
});
cljs.core.Cons.prototype.cljs$core$IMeta$ = true;
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__4645 = this;
return this__4645.meta;
});
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__4646 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__4646.meta);
});
cljs.core.Cons.prototype.cljs$core$IList$ = true;
cljs.core.Cons;
/**
* Returns a new seq where x is the first element and seq is the rest.
*/
cljs.core.cons = (function cons(x,coll){
if((function (){var or__3824__auto____4647 = (coll == null);
if(or__3824__auto____4647)
{return or__3824__auto____4647;
} else
{var G__4648__4649 = coll;
if((G__4648__4649 != null))
{if((function (){var or__3824__auto____4650 = (G__4648__4649.cljs$lang$protocol_mask$partition0$ & 64);
if(or__3824__auto____4650)
{return or__3824__auto____4650;
} else
{return G__4648__4649.cljs$core$ISeq$;
}
})())
{return true;
} else
{if((!G__4648__4649.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4648__4649);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.ISeq,G__4648__4649);
}
}
})())
{return (new cljs.core.Cons(null,x,coll,null));
} else
{return (new cljs.core.Cons(null,x,cljs.core.seq.call(null,coll),null));
}
});
cljs.core.list_QMARK_ = (function list_QMARK_(x){
var G__4651__4652 = x;
if((G__4651__4652 != null))
{if((function (){var or__3824__auto____4653 = (G__4651__4652.cljs$lang$protocol_mask$partition0$ & 16777216);
if(or__3824__auto____4653)
{return or__3824__auto____4653;
} else
{return G__4651__4652.cljs$core$IList$;
}
})())
{return true;
} else
{if((!G__4651__4652.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IList,G__4651__4652);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IList,G__4651__4652);
}
});
(cljs.core.IReduce["string"] = true);
(cljs.core._reduce["string"] = (function() {
var G__4654 = null;
var G__4654__2 = (function (string,f){
return cljs.core.ci_reduce.call(null,string,f);
});
var G__4654__3 = (function (string,f,start){
return cljs.core.ci_reduce.call(null,string,f,start);
});
G__4654 = function(string,f,start){
switch(arguments.length){
case 2:
return G__4654__2.call(this,string,f);
case 3:
return G__4654__3.call(this,string,f,start);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4654;
})()
);
(cljs.core.ILookup["string"] = true);
(cljs.core._lookup["string"] = (function() {
var G__4655 = null;
var G__4655__2 = (function (string,k){
return cljs.core._nth.call(null,string,k);
});
var G__4655__3 = (function (string,k,not_found){
return cljs.core._nth.call(null,string,k,not_found);
});
G__4655 = function(string,k,not_found){
switch(arguments.length){
case 2:
return G__4655__2.call(this,string,k);
case 3:
return G__4655__3.call(this,string,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4655;
})()
);
(cljs.core.IIndexed["string"] = true);
(cljs.core._nth["string"] = (function() {
var G__4656 = null;
var G__4656__2 = (function (string,n){
if((n < cljs.core._count.call(null,string)))
{return string.charAt(n);
} else
{return null;
}
});
var G__4656__3 = (function (string,n,not_found){
if((n < cljs.core._count.call(null,string)))
{return string.charAt(n);
} else
{return not_found;
}
});
G__4656 = function(string,n,not_found){
switch(arguments.length){
case 2:
return G__4656__2.call(this,string,n);
case 3:
return G__4656__3.call(this,string,n,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4656;
})()
);
(cljs.core.ICounted["string"] = true);
(cljs.core._count["string"] = (function (s){
return s.length;
}));
(cljs.core.ISeqable["string"] = true);
(cljs.core._seq["string"] = (function (string){
return cljs.core.prim_seq.call(null,string,0);
}));
(cljs.core.IHash["string"] = true);
(cljs.core._hash["string"] = (function (o){
return goog.string.hashCode.call(null,o);
}));
String.prototype.cljs$core$IFn$ = true;
String.prototype.call = (function() {
var G__4665 = null;
var G__4665__2 = (function (tsym4659,coll){
var tsym4659__4661 = this;
var this$__4662 = tsym4659__4661;
return cljs.core.get.call(null,coll,this$__4662.toString());
});
var G__4665__3 = (function (tsym4660,coll,not_found){
var tsym4660__4663 = this;
var this$__4664 = tsym4660__4663;
return cljs.core.get.call(null,coll,this$__4664.toString(),not_found);
});
G__4665 = function(tsym4660,coll,not_found){
switch(arguments.length){
case 2:
return G__4665__2.call(this,tsym4660,coll);
case 3:
return G__4665__3.call(this,tsym4660,coll,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__4665;
})()
;
String.prototype.apply = (function (tsym4657,args4658){
return tsym4657.call.apply(tsym4657,[tsym4657].concat(cljs.core.aclone.call(null,args4658)));
});
String['prototype']['apply'] = (function (s,args){
if((cljs.core.count.call(null,args) < 2))
{return cljs.core.get.call(null,(args[0]),s);
} else
{return cljs.core.get.call(null,(args[0]),s,(args[1]));
}
});
cljs.core.lazy_seq_value = (function lazy_seq_value(lazy_seq){
var x__4666 = lazy_seq.x;
if(cljs.core.truth_(lazy_seq.realized))
{return x__4666;
} else
{lazy_seq.x = x__4666.call(null);
lazy_seq.realized = true;
return lazy_seq.x;
}
});

/**
* @constructor
*/
cljs.core.LazySeq = (function (meta,realized,x,__hash){
this.meta = meta;
this.realized = realized;
this.x = x;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15925324;
})
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.LazySeq");
});
cljs.core.LazySeq.prototype.cljs$core$IHash$ = true;
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__4667 = this;
var h__264__auto____4668 = this__4667.__hash;
if((h__264__auto____4668 != null))
{return h__264__auto____4668;
} else
{var h__264__auto____4669 = cljs.core.hash_coll.call(null,coll);
this__4667.__hash = h__264__auto____4669;
return h__264__auto____4669;
}
});
cljs.core.LazySeq.prototype.cljs$core$ISequential$ = true;
cljs.core.LazySeq.prototype.cljs$core$ICollection$ = true;
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__4670 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.LazySeq.prototype.toString = (function (){
var this__4671 = this;
var this$__4672 = this;
return cljs.core.pr_str.call(null,this$__4672);
});
cljs.core.LazySeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__4673 = this;
return cljs.core.seq.call(null,cljs.core.lazy_seq_value.call(null,coll));
});
cljs.core.LazySeq.prototype.cljs$core$ISeq$ = true;
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__4674 = this;
return cljs.core.first.call(null,cljs.core.lazy_seq_value.call(null,coll));
});
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__4675 = this;
return cljs.core.rest.call(null,cljs.core.lazy_seq_value.call(null,coll));
});
cljs.core.LazySeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__4676 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$ = true;
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__4677 = this;
return (new cljs.core.LazySeq(meta,this__4677.realized,this__4677.x,this__4677.__hash));
});
cljs.core.LazySeq.prototype.cljs$core$IMeta$ = true;
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__4678 = this;
return this__4678.meta;
});
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__4679 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__4679.meta);
});
cljs.core.LazySeq;
/**
* Naive impl of to-array as a start.
*/
cljs.core.to_array = (function to_array(s){
var ary__4680 = [];
var s__4681 = s;
while(true){
if(cljs.core.truth_(cljs.core.seq.call(null,s__4681)))
{ary__4680.push(cljs.core.first.call(null,s__4681));
{
var G__4682 = cljs.core.next.call(null,s__4681);
s__4681 = G__4682;
continue;
}
} else
{return ary__4680;
}
break;
}
});
/**
* Returns a (potentially-ragged) 2-dimensional array
* containing the contents of coll.
*/
cljs.core.to_array_2d = (function to_array_2d(coll){
var ret__4683 = cljs.core.make_array.call(null,cljs.core.count.call(null,coll));
var i__4684 = 0;
var xs__4685 = cljs.core.seq.call(null,coll);
while(true){
if(cljs.core.truth_(xs__4685))
{(ret__4683[i__4684] = cljs.core.to_array.call(null,cljs.core.first.call(null,xs__4685)));
{
var G__4686 = (i__4684 + 1);
var G__4687 = cljs.core.next.call(null,xs__4685);
i__4684 = G__4686;
xs__4685 = G__4687;
continue;
}
} else
{}
break;
}
return ret__4683;
});
cljs.core.long_array = (function() {
var long_array = null;
var long_array__1 = (function (size_or_seq){
if(cljs.core.number_QMARK_.call(null,size_or_seq))
{return long_array.call(null,size_or_seq,null);
} else
{if(cljs.core.seq_QMARK_.call(null,size_or_seq))
{return cljs.core.into_array.call(null,size_or_seq);
} else
{if("\uFDD0'else")
{throw (new Error("long-array called with something other than size or ISeq"));
} else
{return null;
}
}
}
});
var long_array__2 = (function (size,init_val_or_seq){
var a__4688 = cljs.core.make_array.call(null,size);
if(cljs.core.seq_QMARK_.call(null,init_val_or_seq))
{var s__4689 = cljs.core.seq.call(null,init_val_or_seq);
var i__4690 = 0;
var s__4691 = s__4689;
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____4692 = s__4691;
if(cljs.core.truth_(and__3822__auto____4692))
{return (i__4690 < size);
} else
{return and__3822__auto____4692;
}
})()))
{(a__4688[i__4690] = cljs.core.first.call(null,s__4691));
{
var G__4695 = (i__4690 + 1);
var G__4696 = cljs.core.next.call(null,s__4691);
i__4690 = G__4695;
s__4691 = G__4696;
continue;
}
} else
{return a__4688;
}
break;
}
} else
{var n__585__auto____4693 = size;
var i__4694 = 0;
while(true){
if((i__4694 < n__585__auto____4693))
{(a__4688[i__4694] = init_val_or_seq);
{
var G__4697 = (i__4694 + 1);
i__4694 = G__4697;
continue;
}
} else
{}
break;
}
return a__4688;
}
});
long_array = function(size,init_val_or_seq){
switch(arguments.length){
case 1:
return long_array__1.call(this,size);
case 2:
return long_array__2.call(this,size,init_val_or_seq);
}
throw('Invalid arity: ' + arguments.length);
};
long_array.cljs$lang$arity$1 = long_array__1;
long_array.cljs$lang$arity$2 = long_array__2;
return long_array;
})()
;
cljs.core.double_array = (function() {
var double_array = null;
var double_array__1 = (function (size_or_seq){
if(cljs.core.number_QMARK_.call(null,size_or_seq))
{return double_array.call(null,size_or_seq,null);
} else
{if(cljs.core.seq_QMARK_.call(null,size_or_seq))
{return cljs.core.into_array.call(null,size_or_seq);
} else
{if("\uFDD0'else")
{throw (new Error("double-array called with something other than size or ISeq"));
} else
{return null;
}
}
}
});
var double_array__2 = (function (size,init_val_or_seq){
var a__4698 = cljs.core.make_array.call(null,size);
if(cljs.core.seq_QMARK_.call(null,init_val_or_seq))
{var s__4699 = cljs.core.seq.call(null,init_val_or_seq);
var i__4700 = 0;
var s__4701 = s__4699;
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____4702 = s__4701;
if(cljs.core.truth_(and__3822__auto____4702))
{return (i__4700 < size);
} else
{return and__3822__auto____4702;
}
})()))
{(a__4698[i__4700] = cljs.core.first.call(null,s__4701));
{
var G__4705 = (i__4700 + 1);
var G__4706 = cljs.core.next.call(null,s__4701);
i__4700 = G__4705;
s__4701 = G__4706;
continue;
}
} else
{return a__4698;
}
break;
}
} else
{var n__585__auto____4703 = size;
var i__4704 = 0;
while(true){
if((i__4704 < n__585__auto____4703))
{(a__4698[i__4704] = init_val_or_seq);
{
var G__4707 = (i__4704 + 1);
i__4704 = G__4707;
continue;
}
} else
{}
break;
}
return a__4698;
}
});
double_array = function(size,init_val_or_seq){
switch(arguments.length){
case 1:
return double_array__1.call(this,size);
case 2:
return double_array__2.call(this,size,init_val_or_seq);
}
throw('Invalid arity: ' + arguments.length);
};
double_array.cljs$lang$arity$1 = double_array__1;
double_array.cljs$lang$arity$2 = double_array__2;
return double_array;
})()
;
cljs.core.object_array = (function() {
var object_array = null;
var object_array__1 = (function (size_or_seq){
if(cljs.core.number_QMARK_.call(null,size_or_seq))
{return object_array.call(null,size_or_seq,null);
} else
{if(cljs.core.seq_QMARK_.call(null,size_or_seq))
{return cljs.core.into_array.call(null,size_or_seq);
} else
{if("\uFDD0'else")
{throw (new Error("object-array called with something other than size or ISeq"));
} else
{return null;
}
}
}
});
var object_array__2 = (function (size,init_val_or_seq){
var a__4708 = cljs.core.make_array.call(null,size);
if(cljs.core.seq_QMARK_.call(null,init_val_or_seq))
{var s__4709 = cljs.core.seq.call(null,init_val_or_seq);
var i__4710 = 0;
var s__4711 = s__4709;
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____4712 = s__4711;
if(cljs.core.truth_(and__3822__auto____4712))
{return (i__4710 < size);
} else
{return and__3822__auto____4712;
}
})()))
{(a__4708[i__4710] = cljs.core.first.call(null,s__4711));
{
var G__4715 = (i__4710 + 1);
var G__4716 = cljs.core.next.call(null,s__4711);
i__4710 = G__4715;
s__4711 = G__4716;
continue;
}
} else
{return a__4708;
}
break;
}
} else
{var n__585__auto____4713 = size;
var i__4714 = 0;
while(true){
if((i__4714 < n__585__auto____4713))
{(a__4708[i__4714] = init_val_or_seq);
{
var G__4717 = (i__4714 + 1);
i__4714 = G__4717;
continue;
}
} else
{}
break;
}
return a__4708;
}
});
object_array = function(size,init_val_or_seq){
switch(arguments.length){
case 1:
return object_array__1.call(this,size);
case 2:
return object_array__2.call(this,size,init_val_or_seq);
}
throw('Invalid arity: ' + arguments.length);
};
object_array.cljs$lang$arity$1 = object_array__1;
object_array.cljs$lang$arity$2 = object_array__2;
return object_array;
})()
;
cljs.core.bounded_count = (function bounded_count(s,n){
if(cljs.core.counted_QMARK_.call(null,s))
{return cljs.core.count.call(null,s);
} else
{var s__4718 = s;
var i__4719 = n;
var sum__4720 = 0;
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____4721 = (i__4719 > 0);
if(and__3822__auto____4721)
{return cljs.core.seq.call(null,s__4718);
} else
{return and__3822__auto____4721;
}
})()))
{{
var G__4722 = cljs.core.next.call(null,s__4718);
var G__4723 = (i__4719 - 1);
var G__4724 = (sum__4720 + 1);
s__4718 = G__4722;
i__4719 = G__4723;
sum__4720 = G__4724;
continue;
}
} else
{return sum__4720;
}
break;
}
}
});
cljs.core.spread = (function spread(arglist){
if((arglist == null))
{return null;
} else
{if((cljs.core.next.call(null,arglist) == null))
{return cljs.core.seq.call(null,cljs.core.first.call(null,arglist));
} else
{if("\uFDD0'else")
{return cljs.core.cons.call(null,cljs.core.first.call(null,arglist),spread.call(null,cljs.core.next.call(null,arglist)));
} else
{return null;
}
}
}
});
/**
* Returns a lazy seq representing the concatenation of the elements in the supplied colls.
* @param {...*} var_args
*/
cljs.core.concat = (function() {
var concat = null;
var concat__0 = (function (){
return (new cljs.core.LazySeq(null,false,(function (){
return null;
})));
});
var concat__1 = (function (x){
return (new cljs.core.LazySeq(null,false,(function (){
return x;
})));
});
var concat__2 = (function (x,y){
return (new cljs.core.LazySeq(null,false,(function (){
var s__4725 = cljs.core.seq.call(null,x);
if(cljs.core.truth_(s__4725))
{return cljs.core.cons.call(null,cljs.core.first.call(null,s__4725),concat.call(null,cljs.core.rest.call(null,s__4725),y));
} else
{return y;
}
})));
});
var concat__3 = (function() { 
var G__4728__delegate = function (x,y,zs){
var cat__4727 = (function cat(xys,zs){
return (new cljs.core.LazySeq(null,false,(function (){
var xys__4726 = cljs.core.seq.call(null,xys);
if(cljs.core.truth_(xys__4726))
{return cljs.core.cons.call(null,cljs.core.first.call(null,xys__4726),cat.call(null,cljs.core.rest.call(null,xys__4726),zs));
} else
{if(cljs.core.truth_(zs))
{return cat.call(null,cljs.core.first.call(null,zs),cljs.core.next.call(null,zs));
} else
{return null;
}
}
})));
});
return cat__4727.call(null,concat.call(null,x,y),zs);
};
var G__4728 = function (x,y,var_args){
var zs = null;
if (goog.isDef(var_args)) {
  zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4728__delegate.call(this, x, y, zs);
};
G__4728.cljs$lang$maxFixedArity = 2;
G__4728.cljs$lang$applyTo = (function (arglist__4729){
var x = cljs.core.first(arglist__4729);
var y = cljs.core.first(cljs.core.next(arglist__4729));
var zs = cljs.core.rest(cljs.core.next(arglist__4729));
return G__4728__delegate(x, y, zs);
});
G__4728.cljs$lang$arity$variadic = G__4728__delegate;
return G__4728;
})()
;
concat = function(x,y,var_args){
var zs = var_args;
switch(arguments.length){
case 0:
return concat__0.call(this);
case 1:
return concat__1.call(this,x);
case 2:
return concat__2.call(this,x,y);
default:
return concat__3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
concat.cljs$lang$maxFixedArity = 2;
concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
concat.cljs$lang$arity$0 = concat__0;
concat.cljs$lang$arity$1 = concat__1;
concat.cljs$lang$arity$2 = concat__2;
concat.cljs$lang$arity$variadic = concat__3.cljs$lang$arity$variadic;
return concat;
})()
;
/**
* Creates a new list containing the items prepended to the rest, the
* last of which will be treated as a sequence.
* @param {...*} var_args
*/
cljs.core.list_STAR_ = (function() {
var list_STAR_ = null;
var list_STAR___1 = (function (args){
return cljs.core.seq.call(null,args);
});
var list_STAR___2 = (function (a,args){
return cljs.core.cons.call(null,a,args);
});
var list_STAR___3 = (function (a,b,args){
return cljs.core.cons.call(null,a,cljs.core.cons.call(null,b,args));
});
var list_STAR___4 = (function (a,b,c,args){
return cljs.core.cons.call(null,a,cljs.core.cons.call(null,b,cljs.core.cons.call(null,c,args)));
});
var list_STAR___5 = (function() { 
var G__4730__delegate = function (a,b,c,d,more){
return cljs.core.cons.call(null,a,cljs.core.cons.call(null,b,cljs.core.cons.call(null,c,cljs.core.cons.call(null,d,cljs.core.spread.call(null,more)))));
};
var G__4730 = function (a,b,c,d,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4),0);
} 
return G__4730__delegate.call(this, a, b, c, d, more);
};
G__4730.cljs$lang$maxFixedArity = 4;
G__4730.cljs$lang$applyTo = (function (arglist__4731){
var a = cljs.core.first(arglist__4731);
var b = cljs.core.first(cljs.core.next(arglist__4731));
var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4731)));
var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4731))));
var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4731))));
return G__4730__delegate(a, b, c, d, more);
});
G__4730.cljs$lang$arity$variadic = G__4730__delegate;
return G__4730;
})()
;
list_STAR_ = function(a,b,c,d,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return list_STAR___1.call(this,a);
case 2:
return list_STAR___2.call(this,a,b);
case 3:
return list_STAR___3.call(this,a,b,c);
case 4:
return list_STAR___4.call(this,a,b,c,d);
default:
return list_STAR___5.cljs$lang$arity$variadic(a,b,c,d, cljs.core.array_seq(arguments, 4));
}
throw('Invalid arity: ' + arguments.length);
};
list_STAR_.cljs$lang$maxFixedArity = 4;
list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
list_STAR_.cljs$lang$arity$1 = list_STAR___1;
list_STAR_.cljs$lang$arity$2 = list_STAR___2;
list_STAR_.cljs$lang$arity$3 = list_STAR___3;
list_STAR_.cljs$lang$arity$4 = list_STAR___4;
list_STAR_.cljs$lang$arity$variadic = list_STAR___5.cljs$lang$arity$variadic;
return list_STAR_;
})()
;
cljs.core.transient$ = (function transient$(coll){
return cljs.core._as_transient.call(null,coll);
});
cljs.core.persistent_BANG_ = (function persistent_BANG_(tcoll){
return cljs.core._persistent_BANG_.call(null,tcoll);
});
cljs.core.conj_BANG_ = (function conj_BANG_(tcoll,val){
return cljs.core._conj_BANG_.call(null,tcoll,val);
});
cljs.core.assoc_BANG_ = (function assoc_BANG_(tcoll,key,val){
return cljs.core._assoc_BANG_.call(null,tcoll,key,val);
});
cljs.core.dissoc_BANG_ = (function dissoc_BANG_(tcoll,key){
return cljs.core._dissoc_BANG_.call(null,tcoll,key);
});
cljs.core.pop_BANG_ = (function pop_BANG_(tcoll){
return cljs.core._pop_BANG_.call(null,tcoll);
});
cljs.core.disj_BANG_ = (function disj_BANG_(tcoll,val){
return cljs.core._disjoin_BANG_.call(null,tcoll,val);
});
void 0;cljs.core.apply_to = (function apply_to(f,argc,args){
var args__4732 = cljs.core.seq.call(null,args);
if((argc === 0))
{return f.call(null);
} else
{var a__4733 = cljs.core._first.call(null,args__4732);
var args__4734 = cljs.core._rest.call(null,args__4732);
if((argc === 1))
{if(f.cljs$lang$arity$1)
{return f.cljs$lang$arity$1(a__4733);
} else
{return f.call(null,a__4733);
}
} else
{var b__4735 = cljs.core._first.call(null,args__4734);
var args__4736 = cljs.core._rest.call(null,args__4734);
if((argc === 2))
{if(f.cljs$lang$arity$2)
{return f.cljs$lang$arity$2(a__4733,b__4735);
} else
{return f.call(null,a__4733,b__4735);
}
} else
{var c__4737 = cljs.core._first.call(null,args__4736);
var args__4738 = cljs.core._rest.call(null,args__4736);
if((argc === 3))
{if(f.cljs$lang$arity$3)
{return f.cljs$lang$arity$3(a__4733,b__4735,c__4737);
} else
{return f.call(null,a__4733,b__4735,c__4737);
}
} else
{var d__4739 = cljs.core._first.call(null,args__4738);
var args__4740 = cljs.core._rest.call(null,args__4738);
if((argc === 4))
{if(f.cljs$lang$arity$4)
{return f.cljs$lang$arity$4(a__4733,b__4735,c__4737,d__4739);
} else
{return f.call(null,a__4733,b__4735,c__4737,d__4739);
}
} else
{var e__4741 = cljs.core._first.call(null,args__4740);
var args__4742 = cljs.core._rest.call(null,args__4740);
if((argc === 5))
{if(f.cljs$lang$arity$5)
{return f.cljs$lang$arity$5(a__4733,b__4735,c__4737,d__4739,e__4741);
} else
{return f.call(null,a__4733,b__4735,c__4737,d__4739,e__4741);
}
} else
{var f__4743 = cljs.core._first.call(null,args__4742);
var args__4744 = cljs.core._rest.call(null,args__4742);
if((argc === 6))
{if(f__4743.cljs$lang$arity$6)
{return f__4743.cljs$lang$arity$6(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743);
}
} else
{var g__4745 = cljs.core._first.call(null,args__4744);
var args__4746 = cljs.core._rest.call(null,args__4744);
if((argc === 7))
{if(f__4743.cljs$lang$arity$7)
{return f__4743.cljs$lang$arity$7(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745);
}
} else
{var h__4747 = cljs.core._first.call(null,args__4746);
var args__4748 = cljs.core._rest.call(null,args__4746);
if((argc === 8))
{if(f__4743.cljs$lang$arity$8)
{return f__4743.cljs$lang$arity$8(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747);
}
} else
{var i__4749 = cljs.core._first.call(null,args__4748);
var args__4750 = cljs.core._rest.call(null,args__4748);
if((argc === 9))
{if(f__4743.cljs$lang$arity$9)
{return f__4743.cljs$lang$arity$9(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749);
}
} else
{var j__4751 = cljs.core._first.call(null,args__4750);
var args__4752 = cljs.core._rest.call(null,args__4750);
if((argc === 10))
{if(f__4743.cljs$lang$arity$10)
{return f__4743.cljs$lang$arity$10(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751);
}
} else
{var k__4753 = cljs.core._first.call(null,args__4752);
var args__4754 = cljs.core._rest.call(null,args__4752);
if((argc === 11))
{if(f__4743.cljs$lang$arity$11)
{return f__4743.cljs$lang$arity$11(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753);
}
} else
{var l__4755 = cljs.core._first.call(null,args__4754);
var args__4756 = cljs.core._rest.call(null,args__4754);
if((argc === 12))
{if(f__4743.cljs$lang$arity$12)
{return f__4743.cljs$lang$arity$12(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755);
}
} else
{var m__4757 = cljs.core._first.call(null,args__4756);
var args__4758 = cljs.core._rest.call(null,args__4756);
if((argc === 13))
{if(f__4743.cljs$lang$arity$13)
{return f__4743.cljs$lang$arity$13(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757);
}
} else
{var n__4759 = cljs.core._first.call(null,args__4758);
var args__4760 = cljs.core._rest.call(null,args__4758);
if((argc === 14))
{if(f__4743.cljs$lang$arity$14)
{return f__4743.cljs$lang$arity$14(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759);
}
} else
{var o__4761 = cljs.core._first.call(null,args__4760);
var args__4762 = cljs.core._rest.call(null,args__4760);
if((argc === 15))
{if(f__4743.cljs$lang$arity$15)
{return f__4743.cljs$lang$arity$15(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761);
}
} else
{var p__4763 = cljs.core._first.call(null,args__4762);
var args__4764 = cljs.core._rest.call(null,args__4762);
if((argc === 16))
{if(f__4743.cljs$lang$arity$16)
{return f__4743.cljs$lang$arity$16(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763);
}
} else
{var q__4765 = cljs.core._first.call(null,args__4764);
var args__4766 = cljs.core._rest.call(null,args__4764);
if((argc === 17))
{if(f__4743.cljs$lang$arity$17)
{return f__4743.cljs$lang$arity$17(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765);
}
} else
{var r__4767 = cljs.core._first.call(null,args__4766);
var args__4768 = cljs.core._rest.call(null,args__4766);
if((argc === 18))
{if(f__4743.cljs$lang$arity$18)
{return f__4743.cljs$lang$arity$18(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767);
}
} else
{var s__4769 = cljs.core._first.call(null,args__4768);
var args__4770 = cljs.core._rest.call(null,args__4768);
if((argc === 19))
{if(f__4743.cljs$lang$arity$19)
{return f__4743.cljs$lang$arity$19(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767,s__4769);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767,s__4769);
}
} else
{var t__4771 = cljs.core._first.call(null,args__4770);
var args__4772 = cljs.core._rest.call(null,args__4770);
if((argc === 20))
{if(f__4743.cljs$lang$arity$20)
{return f__4743.cljs$lang$arity$20(a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767,s__4769,t__4771);
} else
{return f__4743.call(null,a__4733,b__4735,c__4737,d__4739,e__4741,f__4743,g__4745,h__4747,i__4749,j__4751,k__4753,l__4755,m__4757,n__4759,o__4761,p__4763,q__4765,r__4767,s__4769,t__4771);
}
} else
{throw (new Error("Only up to 20 arguments supported on functions"));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
void 0;/**
* Applies fn f to the argument list formed by prepending intervening arguments to args.
* First cut.  Not lazy.  Needs to use emitted toApply.
* @param {...*} var_args
*/
cljs.core.apply = (function() {
var apply = null;
var apply__2 = (function (f,args){
var fixed_arity__4773 = f.cljs$lang$maxFixedArity;
if(cljs.core.truth_(f.cljs$lang$applyTo))
{var bc__4774 = cljs.core.bounded_count.call(null,args,(fixed_arity__4773 + 1));
if((bc__4774 <= fixed_arity__4773))
{return cljs.core.apply_to.call(null,f,bc__4774,args);
} else
{return f.cljs$lang$applyTo(args);
}
} else
{return f.apply(f,cljs.core.to_array.call(null,args));
}
});
var apply__3 = (function (f,x,args){
var arglist__4775 = cljs.core.list_STAR_.call(null,x,args);
var fixed_arity__4776 = f.cljs$lang$maxFixedArity;
if(cljs.core.truth_(f.cljs$lang$applyTo))
{var bc__4777 = cljs.core.bounded_count.call(null,arglist__4775,(fixed_arity__4776 + 1));
if((bc__4777 <= fixed_arity__4776))
{return cljs.core.apply_to.call(null,f,bc__4777,arglist__4775);
} else
{return f.cljs$lang$applyTo(arglist__4775);
}
} else
{return f.apply(f,cljs.core.to_array.call(null,arglist__4775));
}
});
var apply__4 = (function (f,x,y,args){
var arglist__4778 = cljs.core.list_STAR_.call(null,x,y,args);
var fixed_arity__4779 = f.cljs$lang$maxFixedArity;
if(cljs.core.truth_(f.cljs$lang$applyTo))
{var bc__4780 = cljs.core.bounded_count.call(null,arglist__4778,(fixed_arity__4779 + 1));
if((bc__4780 <= fixed_arity__4779))
{return cljs.core.apply_to.call(null,f,bc__4780,arglist__4778);
} else
{return f.cljs$lang$applyTo(arglist__4778);
}
} else
{return f.apply(f,cljs.core.to_array.call(null,arglist__4778));
}
});
var apply__5 = (function (f,x,y,z,args){
var arglist__4781 = cljs.core.list_STAR_.call(null,x,y,z,args);
var fixed_arity__4782 = f.cljs$lang$maxFixedArity;
if(cljs.core.truth_(f.cljs$lang$applyTo))
{var bc__4783 = cljs.core.bounded_count.call(null,arglist__4781,(fixed_arity__4782 + 1));
if((bc__4783 <= fixed_arity__4782))
{return cljs.core.apply_to.call(null,f,bc__4783,arglist__4781);
} else
{return f.cljs$lang$applyTo(arglist__4781);
}
} else
{return f.apply(f,cljs.core.to_array.call(null,arglist__4781));
}
});
var apply__6 = (function() { 
var G__4787__delegate = function (f,a,b,c,d,args){
var arglist__4784 = cljs.core.cons.call(null,a,cljs.core.cons.call(null,b,cljs.core.cons.call(null,c,cljs.core.cons.call(null,d,cljs.core.spread.call(null,args)))));
var fixed_arity__4785 = f.cljs$lang$maxFixedArity;
if(cljs.core.truth_(f.cljs$lang$applyTo))
{var bc__4786 = cljs.core.bounded_count.call(null,arglist__4784,(fixed_arity__4785 + 1));
if((bc__4786 <= fixed_arity__4785))
{return cljs.core.apply_to.call(null,f,bc__4786,arglist__4784);
} else
{return f.cljs$lang$applyTo(arglist__4784);
}
} else
{return f.apply(f,cljs.core.to_array.call(null,arglist__4784));
}
};
var G__4787 = function (f,a,b,c,d,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5),0);
} 
return G__4787__delegate.call(this, f, a, b, c, d, args);
};
G__4787.cljs$lang$maxFixedArity = 5;
G__4787.cljs$lang$applyTo = (function (arglist__4788){
var f = cljs.core.first(arglist__4788);
var a = cljs.core.first(cljs.core.next(arglist__4788));
var b = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4788)));
var c = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4788))));
var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4788)))));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4788)))));
return G__4787__delegate(f, a, b, c, d, args);
});
G__4787.cljs$lang$arity$variadic = G__4787__delegate;
return G__4787;
})()
;
apply = function(f,a,b,c,d,var_args){
var args = var_args;
switch(arguments.length){
case 2:
return apply__2.call(this,f,a);
case 3:
return apply__3.call(this,f,a,b);
case 4:
return apply__4.call(this,f,a,b,c);
case 5:
return apply__5.call(this,f,a,b,c,d);
default:
return apply__6.cljs$lang$arity$variadic(f,a,b,c,d, cljs.core.array_seq(arguments, 5));
}
throw('Invalid arity: ' + arguments.length);
};
apply.cljs$lang$maxFixedArity = 5;
apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
apply.cljs$lang$arity$2 = apply__2;
apply.cljs$lang$arity$3 = apply__3;
apply.cljs$lang$arity$4 = apply__4;
apply.cljs$lang$arity$5 = apply__5;
apply.cljs$lang$arity$variadic = apply__6.cljs$lang$arity$variadic;
return apply;
})()
;
/**
* Returns an object of the same type and value as obj, with
* (apply f (meta obj) args) as its metadata.
* @param {...*} var_args
*/
cljs.core.vary_meta = (function() { 
var vary_meta__delegate = function (obj,f,args){
return cljs.core.with_meta.call(null,obj,cljs.core.apply.call(null,f,cljs.core.meta.call(null,obj),args));
};
var vary_meta = function (obj,f,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return vary_meta__delegate.call(this, obj, f, args);
};
vary_meta.cljs$lang$maxFixedArity = 2;
vary_meta.cljs$lang$applyTo = (function (arglist__4789){
var obj = cljs.core.first(arglist__4789);
var f = cljs.core.first(cljs.core.next(arglist__4789));
var args = cljs.core.rest(cljs.core.next(arglist__4789));
return vary_meta__delegate(obj, f, args);
});
vary_meta.cljs$lang$arity$variadic = vary_meta__delegate;
return vary_meta;
})()
;
/**
* Same as (not (= obj1 obj2))
* @param {...*} var_args
*/
cljs.core.not_EQ_ = (function() {
var not_EQ_ = null;
var not_EQ___1 = (function (x){
return false;
});
var not_EQ___2 = (function (x,y){
return cljs.core.not.call(null,cljs.core._EQ_.call(null,x,y));
});
var not_EQ___3 = (function() { 
var G__4790__delegate = function (x,y,more){
return cljs.core.not.call(null,cljs.core.apply.call(null,cljs.core._EQ_,x,y,more));
};
var G__4790 = function (x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4790__delegate.call(this, x, y, more);
};
G__4790.cljs$lang$maxFixedArity = 2;
G__4790.cljs$lang$applyTo = (function (arglist__4791){
var x = cljs.core.first(arglist__4791);
var y = cljs.core.first(cljs.core.next(arglist__4791));
var more = cljs.core.rest(cljs.core.next(arglist__4791));
return G__4790__delegate(x, y, more);
});
G__4790.cljs$lang$arity$variadic = G__4790__delegate;
return G__4790;
})()
;
not_EQ_ = function(x,y,var_args){
var more = var_args;
switch(arguments.length){
case 1:
return not_EQ___1.call(this,x);
case 2:
return not_EQ___2.call(this,x,y);
default:
return not_EQ___3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
not_EQ_.cljs$lang$maxFixedArity = 2;
not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
not_EQ_.cljs$lang$arity$1 = not_EQ___1;
not_EQ_.cljs$lang$arity$2 = not_EQ___2;
not_EQ_.cljs$lang$arity$variadic = not_EQ___3.cljs$lang$arity$variadic;
return not_EQ_;
})()
;
/**
* If coll is empty, returns nil, else coll
*/
cljs.core.not_empty = (function not_empty(coll){
if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{return coll;
} else
{return null;
}
});
/**
* Returns true if (pred x) is logical true for every x in coll, else
* false.
*/
cljs.core.every_QMARK_ = (function every_QMARK_(pred,coll){
while(true){
if((cljs.core.seq.call(null,coll) == null))
{return true;
} else
{if(cljs.core.truth_(pred.call(null,cljs.core.first.call(null,coll))))
{{
var G__4792 = pred;
var G__4793 = cljs.core.next.call(null,coll);
pred = G__4792;
coll = G__4793;
continue;
}
} else
{if("\uFDD0'else")
{return false;
} else
{return null;
}
}
}
break;
}
});
/**
* Returns false if (pred x) is logical true for every x in
* coll, else true.
*/
cljs.core.not_every_QMARK_ = (function not_every_QMARK_(pred,coll){
return cljs.core.not.call(null,cljs.core.every_QMARK_.call(null,pred,coll));
});
/**
* Returns the first logical true value of (pred x) for any x in coll,
* else nil.  One common idiom is to use a set as pred, for example
* this will return :fred if :fred is in the sequence, otherwise nil:
* (some #{:fred} coll)
*/
cljs.core.some = (function some(pred,coll){
while(true){
if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{var or__3824__auto____4794 = pred.call(null,cljs.core.first.call(null,coll));
if(cljs.core.truth_(or__3824__auto____4794))
{return or__3824__auto____4794;
} else
{{
var G__4795 = pred;
var G__4796 = cljs.core.next.call(null,coll);
pred = G__4795;
coll = G__4796;
continue;
}
}
} else
{return null;
}
break;
}
});
/**
* Returns false if (pred x) is logical true for any x in coll,
* else true.
*/
cljs.core.not_any_QMARK_ = (function not_any_QMARK_(pred,coll){
return cljs.core.not.call(null,cljs.core.some.call(null,pred,coll));
});
/**
* Returns true if n is even, throws an exception if n is not an integer
*/
cljs.core.even_QMARK_ = (function even_QMARK_(n){
if(cljs.core.integer_QMARK_.call(null,n))
{return ((n & 1) === 0);
} else
{throw (new Error([cljs.core.str("Argument must be an integer: "),cljs.core.str(n)].join('')));
}
});
/**
* Returns true if n is odd, throws an exception if n is not an integer
*/
cljs.core.odd_QMARK_ = (function odd_QMARK_(n){
return cljs.core.not.call(null,cljs.core.even_QMARK_.call(null,n));
});
cljs.core.identity = (function identity(x){
return x;
});
/**
* Takes a fn f and returns a fn that takes the same arguments as f,
* has the same effects, if any, and returns the opposite truth value.
*/
cljs.core.complement = (function complement(f){
return (function() {
var G__4797 = null;
var G__4797__0 = (function (){
return cljs.core.not.call(null,f.call(null));
});
var G__4797__1 = (function (x){
return cljs.core.not.call(null,f.call(null,x));
});
var G__4797__2 = (function (x,y){
return cljs.core.not.call(null,f.call(null,x,y));
});
var G__4797__3 = (function() { 
var G__4798__delegate = function (x,y,zs){
return cljs.core.not.call(null,cljs.core.apply.call(null,f,x,y,zs));
};
var G__4798 = function (x,y,var_args){
var zs = null;
if (goog.isDef(var_args)) {
  zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4798__delegate.call(this, x, y, zs);
};
G__4798.cljs$lang$maxFixedArity = 2;
G__4798.cljs$lang$applyTo = (function (arglist__4799){
var x = cljs.core.first(arglist__4799);
var y = cljs.core.first(cljs.core.next(arglist__4799));
var zs = cljs.core.rest(cljs.core.next(arglist__4799));
return G__4798__delegate(x, y, zs);
});
G__4798.cljs$lang$arity$variadic = G__4798__delegate;
return G__4798;
})()
;
G__4797 = function(x,y,var_args){
var zs = var_args;
switch(arguments.length){
case 0:
return G__4797__0.call(this);
case 1:
return G__4797__1.call(this,x);
case 2:
return G__4797__2.call(this,x,y);
default:
return G__4797__3.cljs$lang$arity$variadic(x,y, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
G__4797.cljs$lang$maxFixedArity = 2;
G__4797.cljs$lang$applyTo = G__4797__3.cljs$lang$applyTo;
return G__4797;
})()
});
/**
* Returns a function that takes any number of arguments and returns x.
*/
cljs.core.constantly = (function constantly(x){
return (function() { 
var G__4800__delegate = function (args){
return x;
};
var G__4800 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4800__delegate.call(this, args);
};
G__4800.cljs$lang$maxFixedArity = 0;
G__4800.cljs$lang$applyTo = (function (arglist__4801){
var args = cljs.core.seq(arglist__4801);;
return G__4800__delegate(args);
});
G__4800.cljs$lang$arity$variadic = G__4800__delegate;
return G__4800;
})()
;
});
/**
* Takes a set of functions and returns a fn that is the composition
* of those fns.  The returned fn takes a variable number of args,
* applies the rightmost of fns to the args, the next
* fn (right-to-left) to the result, etc.
* @param {...*} var_args
*/
cljs.core.comp = (function() {
var comp = null;
var comp__0 = (function (){
return cljs.core.identity;
});
var comp__1 = (function (f){
return f;
});
var comp__2 = (function (f,g){
return (function() {
var G__4805 = null;
var G__4805__0 = (function (){
return f.call(null,g.call(null));
});
var G__4805__1 = (function (x){
return f.call(null,g.call(null,x));
});
var G__4805__2 = (function (x,y){
return f.call(null,g.call(null,x,y));
});
var G__4805__3 = (function (x,y,z){
return f.call(null,g.call(null,x,y,z));
});
var G__4805__4 = (function() { 
var G__4806__delegate = function (x,y,z,args){
return f.call(null,cljs.core.apply.call(null,g,x,y,z,args));
};
var G__4806 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4806__delegate.call(this, x, y, z, args);
};
G__4806.cljs$lang$maxFixedArity = 3;
G__4806.cljs$lang$applyTo = (function (arglist__4807){
var x = cljs.core.first(arglist__4807);
var y = cljs.core.first(cljs.core.next(arglist__4807));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4807)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4807)));
return G__4806__delegate(x, y, z, args);
});
G__4806.cljs$lang$arity$variadic = G__4806__delegate;
return G__4806;
})()
;
G__4805 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__4805__0.call(this);
case 1:
return G__4805__1.call(this,x);
case 2:
return G__4805__2.call(this,x,y);
case 3:
return G__4805__3.call(this,x,y,z);
default:
return G__4805__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__4805.cljs$lang$maxFixedArity = 3;
G__4805.cljs$lang$applyTo = G__4805__4.cljs$lang$applyTo;
return G__4805;
})()
});
var comp__3 = (function (f,g,h){
return (function() {
var G__4808 = null;
var G__4808__0 = (function (){
return f.call(null,g.call(null,h.call(null)));
});
var G__4808__1 = (function (x){
return f.call(null,g.call(null,h.call(null,x)));
});
var G__4808__2 = (function (x,y){
return f.call(null,g.call(null,h.call(null,x,y)));
});
var G__4808__3 = (function (x,y,z){
return f.call(null,g.call(null,h.call(null,x,y,z)));
});
var G__4808__4 = (function() { 
var G__4809__delegate = function (x,y,z,args){
return f.call(null,g.call(null,cljs.core.apply.call(null,h,x,y,z,args)));
};
var G__4809 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4809__delegate.call(this, x, y, z, args);
};
G__4809.cljs$lang$maxFixedArity = 3;
G__4809.cljs$lang$applyTo = (function (arglist__4810){
var x = cljs.core.first(arglist__4810);
var y = cljs.core.first(cljs.core.next(arglist__4810));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4810)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4810)));
return G__4809__delegate(x, y, z, args);
});
G__4809.cljs$lang$arity$variadic = G__4809__delegate;
return G__4809;
})()
;
G__4808 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__4808__0.call(this);
case 1:
return G__4808__1.call(this,x);
case 2:
return G__4808__2.call(this,x,y);
case 3:
return G__4808__3.call(this,x,y,z);
default:
return G__4808__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__4808.cljs$lang$maxFixedArity = 3;
G__4808.cljs$lang$applyTo = G__4808__4.cljs$lang$applyTo;
return G__4808;
})()
});
var comp__4 = (function() { 
var G__4811__delegate = function (f1,f2,f3,fs){
var fs__4802 = cljs.core.reverse.call(null,cljs.core.list_STAR_.call(null,f1,f2,f3,fs));
return (function() { 
var G__4812__delegate = function (args){
var ret__4803 = cljs.core.apply.call(null,cljs.core.first.call(null,fs__4802),args);
var fs__4804 = cljs.core.next.call(null,fs__4802);
while(true){
if(cljs.core.truth_(fs__4804))
{{
var G__4813 = cljs.core.first.call(null,fs__4804).call(null,ret__4803);
var G__4814 = cljs.core.next.call(null,fs__4804);
ret__4803 = G__4813;
fs__4804 = G__4814;
continue;
}
} else
{return ret__4803;
}
break;
}
};
var G__4812 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4812__delegate.call(this, args);
};
G__4812.cljs$lang$maxFixedArity = 0;
G__4812.cljs$lang$applyTo = (function (arglist__4815){
var args = cljs.core.seq(arglist__4815);;
return G__4812__delegate(args);
});
G__4812.cljs$lang$arity$variadic = G__4812__delegate;
return G__4812;
})()
;
};
var G__4811 = function (f1,f2,f3,var_args){
var fs = null;
if (goog.isDef(var_args)) {
  fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4811__delegate.call(this, f1, f2, f3, fs);
};
G__4811.cljs$lang$maxFixedArity = 3;
G__4811.cljs$lang$applyTo = (function (arglist__4816){
var f1 = cljs.core.first(arglist__4816);
var f2 = cljs.core.first(cljs.core.next(arglist__4816));
var f3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4816)));
var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4816)));
return G__4811__delegate(f1, f2, f3, fs);
});
G__4811.cljs$lang$arity$variadic = G__4811__delegate;
return G__4811;
})()
;
comp = function(f1,f2,f3,var_args){
var fs = var_args;
switch(arguments.length){
case 0:
return comp__0.call(this);
case 1:
return comp__1.call(this,f1);
case 2:
return comp__2.call(this,f1,f2);
case 3:
return comp__3.call(this,f1,f2,f3);
default:
return comp__4.cljs$lang$arity$variadic(f1,f2,f3, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
comp.cljs$lang$maxFixedArity = 3;
comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
comp.cljs$lang$arity$0 = comp__0;
comp.cljs$lang$arity$1 = comp__1;
comp.cljs$lang$arity$2 = comp__2;
comp.cljs$lang$arity$3 = comp__3;
comp.cljs$lang$arity$variadic = comp__4.cljs$lang$arity$variadic;
return comp;
})()
;
/**
* Takes a function f and fewer than the normal arguments to f, and
* returns a fn that takes a variable number of additional args. When
* called, the returned function calls f with args + additional args.
* @param {...*} var_args
*/
cljs.core.partial = (function() {
var partial = null;
var partial__2 = (function (f,arg1){
return (function() { 
var G__4817__delegate = function (args){
return cljs.core.apply.call(null,f,arg1,args);
};
var G__4817 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4817__delegate.call(this, args);
};
G__4817.cljs$lang$maxFixedArity = 0;
G__4817.cljs$lang$applyTo = (function (arglist__4818){
var args = cljs.core.seq(arglist__4818);;
return G__4817__delegate(args);
});
G__4817.cljs$lang$arity$variadic = G__4817__delegate;
return G__4817;
})()
;
});
var partial__3 = (function (f,arg1,arg2){
return (function() { 
var G__4819__delegate = function (args){
return cljs.core.apply.call(null,f,arg1,arg2,args);
};
var G__4819 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4819__delegate.call(this, args);
};
G__4819.cljs$lang$maxFixedArity = 0;
G__4819.cljs$lang$applyTo = (function (arglist__4820){
var args = cljs.core.seq(arglist__4820);;
return G__4819__delegate(args);
});
G__4819.cljs$lang$arity$variadic = G__4819__delegate;
return G__4819;
})()
;
});
var partial__4 = (function (f,arg1,arg2,arg3){
return (function() { 
var G__4821__delegate = function (args){
return cljs.core.apply.call(null,f,arg1,arg2,arg3,args);
};
var G__4821 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4821__delegate.call(this, args);
};
G__4821.cljs$lang$maxFixedArity = 0;
G__4821.cljs$lang$applyTo = (function (arglist__4822){
var args = cljs.core.seq(arglist__4822);;
return G__4821__delegate(args);
});
G__4821.cljs$lang$arity$variadic = G__4821__delegate;
return G__4821;
})()
;
});
var partial__5 = (function() { 
var G__4823__delegate = function (f,arg1,arg2,arg3,more){
return (function() { 
var G__4824__delegate = function (args){
return cljs.core.apply.call(null,f,arg1,arg2,arg3,cljs.core.concat.call(null,more,args));
};
var G__4824 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__4824__delegate.call(this, args);
};
G__4824.cljs$lang$maxFixedArity = 0;
G__4824.cljs$lang$applyTo = (function (arglist__4825){
var args = cljs.core.seq(arglist__4825);;
return G__4824__delegate(args);
});
G__4824.cljs$lang$arity$variadic = G__4824__delegate;
return G__4824;
})()
;
};
var G__4823 = function (f,arg1,arg2,arg3,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4),0);
} 
return G__4823__delegate.call(this, f, arg1, arg2, arg3, more);
};
G__4823.cljs$lang$maxFixedArity = 4;
G__4823.cljs$lang$applyTo = (function (arglist__4826){
var f = cljs.core.first(arglist__4826);
var arg1 = cljs.core.first(cljs.core.next(arglist__4826));
var arg2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4826)));
var arg3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4826))));
var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4826))));
return G__4823__delegate(f, arg1, arg2, arg3, more);
});
G__4823.cljs$lang$arity$variadic = G__4823__delegate;
return G__4823;
})()
;
partial = function(f,arg1,arg2,arg3,var_args){
var more = var_args;
switch(arguments.length){
case 2:
return partial__2.call(this,f,arg1);
case 3:
return partial__3.call(this,f,arg1,arg2);
case 4:
return partial__4.call(this,f,arg1,arg2,arg3);
default:
return partial__5.cljs$lang$arity$variadic(f,arg1,arg2,arg3, cljs.core.array_seq(arguments, 4));
}
throw('Invalid arity: ' + arguments.length);
};
partial.cljs$lang$maxFixedArity = 4;
partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
partial.cljs$lang$arity$2 = partial__2;
partial.cljs$lang$arity$3 = partial__3;
partial.cljs$lang$arity$4 = partial__4;
partial.cljs$lang$arity$variadic = partial__5.cljs$lang$arity$variadic;
return partial;
})()
;
/**
* Takes a function f, and returns a function that calls f, replacing
* a nil first argument to f with the supplied value x. Higher arity
* versions can replace arguments in the second and third
* positions (y, z). Note that the function f can take any number of
* arguments, not just the one(s) being nil-patched.
*/
cljs.core.fnil = (function() {
var fnil = null;
var fnil__2 = (function (f,x){
return (function() {
var G__4827 = null;
var G__4827__1 = (function (a){
return f.call(null,(((a == null))?x:a));
});
var G__4827__2 = (function (a,b){
return f.call(null,(((a == null))?x:a),b);
});
var G__4827__3 = (function (a,b,c){
return f.call(null,(((a == null))?x:a),b,c);
});
var G__4827__4 = (function() { 
var G__4828__delegate = function (a,b,c,ds){
return cljs.core.apply.call(null,f,(((a == null))?x:a),b,c,ds);
};
var G__4828 = function (a,b,c,var_args){
var ds = null;
if (goog.isDef(var_args)) {
  ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4828__delegate.call(this, a, b, c, ds);
};
G__4828.cljs$lang$maxFixedArity = 3;
G__4828.cljs$lang$applyTo = (function (arglist__4829){
var a = cljs.core.first(arglist__4829);
var b = cljs.core.first(cljs.core.next(arglist__4829));
var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4829)));
var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4829)));
return G__4828__delegate(a, b, c, ds);
});
G__4828.cljs$lang$arity$variadic = G__4828__delegate;
return G__4828;
})()
;
G__4827 = function(a,b,c,var_args){
var ds = var_args;
switch(arguments.length){
case 1:
return G__4827__1.call(this,a);
case 2:
return G__4827__2.call(this,a,b);
case 3:
return G__4827__3.call(this,a,b,c);
default:
return G__4827__4.cljs$lang$arity$variadic(a,b,c, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__4827.cljs$lang$maxFixedArity = 3;
G__4827.cljs$lang$applyTo = G__4827__4.cljs$lang$applyTo;
return G__4827;
})()
});
var fnil__3 = (function (f,x,y){
return (function() {
var G__4830 = null;
var G__4830__2 = (function (a,b){
return f.call(null,(((a == null))?x:a),(((b == null))?y:b));
});
var G__4830__3 = (function (a,b,c){
return f.call(null,(((a == null))?x:a),(((b == null))?y:b),c);
});
var G__4830__4 = (function() { 
var G__4831__delegate = function (a,b,c,ds){
return cljs.core.apply.call(null,f,(((a == null))?x:a),(((b == null))?y:b),c,ds);
};
var G__4831 = function (a,b,c,var_args){
var ds = null;
if (goog.isDef(var_args)) {
  ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4831__delegate.call(this, a, b, c, ds);
};
G__4831.cljs$lang$maxFixedArity = 3;
G__4831.cljs$lang$applyTo = (function (arglist__4832){
var a = cljs.core.first(arglist__4832);
var b = cljs.core.first(cljs.core.next(arglist__4832));
var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4832)));
var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4832)));
return G__4831__delegate(a, b, c, ds);
});
G__4831.cljs$lang$arity$variadic = G__4831__delegate;
return G__4831;
})()
;
G__4830 = function(a,b,c,var_args){
var ds = var_args;
switch(arguments.length){
case 2:
return G__4830__2.call(this,a,b);
case 3:
return G__4830__3.call(this,a,b,c);
default:
return G__4830__4.cljs$lang$arity$variadic(a,b,c, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__4830.cljs$lang$maxFixedArity = 3;
G__4830.cljs$lang$applyTo = G__4830__4.cljs$lang$applyTo;
return G__4830;
})()
});
var fnil__4 = (function (f,x,y,z){
return (function() {
var G__4833 = null;
var G__4833__2 = (function (a,b){
return f.call(null,(((a == null))?x:a),(((b == null))?y:b));
});
var G__4833__3 = (function (a,b,c){
return f.call(null,(((a == null))?x:a),(((b == null))?y:b),(((c == null))?z:c));
});
var G__4833__4 = (function() { 
var G__4834__delegate = function (a,b,c,ds){
return cljs.core.apply.call(null,f,(((a == null))?x:a),(((b == null))?y:b),(((c == null))?z:c),ds);
};
var G__4834 = function (a,b,c,var_args){
var ds = null;
if (goog.isDef(var_args)) {
  ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4834__delegate.call(this, a, b, c, ds);
};
G__4834.cljs$lang$maxFixedArity = 3;
G__4834.cljs$lang$applyTo = (function (arglist__4835){
var a = cljs.core.first(arglist__4835);
var b = cljs.core.first(cljs.core.next(arglist__4835));
var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4835)));
var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4835)));
return G__4834__delegate(a, b, c, ds);
});
G__4834.cljs$lang$arity$variadic = G__4834__delegate;
return G__4834;
})()
;
G__4833 = function(a,b,c,var_args){
var ds = var_args;
switch(arguments.length){
case 2:
return G__4833__2.call(this,a,b);
case 3:
return G__4833__3.call(this,a,b,c);
default:
return G__4833__4.cljs$lang$arity$variadic(a,b,c, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__4833.cljs$lang$maxFixedArity = 3;
G__4833.cljs$lang$applyTo = G__4833__4.cljs$lang$applyTo;
return G__4833;
})()
});
fnil = function(f,x,y,z){
switch(arguments.length){
case 2:
return fnil__2.call(this,f,x);
case 3:
return fnil__3.call(this,f,x,y);
case 4:
return fnil__4.call(this,f,x,y,z);
}
throw('Invalid arity: ' + arguments.length);
};
fnil.cljs$lang$arity$2 = fnil__2;
fnil.cljs$lang$arity$3 = fnil__3;
fnil.cljs$lang$arity$4 = fnil__4;
return fnil;
})()
;
/**
* Returns a lazy sequence consisting of the result of applying f to 0
* and the first item of coll, followed by applying f to 1 and the second
* item in coll, etc, until coll is exhausted. Thus function f should
* accept 2 arguments, index and item.
*/
cljs.core.map_indexed = (function map_indexed(f,coll){
var mapi__4838 = (function mpi(idx,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4836 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4836))
{var s__4837 = temp__3974__auto____4836;
return cljs.core.cons.call(null,f.call(null,idx,cljs.core.first.call(null,s__4837)),mpi.call(null,(idx + 1),cljs.core.rest.call(null,s__4837)));
} else
{return null;
}
})));
});
return mapi__4838.call(null,0,coll);
});
/**
* Returns a lazy sequence of the non-nil results of (f item). Note,
* this means false return values will be included.  f must be free of
* side-effects.
*/
cljs.core.keep = (function keep(f,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4839 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4839))
{var s__4840 = temp__3974__auto____4839;
var x__4841 = f.call(null,cljs.core.first.call(null,s__4840));
if((x__4841 == null))
{return keep.call(null,f,cljs.core.rest.call(null,s__4840));
} else
{return cljs.core.cons.call(null,x__4841,keep.call(null,f,cljs.core.rest.call(null,s__4840)));
}
} else
{return null;
}
})));
});
/**
* Returns a lazy sequence of the non-nil results of (f index item). Note,
* this means false return values will be included.  f must be free of
* side-effects.
*/
cljs.core.keep_indexed = (function keep_indexed(f,coll){
var keepi__4851 = (function kpi(idx,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4848 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4848))
{var s__4849 = temp__3974__auto____4848;
var x__4850 = f.call(null,idx,cljs.core.first.call(null,s__4849));
if((x__4850 == null))
{return kpi.call(null,(idx + 1),cljs.core.rest.call(null,s__4849));
} else
{return cljs.core.cons.call(null,x__4850,kpi.call(null,(idx + 1),cljs.core.rest.call(null,s__4849)));
}
} else
{return null;
}
})));
});
return keepi__4851.call(null,0,coll);
});
/**
* Takes a set of predicates and returns a function f that returns true if all of its
* composing predicates return a logical true value against all of its arguments, else it returns
* false. Note that f is short-circuiting in that it will stop execution on the first
* argument that triggers a logical false result against the original predicates.
* @param {...*} var_args
*/
cljs.core.every_pred = (function() {
var every_pred = null;
var every_pred__1 = (function (p){
return (function() {
var ep1 = null;
var ep1__0 = (function (){
return true;
});
var ep1__1 = (function (x){
return cljs.core.boolean$.call(null,p.call(null,x));
});
var ep1__2 = (function (x,y){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4858 = p.call(null,x);
if(cljs.core.truth_(and__3822__auto____4858))
{return p.call(null,y);
} else
{return and__3822__auto____4858;
}
})());
});
var ep1__3 = (function (x,y,z){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4859 = p.call(null,x);
if(cljs.core.truth_(and__3822__auto____4859))
{var and__3822__auto____4860 = p.call(null,y);
if(cljs.core.truth_(and__3822__auto____4860))
{return p.call(null,z);
} else
{return and__3822__auto____4860;
}
} else
{return and__3822__auto____4859;
}
})());
});
var ep1__4 = (function() { 
var G__4896__delegate = function (x,y,z,args){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4861 = ep1.call(null,x,y,z);
if(cljs.core.truth_(and__3822__auto____4861))
{return cljs.core.every_QMARK_.call(null,p,args);
} else
{return and__3822__auto____4861;
}
})());
};
var G__4896 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4896__delegate.call(this, x, y, z, args);
};
G__4896.cljs$lang$maxFixedArity = 3;
G__4896.cljs$lang$applyTo = (function (arglist__4897){
var x = cljs.core.first(arglist__4897);
var y = cljs.core.first(cljs.core.next(arglist__4897));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4897)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4897)));
return G__4896__delegate(x, y, z, args);
});
G__4896.cljs$lang$arity$variadic = G__4896__delegate;
return G__4896;
})()
;
ep1 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return ep1__0.call(this);
case 1:
return ep1__1.call(this,x);
case 2:
return ep1__2.call(this,x,y);
case 3:
return ep1__3.call(this,x,y,z);
default:
return ep1__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
ep1.cljs$lang$maxFixedArity = 3;
ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
ep1.cljs$lang$arity$0 = ep1__0;
ep1.cljs$lang$arity$1 = ep1__1;
ep1.cljs$lang$arity$2 = ep1__2;
ep1.cljs$lang$arity$3 = ep1__3;
ep1.cljs$lang$arity$variadic = ep1__4.cljs$lang$arity$variadic;
return ep1;
})()
});
var every_pred__2 = (function (p1,p2){
return (function() {
var ep2 = null;
var ep2__0 = (function (){
return true;
});
var ep2__1 = (function (x){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4862 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4862))
{return p2.call(null,x);
} else
{return and__3822__auto____4862;
}
})());
});
var ep2__2 = (function (x,y){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4863 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4863))
{var and__3822__auto____4864 = p1.call(null,y);
if(cljs.core.truth_(and__3822__auto____4864))
{var and__3822__auto____4865 = p2.call(null,x);
if(cljs.core.truth_(and__3822__auto____4865))
{return p2.call(null,y);
} else
{return and__3822__auto____4865;
}
} else
{return and__3822__auto____4864;
}
} else
{return and__3822__auto____4863;
}
})());
});
var ep2__3 = (function (x,y,z){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4866 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4866))
{var and__3822__auto____4867 = p1.call(null,y);
if(cljs.core.truth_(and__3822__auto____4867))
{var and__3822__auto____4868 = p1.call(null,z);
if(cljs.core.truth_(and__3822__auto____4868))
{var and__3822__auto____4869 = p2.call(null,x);
if(cljs.core.truth_(and__3822__auto____4869))
{var and__3822__auto____4870 = p2.call(null,y);
if(cljs.core.truth_(and__3822__auto____4870))
{return p2.call(null,z);
} else
{return and__3822__auto____4870;
}
} else
{return and__3822__auto____4869;
}
} else
{return and__3822__auto____4868;
}
} else
{return and__3822__auto____4867;
}
} else
{return and__3822__auto____4866;
}
})());
});
var ep2__4 = (function() { 
var G__4898__delegate = function (x,y,z,args){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4871 = ep2.call(null,x,y,z);
if(cljs.core.truth_(and__3822__auto____4871))
{return cljs.core.every_QMARK_.call(null,(function (p1__4842_SHARP_){
var and__3822__auto____4872 = p1.call(null,p1__4842_SHARP_);
if(cljs.core.truth_(and__3822__auto____4872))
{return p2.call(null,p1__4842_SHARP_);
} else
{return and__3822__auto____4872;
}
}),args);
} else
{return and__3822__auto____4871;
}
})());
};
var G__4898 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4898__delegate.call(this, x, y, z, args);
};
G__4898.cljs$lang$maxFixedArity = 3;
G__4898.cljs$lang$applyTo = (function (arglist__4899){
var x = cljs.core.first(arglist__4899);
var y = cljs.core.first(cljs.core.next(arglist__4899));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4899)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4899)));
return G__4898__delegate(x, y, z, args);
});
G__4898.cljs$lang$arity$variadic = G__4898__delegate;
return G__4898;
})()
;
ep2 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return ep2__0.call(this);
case 1:
return ep2__1.call(this,x);
case 2:
return ep2__2.call(this,x,y);
case 3:
return ep2__3.call(this,x,y,z);
default:
return ep2__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
ep2.cljs$lang$maxFixedArity = 3;
ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
ep2.cljs$lang$arity$0 = ep2__0;
ep2.cljs$lang$arity$1 = ep2__1;
ep2.cljs$lang$arity$2 = ep2__2;
ep2.cljs$lang$arity$3 = ep2__3;
ep2.cljs$lang$arity$variadic = ep2__4.cljs$lang$arity$variadic;
return ep2;
})()
});
var every_pred__3 = (function (p1,p2,p3){
return (function() {
var ep3 = null;
var ep3__0 = (function (){
return true;
});
var ep3__1 = (function (x){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4873 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4873))
{var and__3822__auto____4874 = p2.call(null,x);
if(cljs.core.truth_(and__3822__auto____4874))
{return p3.call(null,x);
} else
{return and__3822__auto____4874;
}
} else
{return and__3822__auto____4873;
}
})());
});
var ep3__2 = (function (x,y){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4875 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4875))
{var and__3822__auto____4876 = p2.call(null,x);
if(cljs.core.truth_(and__3822__auto____4876))
{var and__3822__auto____4877 = p3.call(null,x);
if(cljs.core.truth_(and__3822__auto____4877))
{var and__3822__auto____4878 = p1.call(null,y);
if(cljs.core.truth_(and__3822__auto____4878))
{var and__3822__auto____4879 = p2.call(null,y);
if(cljs.core.truth_(and__3822__auto____4879))
{return p3.call(null,y);
} else
{return and__3822__auto____4879;
}
} else
{return and__3822__auto____4878;
}
} else
{return and__3822__auto____4877;
}
} else
{return and__3822__auto____4876;
}
} else
{return and__3822__auto____4875;
}
})());
});
var ep3__3 = (function (x,y,z){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4880 = p1.call(null,x);
if(cljs.core.truth_(and__3822__auto____4880))
{var and__3822__auto____4881 = p2.call(null,x);
if(cljs.core.truth_(and__3822__auto____4881))
{var and__3822__auto____4882 = p3.call(null,x);
if(cljs.core.truth_(and__3822__auto____4882))
{var and__3822__auto____4883 = p1.call(null,y);
if(cljs.core.truth_(and__3822__auto____4883))
{var and__3822__auto____4884 = p2.call(null,y);
if(cljs.core.truth_(and__3822__auto____4884))
{var and__3822__auto____4885 = p3.call(null,y);
if(cljs.core.truth_(and__3822__auto____4885))
{var and__3822__auto____4886 = p1.call(null,z);
if(cljs.core.truth_(and__3822__auto____4886))
{var and__3822__auto____4887 = p2.call(null,z);
if(cljs.core.truth_(and__3822__auto____4887))
{return p3.call(null,z);
} else
{return and__3822__auto____4887;
}
} else
{return and__3822__auto____4886;
}
} else
{return and__3822__auto____4885;
}
} else
{return and__3822__auto____4884;
}
} else
{return and__3822__auto____4883;
}
} else
{return and__3822__auto____4882;
}
} else
{return and__3822__auto____4881;
}
} else
{return and__3822__auto____4880;
}
})());
});
var ep3__4 = (function() { 
var G__4900__delegate = function (x,y,z,args){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4888 = ep3.call(null,x,y,z);
if(cljs.core.truth_(and__3822__auto____4888))
{return cljs.core.every_QMARK_.call(null,(function (p1__4843_SHARP_){
var and__3822__auto____4889 = p1.call(null,p1__4843_SHARP_);
if(cljs.core.truth_(and__3822__auto____4889))
{var and__3822__auto____4890 = p2.call(null,p1__4843_SHARP_);
if(cljs.core.truth_(and__3822__auto____4890))
{return p3.call(null,p1__4843_SHARP_);
} else
{return and__3822__auto____4890;
}
} else
{return and__3822__auto____4889;
}
}),args);
} else
{return and__3822__auto____4888;
}
})());
};
var G__4900 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4900__delegate.call(this, x, y, z, args);
};
G__4900.cljs$lang$maxFixedArity = 3;
G__4900.cljs$lang$applyTo = (function (arglist__4901){
var x = cljs.core.first(arglist__4901);
var y = cljs.core.first(cljs.core.next(arglist__4901));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4901)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4901)));
return G__4900__delegate(x, y, z, args);
});
G__4900.cljs$lang$arity$variadic = G__4900__delegate;
return G__4900;
})()
;
ep3 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return ep3__0.call(this);
case 1:
return ep3__1.call(this,x);
case 2:
return ep3__2.call(this,x,y);
case 3:
return ep3__3.call(this,x,y,z);
default:
return ep3__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
ep3.cljs$lang$maxFixedArity = 3;
ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
ep3.cljs$lang$arity$0 = ep3__0;
ep3.cljs$lang$arity$1 = ep3__1;
ep3.cljs$lang$arity$2 = ep3__2;
ep3.cljs$lang$arity$3 = ep3__3;
ep3.cljs$lang$arity$variadic = ep3__4.cljs$lang$arity$variadic;
return ep3;
})()
});
var every_pred__4 = (function() { 
var G__4902__delegate = function (p1,p2,p3,ps){
var ps__4891 = cljs.core.list_STAR_.call(null,p1,p2,p3,ps);
return (function() {
var epn = null;
var epn__0 = (function (){
return true;
});
var epn__1 = (function (x){
return cljs.core.every_QMARK_.call(null,(function (p1__4844_SHARP_){
return p1__4844_SHARP_.call(null,x);
}),ps__4891);
});
var epn__2 = (function (x,y){
return cljs.core.every_QMARK_.call(null,(function (p1__4845_SHARP_){
var and__3822__auto____4892 = p1__4845_SHARP_.call(null,x);
if(cljs.core.truth_(and__3822__auto____4892))
{return p1__4845_SHARP_.call(null,y);
} else
{return and__3822__auto____4892;
}
}),ps__4891);
});
var epn__3 = (function (x,y,z){
return cljs.core.every_QMARK_.call(null,(function (p1__4846_SHARP_){
var and__3822__auto____4893 = p1__4846_SHARP_.call(null,x);
if(cljs.core.truth_(and__3822__auto____4893))
{var and__3822__auto____4894 = p1__4846_SHARP_.call(null,y);
if(cljs.core.truth_(and__3822__auto____4894))
{return p1__4846_SHARP_.call(null,z);
} else
{return and__3822__auto____4894;
}
} else
{return and__3822__auto____4893;
}
}),ps__4891);
});
var epn__4 = (function() { 
var G__4903__delegate = function (x,y,z,args){
return cljs.core.boolean$.call(null,(function (){var and__3822__auto____4895 = epn.call(null,x,y,z);
if(cljs.core.truth_(and__3822__auto____4895))
{return cljs.core.every_QMARK_.call(null,(function (p1__4847_SHARP_){
return cljs.core.every_QMARK_.call(null,p1__4847_SHARP_,args);
}),ps__4891);
} else
{return and__3822__auto____4895;
}
})());
};
var G__4903 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4903__delegate.call(this, x, y, z, args);
};
G__4903.cljs$lang$maxFixedArity = 3;
G__4903.cljs$lang$applyTo = (function (arglist__4904){
var x = cljs.core.first(arglist__4904);
var y = cljs.core.first(cljs.core.next(arglist__4904));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4904)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4904)));
return G__4903__delegate(x, y, z, args);
});
G__4903.cljs$lang$arity$variadic = G__4903__delegate;
return G__4903;
})()
;
epn = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return epn__0.call(this);
case 1:
return epn__1.call(this,x);
case 2:
return epn__2.call(this,x,y);
case 3:
return epn__3.call(this,x,y,z);
default:
return epn__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
epn.cljs$lang$maxFixedArity = 3;
epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
epn.cljs$lang$arity$0 = epn__0;
epn.cljs$lang$arity$1 = epn__1;
epn.cljs$lang$arity$2 = epn__2;
epn.cljs$lang$arity$3 = epn__3;
epn.cljs$lang$arity$variadic = epn__4.cljs$lang$arity$variadic;
return epn;
})()
};
var G__4902 = function (p1,p2,p3,var_args){
var ps = null;
if (goog.isDef(var_args)) {
  ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4902__delegate.call(this, p1, p2, p3, ps);
};
G__4902.cljs$lang$maxFixedArity = 3;
G__4902.cljs$lang$applyTo = (function (arglist__4905){
var p1 = cljs.core.first(arglist__4905);
var p2 = cljs.core.first(cljs.core.next(arglist__4905));
var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4905)));
var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4905)));
return G__4902__delegate(p1, p2, p3, ps);
});
G__4902.cljs$lang$arity$variadic = G__4902__delegate;
return G__4902;
})()
;
every_pred = function(p1,p2,p3,var_args){
var ps = var_args;
switch(arguments.length){
case 1:
return every_pred__1.call(this,p1);
case 2:
return every_pred__2.call(this,p1,p2);
case 3:
return every_pred__3.call(this,p1,p2,p3);
default:
return every_pred__4.cljs$lang$arity$variadic(p1,p2,p3, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
every_pred.cljs$lang$maxFixedArity = 3;
every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
every_pred.cljs$lang$arity$1 = every_pred__1;
every_pred.cljs$lang$arity$2 = every_pred__2;
every_pred.cljs$lang$arity$3 = every_pred__3;
every_pred.cljs$lang$arity$variadic = every_pred__4.cljs$lang$arity$variadic;
return every_pred;
})()
;
/**
* Takes a set of predicates and returns a function f that returns the first logical true value
* returned by one of its composing predicates against any of its arguments, else it returns
* logical false. Note that f is short-circuiting in that it will stop execution on the first
* argument that triggers a logical true result against the original predicates.
* @param {...*} var_args
*/
cljs.core.some_fn = (function() {
var some_fn = null;
var some_fn__1 = (function (p){
return (function() {
var sp1 = null;
var sp1__0 = (function (){
return null;
});
var sp1__1 = (function (x){
return p.call(null,x);
});
var sp1__2 = (function (x,y){
var or__3824__auto____4907 = p.call(null,x);
if(cljs.core.truth_(or__3824__auto____4907))
{return or__3824__auto____4907;
} else
{return p.call(null,y);
}
});
var sp1__3 = (function (x,y,z){
var or__3824__auto____4908 = p.call(null,x);
if(cljs.core.truth_(or__3824__auto____4908))
{return or__3824__auto____4908;
} else
{var or__3824__auto____4909 = p.call(null,y);
if(cljs.core.truth_(or__3824__auto____4909))
{return or__3824__auto____4909;
} else
{return p.call(null,z);
}
}
});
var sp1__4 = (function() { 
var G__4945__delegate = function (x,y,z,args){
var or__3824__auto____4910 = sp1.call(null,x,y,z);
if(cljs.core.truth_(or__3824__auto____4910))
{return or__3824__auto____4910;
} else
{return cljs.core.some.call(null,p,args);
}
};
var G__4945 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4945__delegate.call(this, x, y, z, args);
};
G__4945.cljs$lang$maxFixedArity = 3;
G__4945.cljs$lang$applyTo = (function (arglist__4946){
var x = cljs.core.first(arglist__4946);
var y = cljs.core.first(cljs.core.next(arglist__4946));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4946)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4946)));
return G__4945__delegate(x, y, z, args);
});
G__4945.cljs$lang$arity$variadic = G__4945__delegate;
return G__4945;
})()
;
sp1 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return sp1__0.call(this);
case 1:
return sp1__1.call(this,x);
case 2:
return sp1__2.call(this,x,y);
case 3:
return sp1__3.call(this,x,y,z);
default:
return sp1__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
sp1.cljs$lang$maxFixedArity = 3;
sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
sp1.cljs$lang$arity$0 = sp1__0;
sp1.cljs$lang$arity$1 = sp1__1;
sp1.cljs$lang$arity$2 = sp1__2;
sp1.cljs$lang$arity$3 = sp1__3;
sp1.cljs$lang$arity$variadic = sp1__4.cljs$lang$arity$variadic;
return sp1;
})()
});
var some_fn__2 = (function (p1,p2){
return (function() {
var sp2 = null;
var sp2__0 = (function (){
return null;
});
var sp2__1 = (function (x){
var or__3824__auto____4911 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4911))
{return or__3824__auto____4911;
} else
{return p2.call(null,x);
}
});
var sp2__2 = (function (x,y){
var or__3824__auto____4912 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4912))
{return or__3824__auto____4912;
} else
{var or__3824__auto____4913 = p1.call(null,y);
if(cljs.core.truth_(or__3824__auto____4913))
{return or__3824__auto____4913;
} else
{var or__3824__auto____4914 = p2.call(null,x);
if(cljs.core.truth_(or__3824__auto____4914))
{return or__3824__auto____4914;
} else
{return p2.call(null,y);
}
}
}
});
var sp2__3 = (function (x,y,z){
var or__3824__auto____4915 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4915))
{return or__3824__auto____4915;
} else
{var or__3824__auto____4916 = p1.call(null,y);
if(cljs.core.truth_(or__3824__auto____4916))
{return or__3824__auto____4916;
} else
{var or__3824__auto____4917 = p1.call(null,z);
if(cljs.core.truth_(or__3824__auto____4917))
{return or__3824__auto____4917;
} else
{var or__3824__auto____4918 = p2.call(null,x);
if(cljs.core.truth_(or__3824__auto____4918))
{return or__3824__auto____4918;
} else
{var or__3824__auto____4919 = p2.call(null,y);
if(cljs.core.truth_(or__3824__auto____4919))
{return or__3824__auto____4919;
} else
{return p2.call(null,z);
}
}
}
}
}
});
var sp2__4 = (function() { 
var G__4947__delegate = function (x,y,z,args){
var or__3824__auto____4920 = sp2.call(null,x,y,z);
if(cljs.core.truth_(or__3824__auto____4920))
{return or__3824__auto____4920;
} else
{return cljs.core.some.call(null,(function (p1__4852_SHARP_){
var or__3824__auto____4921 = p1.call(null,p1__4852_SHARP_);
if(cljs.core.truth_(or__3824__auto____4921))
{return or__3824__auto____4921;
} else
{return p2.call(null,p1__4852_SHARP_);
}
}),args);
}
};
var G__4947 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4947__delegate.call(this, x, y, z, args);
};
G__4947.cljs$lang$maxFixedArity = 3;
G__4947.cljs$lang$applyTo = (function (arglist__4948){
var x = cljs.core.first(arglist__4948);
var y = cljs.core.first(cljs.core.next(arglist__4948));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4948)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4948)));
return G__4947__delegate(x, y, z, args);
});
G__4947.cljs$lang$arity$variadic = G__4947__delegate;
return G__4947;
})()
;
sp2 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return sp2__0.call(this);
case 1:
return sp2__1.call(this,x);
case 2:
return sp2__2.call(this,x,y);
case 3:
return sp2__3.call(this,x,y,z);
default:
return sp2__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
sp2.cljs$lang$maxFixedArity = 3;
sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
sp2.cljs$lang$arity$0 = sp2__0;
sp2.cljs$lang$arity$1 = sp2__1;
sp2.cljs$lang$arity$2 = sp2__2;
sp2.cljs$lang$arity$3 = sp2__3;
sp2.cljs$lang$arity$variadic = sp2__4.cljs$lang$arity$variadic;
return sp2;
})()
});
var some_fn__3 = (function (p1,p2,p3){
return (function() {
var sp3 = null;
var sp3__0 = (function (){
return null;
});
var sp3__1 = (function (x){
var or__3824__auto____4922 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4922))
{return or__3824__auto____4922;
} else
{var or__3824__auto____4923 = p2.call(null,x);
if(cljs.core.truth_(or__3824__auto____4923))
{return or__3824__auto____4923;
} else
{return p3.call(null,x);
}
}
});
var sp3__2 = (function (x,y){
var or__3824__auto____4924 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4924))
{return or__3824__auto____4924;
} else
{var or__3824__auto____4925 = p2.call(null,x);
if(cljs.core.truth_(or__3824__auto____4925))
{return or__3824__auto____4925;
} else
{var or__3824__auto____4926 = p3.call(null,x);
if(cljs.core.truth_(or__3824__auto____4926))
{return or__3824__auto____4926;
} else
{var or__3824__auto____4927 = p1.call(null,y);
if(cljs.core.truth_(or__3824__auto____4927))
{return or__3824__auto____4927;
} else
{var or__3824__auto____4928 = p2.call(null,y);
if(cljs.core.truth_(or__3824__auto____4928))
{return or__3824__auto____4928;
} else
{return p3.call(null,y);
}
}
}
}
}
});
var sp3__3 = (function (x,y,z){
var or__3824__auto____4929 = p1.call(null,x);
if(cljs.core.truth_(or__3824__auto____4929))
{return or__3824__auto____4929;
} else
{var or__3824__auto____4930 = p2.call(null,x);
if(cljs.core.truth_(or__3824__auto____4930))
{return or__3824__auto____4930;
} else
{var or__3824__auto____4931 = p3.call(null,x);
if(cljs.core.truth_(or__3824__auto____4931))
{return or__3824__auto____4931;
} else
{var or__3824__auto____4932 = p1.call(null,y);
if(cljs.core.truth_(or__3824__auto____4932))
{return or__3824__auto____4932;
} else
{var or__3824__auto____4933 = p2.call(null,y);
if(cljs.core.truth_(or__3824__auto____4933))
{return or__3824__auto____4933;
} else
{var or__3824__auto____4934 = p3.call(null,y);
if(cljs.core.truth_(or__3824__auto____4934))
{return or__3824__auto____4934;
} else
{var or__3824__auto____4935 = p1.call(null,z);
if(cljs.core.truth_(or__3824__auto____4935))
{return or__3824__auto____4935;
} else
{var or__3824__auto____4936 = p2.call(null,z);
if(cljs.core.truth_(or__3824__auto____4936))
{return or__3824__auto____4936;
} else
{return p3.call(null,z);
}
}
}
}
}
}
}
}
});
var sp3__4 = (function() { 
var G__4949__delegate = function (x,y,z,args){
var or__3824__auto____4937 = sp3.call(null,x,y,z);
if(cljs.core.truth_(or__3824__auto____4937))
{return or__3824__auto____4937;
} else
{return cljs.core.some.call(null,(function (p1__4853_SHARP_){
var or__3824__auto____4938 = p1.call(null,p1__4853_SHARP_);
if(cljs.core.truth_(or__3824__auto____4938))
{return or__3824__auto____4938;
} else
{var or__3824__auto____4939 = p2.call(null,p1__4853_SHARP_);
if(cljs.core.truth_(or__3824__auto____4939))
{return or__3824__auto____4939;
} else
{return p3.call(null,p1__4853_SHARP_);
}
}
}),args);
}
};
var G__4949 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4949__delegate.call(this, x, y, z, args);
};
G__4949.cljs$lang$maxFixedArity = 3;
G__4949.cljs$lang$applyTo = (function (arglist__4950){
var x = cljs.core.first(arglist__4950);
var y = cljs.core.first(cljs.core.next(arglist__4950));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4950)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4950)));
return G__4949__delegate(x, y, z, args);
});
G__4949.cljs$lang$arity$variadic = G__4949__delegate;
return G__4949;
})()
;
sp3 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return sp3__0.call(this);
case 1:
return sp3__1.call(this,x);
case 2:
return sp3__2.call(this,x,y);
case 3:
return sp3__3.call(this,x,y,z);
default:
return sp3__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
sp3.cljs$lang$maxFixedArity = 3;
sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
sp3.cljs$lang$arity$0 = sp3__0;
sp3.cljs$lang$arity$1 = sp3__1;
sp3.cljs$lang$arity$2 = sp3__2;
sp3.cljs$lang$arity$3 = sp3__3;
sp3.cljs$lang$arity$variadic = sp3__4.cljs$lang$arity$variadic;
return sp3;
})()
});
var some_fn__4 = (function() { 
var G__4951__delegate = function (p1,p2,p3,ps){
var ps__4940 = cljs.core.list_STAR_.call(null,p1,p2,p3,ps);
return (function() {
var spn = null;
var spn__0 = (function (){
return null;
});
var spn__1 = (function (x){
return cljs.core.some.call(null,(function (p1__4854_SHARP_){
return p1__4854_SHARP_.call(null,x);
}),ps__4940);
});
var spn__2 = (function (x,y){
return cljs.core.some.call(null,(function (p1__4855_SHARP_){
var or__3824__auto____4941 = p1__4855_SHARP_.call(null,x);
if(cljs.core.truth_(or__3824__auto____4941))
{return or__3824__auto____4941;
} else
{return p1__4855_SHARP_.call(null,y);
}
}),ps__4940);
});
var spn__3 = (function (x,y,z){
return cljs.core.some.call(null,(function (p1__4856_SHARP_){
var or__3824__auto____4942 = p1__4856_SHARP_.call(null,x);
if(cljs.core.truth_(or__3824__auto____4942))
{return or__3824__auto____4942;
} else
{var or__3824__auto____4943 = p1__4856_SHARP_.call(null,y);
if(cljs.core.truth_(or__3824__auto____4943))
{return or__3824__auto____4943;
} else
{return p1__4856_SHARP_.call(null,z);
}
}
}),ps__4940);
});
var spn__4 = (function() { 
var G__4952__delegate = function (x,y,z,args){
var or__3824__auto____4944 = spn.call(null,x,y,z);
if(cljs.core.truth_(or__3824__auto____4944))
{return or__3824__auto____4944;
} else
{return cljs.core.some.call(null,(function (p1__4857_SHARP_){
return cljs.core.some.call(null,p1__4857_SHARP_,args);
}),ps__4940);
}
};
var G__4952 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4952__delegate.call(this, x, y, z, args);
};
G__4952.cljs$lang$maxFixedArity = 3;
G__4952.cljs$lang$applyTo = (function (arglist__4953){
var x = cljs.core.first(arglist__4953);
var y = cljs.core.first(cljs.core.next(arglist__4953));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4953)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4953)));
return G__4952__delegate(x, y, z, args);
});
G__4952.cljs$lang$arity$variadic = G__4952__delegate;
return G__4952;
})()
;
spn = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return spn__0.call(this);
case 1:
return spn__1.call(this,x);
case 2:
return spn__2.call(this,x,y);
case 3:
return spn__3.call(this,x,y,z);
default:
return spn__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
spn.cljs$lang$maxFixedArity = 3;
spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
spn.cljs$lang$arity$0 = spn__0;
spn.cljs$lang$arity$1 = spn__1;
spn.cljs$lang$arity$2 = spn__2;
spn.cljs$lang$arity$3 = spn__3;
spn.cljs$lang$arity$variadic = spn__4.cljs$lang$arity$variadic;
return spn;
})()
};
var G__4951 = function (p1,p2,p3,var_args){
var ps = null;
if (goog.isDef(var_args)) {
  ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__4951__delegate.call(this, p1, p2, p3, ps);
};
G__4951.cljs$lang$maxFixedArity = 3;
G__4951.cljs$lang$applyTo = (function (arglist__4954){
var p1 = cljs.core.first(arglist__4954);
var p2 = cljs.core.first(cljs.core.next(arglist__4954));
var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4954)));
var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4954)));
return G__4951__delegate(p1, p2, p3, ps);
});
G__4951.cljs$lang$arity$variadic = G__4951__delegate;
return G__4951;
})()
;
some_fn = function(p1,p2,p3,var_args){
var ps = var_args;
switch(arguments.length){
case 1:
return some_fn__1.call(this,p1);
case 2:
return some_fn__2.call(this,p1,p2);
case 3:
return some_fn__3.call(this,p1,p2,p3);
default:
return some_fn__4.cljs$lang$arity$variadic(p1,p2,p3, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
some_fn.cljs$lang$maxFixedArity = 3;
some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
some_fn.cljs$lang$arity$1 = some_fn__1;
some_fn.cljs$lang$arity$2 = some_fn__2;
some_fn.cljs$lang$arity$3 = some_fn__3;
some_fn.cljs$lang$arity$variadic = some_fn__4.cljs$lang$arity$variadic;
return some_fn;
})()
;
/**
* Returns a lazy sequence consisting of the result of applying f to the
* set of first items of each coll, followed by applying f to the set
* of second items in each coll, until any one of the colls is
* exhausted.  Any remaining items in other colls are ignored. Function
* f should accept number-of-colls arguments.
* @param {...*} var_args
*/
cljs.core.map = (function() {
var map = null;
var map__2 = (function (f,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4955 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4955))
{var s__4956 = temp__3974__auto____4955;
return cljs.core.cons.call(null,f.call(null,cljs.core.first.call(null,s__4956)),map.call(null,f,cljs.core.rest.call(null,s__4956)));
} else
{return null;
}
})));
});
var map__3 = (function (f,c1,c2){
return (new cljs.core.LazySeq(null,false,(function (){
var s1__4957 = cljs.core.seq.call(null,c1);
var s2__4958 = cljs.core.seq.call(null,c2);
if(cljs.core.truth_((function (){var and__3822__auto____4959 = s1__4957;
if(cljs.core.truth_(and__3822__auto____4959))
{return s2__4958;
} else
{return and__3822__auto____4959;
}
})()))
{return cljs.core.cons.call(null,f.call(null,cljs.core.first.call(null,s1__4957),cljs.core.first.call(null,s2__4958)),map.call(null,f,cljs.core.rest.call(null,s1__4957),cljs.core.rest.call(null,s2__4958)));
} else
{return null;
}
})));
});
var map__4 = (function (f,c1,c2,c3){
return (new cljs.core.LazySeq(null,false,(function (){
var s1__4960 = cljs.core.seq.call(null,c1);
var s2__4961 = cljs.core.seq.call(null,c2);
var s3__4962 = cljs.core.seq.call(null,c3);
if(cljs.core.truth_((function (){var and__3822__auto____4963 = s1__4960;
if(cljs.core.truth_(and__3822__auto____4963))
{var and__3822__auto____4964 = s2__4961;
if(cljs.core.truth_(and__3822__auto____4964))
{return s3__4962;
} else
{return and__3822__auto____4964;
}
} else
{return and__3822__auto____4963;
}
})()))
{return cljs.core.cons.call(null,f.call(null,cljs.core.first.call(null,s1__4960),cljs.core.first.call(null,s2__4961),cljs.core.first.call(null,s3__4962)),map.call(null,f,cljs.core.rest.call(null,s1__4960),cljs.core.rest.call(null,s2__4961),cljs.core.rest.call(null,s3__4962)));
} else
{return null;
}
})));
});
var map__5 = (function() { 
var G__4967__delegate = function (f,c1,c2,c3,colls){
var step__4966 = (function step(cs){
return (new cljs.core.LazySeq(null,false,(function (){
var ss__4965 = map.call(null,cljs.core.seq,cs);
if(cljs.core.every_QMARK_.call(null,cljs.core.identity,ss__4965))
{return cljs.core.cons.call(null,map.call(null,cljs.core.first,ss__4965),step.call(null,map.call(null,cljs.core.rest,ss__4965)));
} else
{return null;
}
})));
});
return map.call(null,(function (p1__4906_SHARP_){
return cljs.core.apply.call(null,f,p1__4906_SHARP_);
}),step__4966.call(null,cljs.core.conj.call(null,colls,c3,c2,c1)));
};
var G__4967 = function (f,c1,c2,c3,var_args){
var colls = null;
if (goog.isDef(var_args)) {
  colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4),0);
} 
return G__4967__delegate.call(this, f, c1, c2, c3, colls);
};
G__4967.cljs$lang$maxFixedArity = 4;
G__4967.cljs$lang$applyTo = (function (arglist__4968){
var f = cljs.core.first(arglist__4968);
var c1 = cljs.core.first(cljs.core.next(arglist__4968));
var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4968)));
var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4968))));
var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4968))));
return G__4967__delegate(f, c1, c2, c3, colls);
});
G__4967.cljs$lang$arity$variadic = G__4967__delegate;
return G__4967;
})()
;
map = function(f,c1,c2,c3,var_args){
var colls = var_args;
switch(arguments.length){
case 2:
return map__2.call(this,f,c1);
case 3:
return map__3.call(this,f,c1,c2);
case 4:
return map__4.call(this,f,c1,c2,c3);
default:
return map__5.cljs$lang$arity$variadic(f,c1,c2,c3, cljs.core.array_seq(arguments, 4));
}
throw('Invalid arity: ' + arguments.length);
};
map.cljs$lang$maxFixedArity = 4;
map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
map.cljs$lang$arity$2 = map__2;
map.cljs$lang$arity$3 = map__3;
map.cljs$lang$arity$4 = map__4;
map.cljs$lang$arity$variadic = map__5.cljs$lang$arity$variadic;
return map;
})()
;
/**
* Returns a lazy sequence of the first n items in coll, or all items if
* there are fewer than n.
*/
cljs.core.take = (function take(n,coll){
return (new cljs.core.LazySeq(null,false,(function (){
if((n > 0))
{var temp__3974__auto____4969 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4969))
{var s__4970 = temp__3974__auto____4969;
return cljs.core.cons.call(null,cljs.core.first.call(null,s__4970),take.call(null,(n - 1),cljs.core.rest.call(null,s__4970)));
} else
{return null;
}
} else
{return null;
}
})));
});
/**
* Returns a lazy sequence of all but the first n items in coll.
*/
cljs.core.drop = (function drop(n,coll){
var step__4973 = (function (n,coll){
while(true){
var s__4971 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_((function (){var and__3822__auto____4972 = (n > 0);
if(and__3822__auto____4972)
{return s__4971;
} else
{return and__3822__auto____4972;
}
})()))
{{
var G__4974 = (n - 1);
var G__4975 = cljs.core.rest.call(null,s__4971);
n = G__4974;
coll = G__4975;
continue;
}
} else
{return s__4971;
}
break;
}
});
return (new cljs.core.LazySeq(null,false,(function (){
return step__4973.call(null,n,coll);
})));
});
/**
* Return a lazy sequence of all but the last n (default 1) items in coll
*/
cljs.core.drop_last = (function() {
var drop_last = null;
var drop_last__1 = (function (s){
return drop_last.call(null,1,s);
});
var drop_last__2 = (function (n,s){
return cljs.core.map.call(null,(function (x,_){
return x;
}),s,cljs.core.drop.call(null,n,s));
});
drop_last = function(n,s){
switch(arguments.length){
case 1:
return drop_last__1.call(this,n);
case 2:
return drop_last__2.call(this,n,s);
}
throw('Invalid arity: ' + arguments.length);
};
drop_last.cljs$lang$arity$1 = drop_last__1;
drop_last.cljs$lang$arity$2 = drop_last__2;
return drop_last;
})()
;
/**
* Returns a seq of the last n items in coll.  Depending on the type
* of coll may be no better than linear time.  For vectors, see also subvec.
*/
cljs.core.take_last = (function take_last(n,coll){
var s__4976 = cljs.core.seq.call(null,coll);
var lead__4977 = cljs.core.seq.call(null,cljs.core.drop.call(null,n,coll));
while(true){
if(cljs.core.truth_(lead__4977))
{{
var G__4978 = cljs.core.next.call(null,s__4976);
var G__4979 = cljs.core.next.call(null,lead__4977);
s__4976 = G__4978;
lead__4977 = G__4979;
continue;
}
} else
{return s__4976;
}
break;
}
});
/**
* Returns a lazy sequence of the items in coll starting from the first
* item for which (pred item) returns nil.
*/
cljs.core.drop_while = (function drop_while(pred,coll){
var step__4982 = (function (pred,coll){
while(true){
var s__4980 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_((function (){var and__3822__auto____4981 = s__4980;
if(cljs.core.truth_(and__3822__auto____4981))
{return pred.call(null,cljs.core.first.call(null,s__4980));
} else
{return and__3822__auto____4981;
}
})()))
{{
var G__4983 = pred;
var G__4984 = cljs.core.rest.call(null,s__4980);
pred = G__4983;
coll = G__4984;
continue;
}
} else
{return s__4980;
}
break;
}
});
return (new cljs.core.LazySeq(null,false,(function (){
return step__4982.call(null,pred,coll);
})));
});
/**
* Returns a lazy (infinite!) sequence of repetitions of the items in coll.
*/
cljs.core.cycle = (function cycle(coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4985 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4985))
{var s__4986 = temp__3974__auto____4985;
return cljs.core.concat.call(null,s__4986,cycle.call(null,s__4986));
} else
{return null;
}
})));
});
/**
* Returns a vector of [(take n coll) (drop n coll)]
*/
cljs.core.split_at = (function split_at(n,coll){
return cljs.core.PersistentVector.fromArray([cljs.core.take.call(null,n,coll),cljs.core.drop.call(null,n,coll)]);
});
/**
* Returns a lazy (infinite!, or length n if supplied) sequence of xs.
*/
cljs.core.repeat = (function() {
var repeat = null;
var repeat__1 = (function (x){
return (new cljs.core.LazySeq(null,false,(function (){
return cljs.core.cons.call(null,x,repeat.call(null,x));
})));
});
var repeat__2 = (function (n,x){
return cljs.core.take.call(null,n,repeat.call(null,x));
});
repeat = function(n,x){
switch(arguments.length){
case 1:
return repeat__1.call(this,n);
case 2:
return repeat__2.call(this,n,x);
}
throw('Invalid arity: ' + arguments.length);
};
repeat.cljs$lang$arity$1 = repeat__1;
repeat.cljs$lang$arity$2 = repeat__2;
return repeat;
})()
;
/**
* Returns a lazy seq of n xs.
*/
cljs.core.replicate = (function replicate(n,x){
return cljs.core.take.call(null,n,cljs.core.repeat.call(null,x));
});
/**
* Takes a function of no args, presumably with side effects, and
* returns an infinite (or length n if supplied) lazy sequence of calls
* to it
*/
cljs.core.repeatedly = (function() {
var repeatedly = null;
var repeatedly__1 = (function (f){
return (new cljs.core.LazySeq(null,false,(function (){
return cljs.core.cons.call(null,f.call(null),repeatedly.call(null,f));
})));
});
var repeatedly__2 = (function (n,f){
return cljs.core.take.call(null,n,repeatedly.call(null,f));
});
repeatedly = function(n,f){
switch(arguments.length){
case 1:
return repeatedly__1.call(this,n);
case 2:
return repeatedly__2.call(this,n,f);
}
throw('Invalid arity: ' + arguments.length);
};
repeatedly.cljs$lang$arity$1 = repeatedly__1;
repeatedly.cljs$lang$arity$2 = repeatedly__2;
return repeatedly;
})()
;
/**
* Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
*/
cljs.core.iterate = (function iterate(f,x){
return cljs.core.cons.call(null,x,(new cljs.core.LazySeq(null,false,(function (){
return iterate.call(null,f,f.call(null,x));
}))));
});
/**
* Returns a lazy seq of the first item in each coll, then the second etc.
* @param {...*} var_args
*/
cljs.core.interleave = (function() {
var interleave = null;
var interleave__2 = (function (c1,c2){
return (new cljs.core.LazySeq(null,false,(function (){
var s1__4987 = cljs.core.seq.call(null,c1);
var s2__4988 = cljs.core.seq.call(null,c2);
if(cljs.core.truth_((function (){var and__3822__auto____4989 = s1__4987;
if(cljs.core.truth_(and__3822__auto____4989))
{return s2__4988;
} else
{return and__3822__auto____4989;
}
})()))
{return cljs.core.cons.call(null,cljs.core.first.call(null,s1__4987),cljs.core.cons.call(null,cljs.core.first.call(null,s2__4988),interleave.call(null,cljs.core.rest.call(null,s1__4987),cljs.core.rest.call(null,s2__4988))));
} else
{return null;
}
})));
});
var interleave__3 = (function() { 
var G__4991__delegate = function (c1,c2,colls){
return (new cljs.core.LazySeq(null,false,(function (){
var ss__4990 = cljs.core.map.call(null,cljs.core.seq,cljs.core.conj.call(null,colls,c2,c1));
if(cljs.core.every_QMARK_.call(null,cljs.core.identity,ss__4990))
{return cljs.core.concat.call(null,cljs.core.map.call(null,cljs.core.first,ss__4990),cljs.core.apply.call(null,interleave,cljs.core.map.call(null,cljs.core.rest,ss__4990)));
} else
{return null;
}
})));
};
var G__4991 = function (c1,c2,var_args){
var colls = null;
if (goog.isDef(var_args)) {
  colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4991__delegate.call(this, c1, c2, colls);
};
G__4991.cljs$lang$maxFixedArity = 2;
G__4991.cljs$lang$applyTo = (function (arglist__4992){
var c1 = cljs.core.first(arglist__4992);
var c2 = cljs.core.first(cljs.core.next(arglist__4992));
var colls = cljs.core.rest(cljs.core.next(arglist__4992));
return G__4991__delegate(c1, c2, colls);
});
G__4991.cljs$lang$arity$variadic = G__4991__delegate;
return G__4991;
})()
;
interleave = function(c1,c2,var_args){
var colls = var_args;
switch(arguments.length){
case 2:
return interleave__2.call(this,c1,c2);
default:
return interleave__3.cljs$lang$arity$variadic(c1,c2, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
interleave.cljs$lang$maxFixedArity = 2;
interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
interleave.cljs$lang$arity$2 = interleave__2;
interleave.cljs$lang$arity$variadic = interleave__3.cljs$lang$arity$variadic;
return interleave;
})()
;
/**
* Returns a lazy seq of the elements of coll separated by sep
*/
cljs.core.interpose = (function interpose(sep,coll){
return cljs.core.drop.call(null,1,cljs.core.interleave.call(null,cljs.core.repeat.call(null,sep),coll));
});
/**
* Take a collection of collections, and return a lazy seq
* of items from the inner collection
*/
cljs.core.flatten1 = (function flatten1(colls){
var cat__4995 = (function cat(coll,colls){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3971__auto____4993 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3971__auto____4993))
{var coll__4994 = temp__3971__auto____4993;
return cljs.core.cons.call(null,cljs.core.first.call(null,coll__4994),cat.call(null,cljs.core.rest.call(null,coll__4994),colls));
} else
{if(cljs.core.truth_(cljs.core.seq.call(null,colls)))
{return cat.call(null,cljs.core.first.call(null,colls),cljs.core.rest.call(null,colls));
} else
{return null;
}
}
})));
});
return cat__4995.call(null,null,colls);
});
/**
* Returns the result of applying concat to the result of applying map
* to f and colls.  Thus function f should return a collection.
* @param {...*} var_args
*/
cljs.core.mapcat = (function() {
var mapcat = null;
var mapcat__2 = (function (f,coll){
return cljs.core.flatten1.call(null,cljs.core.map.call(null,f,coll));
});
var mapcat__3 = (function() { 
var G__4996__delegate = function (f,coll,colls){
return cljs.core.flatten1.call(null,cljs.core.apply.call(null,cljs.core.map,f,coll,colls));
};
var G__4996 = function (f,coll,var_args){
var colls = null;
if (goog.isDef(var_args)) {
  colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return G__4996__delegate.call(this, f, coll, colls);
};
G__4996.cljs$lang$maxFixedArity = 2;
G__4996.cljs$lang$applyTo = (function (arglist__4997){
var f = cljs.core.first(arglist__4997);
var coll = cljs.core.first(cljs.core.next(arglist__4997));
var colls = cljs.core.rest(cljs.core.next(arglist__4997));
return G__4996__delegate(f, coll, colls);
});
G__4996.cljs$lang$arity$variadic = G__4996__delegate;
return G__4996;
})()
;
mapcat = function(f,coll,var_args){
var colls = var_args;
switch(arguments.length){
case 2:
return mapcat__2.call(this,f,coll);
default:
return mapcat__3.cljs$lang$arity$variadic(f,coll, cljs.core.array_seq(arguments, 2));
}
throw('Invalid arity: ' + arguments.length);
};
mapcat.cljs$lang$maxFixedArity = 2;
mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
mapcat.cljs$lang$arity$2 = mapcat__2;
mapcat.cljs$lang$arity$variadic = mapcat__3.cljs$lang$arity$variadic;
return mapcat;
})()
;
/**
* Returns a lazy sequence of the items in coll for which
* (pred item) returns true. pred must be free of side-effects.
*/
cljs.core.filter = (function filter(pred,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____4998 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____4998))
{var s__4999 = temp__3974__auto____4998;
var f__5000 = cljs.core.first.call(null,s__4999);
var r__5001 = cljs.core.rest.call(null,s__4999);
if(cljs.core.truth_(pred.call(null,f__5000)))
{return cljs.core.cons.call(null,f__5000,filter.call(null,pred,r__5001));
} else
{return filter.call(null,pred,r__5001);
}
} else
{return null;
}
})));
});
/**
* Returns a lazy sequence of the items in coll for which
* (pred item) returns false. pred must be free of side-effects.
*/
cljs.core.remove = (function remove(pred,coll){
return cljs.core.filter.call(null,cljs.core.complement.call(null,pred),coll);
});
/**
* Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
* branch? must be a fn of one arg that returns true if passed a node
* that can have children (but may not).  children must be a fn of one
* arg that returns a sequence of the children. Will only be called on
* nodes for which branch? returns true. Root is the root node of the
* tree.
*/
cljs.core.tree_seq = (function tree_seq(branch_QMARK_,children,root){
var walk__5003 = (function walk(node){
return (new cljs.core.LazySeq(null,false,(function (){
return cljs.core.cons.call(null,node,(cljs.core.truth_(branch_QMARK_.call(null,node))?cljs.core.mapcat.call(null,walk,children.call(null,node)):null));
})));
});
return walk__5003.call(null,root);
});
/**
* Takes any nested combination of sequential things (lists, vectors,
* etc.) and returns their contents as a single, flat sequence.
* (flatten nil) returns nil.
*/
cljs.core.flatten = (function flatten(x){
return cljs.core.filter.call(null,(function (p1__5002_SHARP_){
return cljs.core.not.call(null,cljs.core.sequential_QMARK_.call(null,p1__5002_SHARP_));
}),cljs.core.rest.call(null,cljs.core.tree_seq.call(null,cljs.core.sequential_QMARK_,cljs.core.seq,x)));
});
/**
* Returns a new coll consisting of to-coll with all of the items of
* from-coll conjoined.
*/
cljs.core.into = (function into(to,from){
if((function (){var G__5004__5005 = to;
if((G__5004__5005 != null))
{if((function (){var or__3824__auto____5006 = (G__5004__5005.cljs$lang$protocol_mask$partition0$ & 2147483648);
if(or__3824__auto____5006)
{return or__3824__auto____5006;
} else
{return G__5004__5005.cljs$core$IEditableCollection$;
}
})())
{return true;
} else
{if((!G__5004__5005.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IEditableCollection,G__5004__5005);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IEditableCollection,G__5004__5005);
}
})())
{return cljs.core.persistent_BANG_.call(null,cljs.core.reduce.call(null,cljs.core._conj_BANG_,cljs.core.transient$.call(null,to),from));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,to,from);
}
});
/**
* Returns a vector consisting of the result of applying f to the
* set of first items of each coll, followed by applying f to the set
* of second items in each coll, until any one of the colls is
* exhausted.  Any remaining items in other colls are ignored. Function
* f should accept number-of-colls arguments.
* @param {...*} var_args
*/
cljs.core.mapv = (function() {
var mapv = null;
var mapv__2 = (function (f,coll){
return cljs.core.persistent_BANG_.call(null,cljs.core.reduce.call(null,(function (v,o){
return cljs.core.conj_BANG_.call(null,v,f.call(null,o));
}),cljs.core.transient$.call(null,cljs.core.PersistentVector.fromArray([])),coll));
});
var mapv__3 = (function (f,c1,c2){
return cljs.core.into.call(null,cljs.core.PersistentVector.fromArray([]),cljs.core.map.call(null,f,c1,c2));
});
var mapv__4 = (function (f,c1,c2,c3){
return cljs.core.into.call(null,cljs.core.PersistentVector.fromArray([]),cljs.core.map.call(null,f,c1,c2,c3));
});
var mapv__5 = (function() { 
var G__5007__delegate = function (f,c1,c2,c3,colls){
return cljs.core.into.call(null,cljs.core.PersistentVector.fromArray([]),cljs.core.apply.call(null,cljs.core.map,f,c1,c2,c3,colls));
};
var G__5007 = function (f,c1,c2,c3,var_args){
var colls = null;
if (goog.isDef(var_args)) {
  colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4),0);
} 
return G__5007__delegate.call(this, f, c1, c2, c3, colls);
};
G__5007.cljs$lang$maxFixedArity = 4;
G__5007.cljs$lang$applyTo = (function (arglist__5008){
var f = cljs.core.first(arglist__5008);
var c1 = cljs.core.first(cljs.core.next(arglist__5008));
var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5008)));
var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5008))));
var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5008))));
return G__5007__delegate(f, c1, c2, c3, colls);
});
G__5007.cljs$lang$arity$variadic = G__5007__delegate;
return G__5007;
})()
;
mapv = function(f,c1,c2,c3,var_args){
var colls = var_args;
switch(arguments.length){
case 2:
return mapv__2.call(this,f,c1);
case 3:
return mapv__3.call(this,f,c1,c2);
case 4:
return mapv__4.call(this,f,c1,c2,c3);
default:
return mapv__5.cljs$lang$arity$variadic(f,c1,c2,c3, cljs.core.array_seq(arguments, 4));
}
throw('Invalid arity: ' + arguments.length);
};
mapv.cljs$lang$maxFixedArity = 4;
mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
mapv.cljs$lang$arity$2 = mapv__2;
mapv.cljs$lang$arity$3 = mapv__3;
mapv.cljs$lang$arity$4 = mapv__4;
mapv.cljs$lang$arity$variadic = mapv__5.cljs$lang$arity$variadic;
return mapv;
})()
;
/**
* Returns a vector of the items in coll for which
* (pred item) returns true. pred must be free of side-effects.
*/
cljs.core.filterv = (function filterv(pred,coll){
return cljs.core.persistent_BANG_.call(null,cljs.core.reduce.call(null,(function (v,o){
if(cljs.core.truth_(pred.call(null,o)))
{return cljs.core.conj_BANG_.call(null,v,o);
} else
{return v;
}
}),cljs.core.transient$.call(null,cljs.core.PersistentVector.fromArray([])),coll));
});
/**
* Returns a lazy sequence of lists of n items each, at offsets step
* apart. If step is not supplied, defaults to n, i.e. the partitions
* do not overlap. If a pad collection is supplied, use its elements as
* necessary to complete last partition upto n items. In case there are
* not enough padding elements, return a partition with less than n items.
*/
cljs.core.partition = (function() {
var partition = null;
var partition__2 = (function (n,coll){
return partition.call(null,n,n,coll);
});
var partition__3 = (function (n,step,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____5009 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____5009))
{var s__5010 = temp__3974__auto____5009;
var p__5011 = cljs.core.take.call(null,n,s__5010);
if((n === cljs.core.count.call(null,p__5011)))
{return cljs.core.cons.call(null,p__5011,partition.call(null,n,step,cljs.core.drop.call(null,step,s__5010)));
} else
{return null;
}
} else
{return null;
}
})));
});
var partition__4 = (function (n,step,pad,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____5012 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____5012))
{var s__5013 = temp__3974__auto____5012;
var p__5014 = cljs.core.take.call(null,n,s__5013);
if((n === cljs.core.count.call(null,p__5014)))
{return cljs.core.cons.call(null,p__5014,partition.call(null,n,step,pad,cljs.core.drop.call(null,step,s__5013)));
} else
{return cljs.core.list.call(null,cljs.core.take.call(null,n,cljs.core.concat.call(null,p__5014,pad)));
}
} else
{return null;
}
})));
});
partition = function(n,step,pad,coll){
switch(arguments.length){
case 2:
return partition__2.call(this,n,step);
case 3:
return partition__3.call(this,n,step,pad);
case 4:
return partition__4.call(this,n,step,pad,coll);
}
throw('Invalid arity: ' + arguments.length);
};
partition.cljs$lang$arity$2 = partition__2;
partition.cljs$lang$arity$3 = partition__3;
partition.cljs$lang$arity$4 = partition__4;
return partition;
})()
;
/**
* Returns the value in a nested associative structure,
* where ks is a sequence of ke(ys. Returns nil if the key is not present,
* or the not-found value if supplied.
*/
cljs.core.get_in = (function() {
var get_in = null;
var get_in__2 = (function (m,ks){
return cljs.core.reduce.call(null,cljs.core.get,m,ks);
});
var get_in__3 = (function (m,ks,not_found){
var sentinel__5015 = cljs.core.lookup_sentinel;
var m__5016 = m;
var ks__5017 = cljs.core.seq.call(null,ks);
while(true){
if(cljs.core.truth_(ks__5017))
{var m__5018 = cljs.core.get.call(null,m__5016,cljs.core.first.call(null,ks__5017),sentinel__5015);
if((sentinel__5015 === m__5018))
{return not_found;
} else
{{
var G__5019 = sentinel__5015;
var G__5020 = m__5018;
var G__5021 = cljs.core.next.call(null,ks__5017);
sentinel__5015 = G__5019;
m__5016 = G__5020;
ks__5017 = G__5021;
continue;
}
}
} else
{return m__5016;
}
break;
}
});
get_in = function(m,ks,not_found){
switch(arguments.length){
case 2:
return get_in__2.call(this,m,ks);
case 3:
return get_in__3.call(this,m,ks,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
get_in.cljs$lang$arity$2 = get_in__2;
get_in.cljs$lang$arity$3 = get_in__3;
return get_in;
})()
;
/**
* Associates a value in a nested associative structure, where ks is a
* sequence of keys and v is the new value and returns a new nested structure.
* If any levels do not exist, hash-maps will be created.
*/
cljs.core.assoc_in = (function assoc_in(m,p__5022,v){
var vec__5023__5024 = p__5022;
var k__5025 = cljs.core.nth.call(null,vec__5023__5024,0,null);
var ks__5026 = cljs.core.nthnext.call(null,vec__5023__5024,1);
if(cljs.core.truth_(ks__5026))
{return cljs.core.assoc.call(null,m,k__5025,assoc_in.call(null,cljs.core.get.call(null,m,k__5025),ks__5026,v));
} else
{return cljs.core.assoc.call(null,m,k__5025,v);
}
});
/**
* 'Updates' a value in a nested associative structure, where ks is a
* sequence of keys and f is a function that will take the old value
* and any supplied args and return the new value, and returns a new
* nested structure.  If any levels do not exist, hash-maps will be
* created.
* @param {...*} var_args
*/
cljs.core.update_in = (function() { 
var update_in__delegate = function (m,p__5027,f,args){
var vec__5028__5029 = p__5027;
var k__5030 = cljs.core.nth.call(null,vec__5028__5029,0,null);
var ks__5031 = cljs.core.nthnext.call(null,vec__5028__5029,1);
if(cljs.core.truth_(ks__5031))
{return cljs.core.assoc.call(null,m,k__5030,cljs.core.apply.call(null,update_in,cljs.core.get.call(null,m,k__5030),ks__5031,f,args));
} else
{return cljs.core.assoc.call(null,m,k__5030,cljs.core.apply.call(null,f,cljs.core.get.call(null,m,k__5030),args));
}
};
var update_in = function (m,p__5027,f,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return update_in__delegate.call(this, m, p__5027, f, args);
};
update_in.cljs$lang$maxFixedArity = 3;
update_in.cljs$lang$applyTo = (function (arglist__5032){
var m = cljs.core.first(arglist__5032);
var p__5027 = cljs.core.first(cljs.core.next(arglist__5032));
var f = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5032)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5032)));
return update_in__delegate(m, p__5027, f, args);
});
update_in.cljs$lang$arity$variadic = update_in__delegate;
return update_in;
})()
;

/**
* @constructor
*/
cljs.core.Vector = (function (meta,array,__hash){
this.meta = meta;
this.array = array;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16200095;
})
cljs.core.Vector.cljs$lang$type = true;
cljs.core.Vector.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Vector");
});
cljs.core.Vector.prototype.cljs$core$IHash$ = true;
cljs.core.Vector.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5037 = this;
var h__264__auto____5038 = this__5037.__hash;
if((h__264__auto____5038 != null))
{return h__264__auto____5038;
} else
{var h__264__auto____5039 = cljs.core.hash_coll.call(null,coll);
this__5037.__hash = h__264__auto____5039;
return h__264__auto____5039;
}
});
cljs.core.Vector.prototype.cljs$core$ILookup$ = true;
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5040 = this;
return cljs.core._nth.call(null,coll,k,null);
});
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5041 = this;
return cljs.core._nth.call(null,coll,k,not_found);
});
cljs.core.Vector.prototype.cljs$core$IAssociative$ = true;
cljs.core.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5042 = this;
var new_array__5043 = cljs.core.aclone.call(null,this__5042.array);
(new_array__5043[k] = v);
return (new cljs.core.Vector(this__5042.meta,new_array__5043,null));
});
cljs.core.Vector.prototype.cljs$core$IFn$ = true;
cljs.core.Vector.prototype.call = (function() {
var G__5072 = null;
var G__5072__2 = (function (tsym5035,k){
var this__5044 = this;
var tsym5035__5045 = this;
var coll__5046 = tsym5035__5045;
return cljs.core._lookup.call(null,coll__5046,k);
});
var G__5072__3 = (function (tsym5036,k,not_found){
var this__5047 = this;
var tsym5036__5048 = this;
var coll__5049 = tsym5036__5048;
return cljs.core._lookup.call(null,coll__5049,k,not_found);
});
G__5072 = function(tsym5036,k,not_found){
switch(arguments.length){
case 2:
return G__5072__2.call(this,tsym5036,k);
case 3:
return G__5072__3.call(this,tsym5036,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5072;
})()
;
cljs.core.Vector.prototype.apply = (function (tsym5033,args5034){
return tsym5033.call.apply(tsym5033,[tsym5033].concat(cljs.core.aclone.call(null,args5034)));
});
cljs.core.Vector.prototype.cljs$core$ISequential$ = true;
cljs.core.Vector.prototype.cljs$core$ICollection$ = true;
cljs.core.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5050 = this;
var new_array__5051 = cljs.core.aclone.call(null,this__5050.array);
new_array__5051.push(o);
return (new cljs.core.Vector(this__5050.meta,new_array__5051,null));
});
cljs.core.Vector.prototype.toString = (function (){
var this__5052 = this;
var this$__5053 = this;
return cljs.core.pr_str.call(null,this$__5053);
});
cljs.core.Vector.prototype.cljs$core$IReduce$ = true;
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (v,f){
var this__5054 = this;
return cljs.core.ci_reduce.call(null,this__5054.array,f);
});
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (v,f,start){
var this__5055 = this;
return cljs.core.ci_reduce.call(null,this__5055.array,f,start);
});
cljs.core.Vector.prototype.cljs$core$ISeqable$ = true;
cljs.core.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5056 = this;
if((this__5056.array.length > 0))
{var vector_seq__5057 = (function vector_seq(i){
return (new cljs.core.LazySeq(null,false,(function (){
if((i < this__5056.array.length))
{return cljs.core.cons.call(null,(this__5056.array[i]),vector_seq.call(null,(i + 1)));
} else
{return null;
}
})));
});
return vector_seq__5057.call(null,0);
} else
{return null;
}
});
cljs.core.Vector.prototype.cljs$core$ICounted$ = true;
cljs.core.Vector.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5058 = this;
return this__5058.array.length;
});
cljs.core.Vector.prototype.cljs$core$IStack$ = true;
cljs.core.Vector.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__5059 = this;
var count__5060 = this__5059.array.length;
if((count__5060 > 0))
{return (this__5059.array[(count__5060 - 1)]);
} else
{return null;
}
});
cljs.core.Vector.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__5061 = this;
if((this__5061.array.length > 0))
{var new_array__5062 = cljs.core.aclone.call(null,this__5061.array);
new_array__5062.pop();
return (new cljs.core.Vector(this__5061.meta,new_array__5062,null));
} else
{throw (new Error("Can't pop empty vector"));
}
});
cljs.core.Vector.prototype.cljs$core$IVector$ = true;
cljs.core.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (coll,n,val){
var this__5063 = this;
return cljs.core._assoc.call(null,coll,n,val);
});
cljs.core.Vector.prototype.cljs$core$IEquiv$ = true;
cljs.core.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5064 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.Vector.prototype.cljs$core$IWithMeta$ = true;
cljs.core.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5065 = this;
return (new cljs.core.Vector(meta,this__5065.array,this__5065.__hash));
});
cljs.core.Vector.prototype.cljs$core$IMeta$ = true;
cljs.core.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5066 = this;
return this__5066.meta;
});
cljs.core.Vector.prototype.cljs$core$IIndexed$ = true;
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
var this__5068 = this;
if((function (){var and__3822__auto____5069 = (0 <= n);
if(and__3822__auto____5069)
{return (n < this__5068.array.length);
} else
{return and__3822__auto____5069;
}
})())
{return (this__5068.array[n]);
} else
{return null;
}
});
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
var this__5070 = this;
if((function (){var and__3822__auto____5071 = (0 <= n);
if(and__3822__auto____5071)
{return (n < this__5070.array.length);
} else
{return and__3822__auto____5071;
}
})())
{return (this__5070.array[n]);
} else
{return not_found;
}
});
cljs.core.Vector.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5067 = this;
return cljs.core.with_meta.call(null,cljs.core.Vector.EMPTY,this__5067.meta);
});
cljs.core.Vector;
cljs.core.Vector.EMPTY = (new cljs.core.Vector(null,[],0));
cljs.core.Vector.fromArray = (function (xs){
return (new cljs.core.Vector(null,xs,null));
});

/**
* @constructor
*/
cljs.core.VectorNode = (function (edit,arr){
this.edit = edit;
this.arr = arr;
})
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorPrSeq = (function (this__355__auto__){
return cljs.core.list.call(null,"cljs.core.VectorNode");
});
cljs.core.VectorNode;
cljs.core.pv_fresh_node = (function pv_fresh_node(edit){
return (new cljs.core.VectorNode(edit,cljs.core.make_array.call(null,32)));
});
cljs.core.pv_aget = (function pv_aget(node,idx){
return (node.arr[idx]);
});
cljs.core.pv_aset = (function pv_aset(node,idx,val){
return (node.arr[idx] = val);
});
cljs.core.pv_clone_node = (function pv_clone_node(node){
return (new cljs.core.VectorNode(node.edit,cljs.core.aclone.call(null,node.arr)));
});
cljs.core.tail_off = (function tail_off(pv){
var cnt__5073 = pv.cnt;
if((cnt__5073 < 32))
{return 0;
} else
{return (((cnt__5073 - 1) >>> 5) << 5);
}
});
cljs.core.new_path = (function new_path(edit,level,node){
var ll__5074 = level;
var ret__5075 = node;
while(true){
if((ll__5074 === 0))
{return ret__5075;
} else
{var embed__5076 = ret__5075;
var r__5077 = cljs.core.pv_fresh_node.call(null,edit);
var ___5078 = cljs.core.pv_aset.call(null,r__5077,0,embed__5076);
{
var G__5079 = (ll__5074 - 5);
var G__5080 = r__5077;
ll__5074 = G__5079;
ret__5075 = G__5080;
continue;
}
}
break;
}
});
cljs.core.push_tail = (function push_tail(pv,level,parent,tailnode){
var ret__5081 = cljs.core.pv_clone_node.call(null,parent);
var subidx__5082 = (((pv.cnt - 1) >>> level) & 31);
if((5 === level))
{cljs.core.pv_aset.call(null,ret__5081,subidx__5082,tailnode);
return ret__5081;
} else
{var temp__3971__auto____5083 = cljs.core.pv_aget.call(null,parent,subidx__5082);
if(cljs.core.truth_(temp__3971__auto____5083))
{var child__5084 = temp__3971__auto____5083;
var node_to_insert__5085 = push_tail.call(null,pv,(level - 5),child__5084,tailnode);
cljs.core.pv_aset.call(null,ret__5081,subidx__5082,node_to_insert__5085);
return ret__5081;
} else
{var node_to_insert__5086 = cljs.core.new_path.call(null,null,(level - 5),tailnode);
cljs.core.pv_aset.call(null,ret__5081,subidx__5082,node_to_insert__5086);
return ret__5081;
}
}
});
cljs.core.array_for = (function array_for(pv,i){
if((function (){var and__3822__auto____5087 = (0 <= i);
if(and__3822__auto____5087)
{return (i < pv.cnt);
} else
{return and__3822__auto____5087;
}
})())
{if((i >= cljs.core.tail_off.call(null,pv)))
{return pv.tail;
} else
{var node__5088 = pv.root;
var level__5089 = pv.shift;
while(true){
if((level__5089 > 0))
{{
var G__5090 = cljs.core.pv_aget.call(null,node__5088,((i >>> level__5089) & 31));
var G__5091 = (level__5089 - 5);
node__5088 = G__5090;
level__5089 = G__5091;
continue;
}
} else
{return node__5088.arr;
}
break;
}
}
} else
{throw (new Error([cljs.core.str("No item "),cljs.core.str(i),cljs.core.str(" in vector of length "),cljs.core.str(pv.cnt)].join('')));
}
});
cljs.core.do_assoc = (function do_assoc(pv,level,node,i,val){
var ret__5092 = cljs.core.pv_clone_node.call(null,node);
if((level === 0))
{cljs.core.pv_aset.call(null,ret__5092,(i & 31),val);
return ret__5092;
} else
{var subidx__5093 = ((i >>> level) & 31);
cljs.core.pv_aset.call(null,ret__5092,subidx__5093,do_assoc.call(null,pv,(level - 5),cljs.core.pv_aget.call(null,node,subidx__5093),i,val));
return ret__5092;
}
});
cljs.core.pop_tail = (function pop_tail(pv,level,node){
var subidx__5094 = (((pv.cnt - 2) >>> level) & 31);
if((level > 5))
{var new_child__5095 = pop_tail.call(null,pv,(level - 5),cljs.core.pv_aget.call(null,node,subidx__5094));
if((function (){var and__3822__auto____5096 = (new_child__5095 == null);
if(and__3822__auto____5096)
{return (subidx__5094 === 0);
} else
{return and__3822__auto____5096;
}
})())
{return null;
} else
{var ret__5097 = cljs.core.pv_clone_node.call(null,node);
cljs.core.pv_aset.call(null,ret__5097,subidx__5094,new_child__5095);
return ret__5097;
}
} else
{if((subidx__5094 === 0))
{return null;
} else
{if("\uFDD0'else")
{var ret__5098 = cljs.core.pv_clone_node.call(null,node);
cljs.core.pv_aset.call(null,ret__5098,subidx__5094,null);
return ret__5098;
} else
{return null;
}
}
}
});
void 0;
void 0;
void 0;
void 0;
void 0;
void 0;
cljs.core.vector_seq = (function vector_seq(v,offset){
var c__5099 = cljs.core._count.call(null,v);
if((c__5099 > 0))
{if((void 0 === cljs.core.t5100))
{
/**
* @constructor
*/
cljs.core.t5100 = (function (c,offset,v,vector_seq,__meta__289__auto__){
this.c = c;
this.offset = offset;
this.v = v;
this.vector_seq = vector_seq;
this.__meta__289__auto__ = __meta__289__auto__;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 282263648;
})
cljs.core.t5100.cljs$lang$type = true;
cljs.core.t5100.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.t5100");
});
cljs.core.t5100.prototype.cljs$core$ISeqable$ = true;
cljs.core.t5100.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (vseq){
var this__5101 = this;
return vseq;
});
cljs.core.t5100.prototype.cljs$core$ISeq$ = true;
cljs.core.t5100.prototype.cljs$core$ISeq$_first$arity$1 = (function (_){
var this__5102 = this;
return cljs.core._nth.call(null,this__5102.v,this__5102.offset);
});
cljs.core.t5100.prototype.cljs$core$ISeq$_rest$arity$1 = (function (_){
var this__5103 = this;
var offset__5104 = (this__5103.offset + 1);
if((offset__5104 < this__5103.c))
{return this__5103.vector_seq.call(null,this__5103.v,offset__5104);
} else
{return cljs.core.List.EMPTY;
}
});
cljs.core.t5100.prototype.cljs$core$ASeq$ = true;
cljs.core.t5100.prototype.cljs$core$IEquiv$ = true;
cljs.core.t5100.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (vseq,other){
var this__5105 = this;
return cljs.core.equiv_sequential.call(null,vseq,other);
});
cljs.core.t5100.prototype.cljs$core$ISequential$ = true;
cljs.core.t5100.prototype.cljs$core$IPrintable$ = true;
cljs.core.t5100.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (vseq,opts){
var this__5106 = this;
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,vseq);
});
cljs.core.t5100.prototype.cljs$core$IMeta$ = true;
cljs.core.t5100.prototype.cljs$core$IMeta$_meta$arity$1 = (function (___290__auto__){
var this__5107 = this;
return this__5107.__meta__289__auto__;
});
cljs.core.t5100.prototype.cljs$core$IWithMeta$ = true;
cljs.core.t5100.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (___290__auto__,__meta__289__auto__){
var this__5108 = this;
return (new cljs.core.t5100(this__5108.c,this__5108.offset,this__5108.v,this__5108.vector_seq,__meta__289__auto__));
});
cljs.core.t5100;
} else
{}
return (new cljs.core.t5100(c__5099,offset,v,vector_seq,null));
} else
{return null;
}
});

/**
* @constructor
*/
cljs.core.PersistentVector = (function (meta,cnt,shift,root,tail,__hash){
this.meta = meta;
this.cnt = cnt;
this.shift = shift;
this.root = root;
this.tail = tail;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 2164209055;
})
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentVector");
});
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
var this__5113 = this;
return (new cljs.core.TransientVector(this__5113.cnt,this__5113.shift,cljs.core.tv_editable_root.call(null,this__5113.root),cljs.core.tv_editable_tail.call(null,this__5113.tail)));
});
cljs.core.PersistentVector.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5114 = this;
var h__264__auto____5115 = this__5114.__hash;
if((h__264__auto____5115 != null))
{return h__264__auto____5115;
} else
{var h__264__auto____5116 = cljs.core.hash_coll.call(null,coll);
this__5114.__hash = h__264__auto____5116;
return h__264__auto____5116;
}
});
cljs.core.PersistentVector.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5117 = this;
return cljs.core._nth.call(null,coll,k,null);
});
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5118 = this;
return cljs.core._nth.call(null,coll,k,not_found);
});
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5119 = this;
if((function (){var and__3822__auto____5120 = (0 <= k);
if(and__3822__auto____5120)
{return (k < this__5119.cnt);
} else
{return and__3822__auto____5120;
}
})())
{if((cljs.core.tail_off.call(null,coll) <= k))
{var new_tail__5121 = cljs.core.aclone.call(null,this__5119.tail);
(new_tail__5121[(k & 31)] = v);
return (new cljs.core.PersistentVector(this__5119.meta,this__5119.cnt,this__5119.shift,this__5119.root,new_tail__5121,null));
} else
{return (new cljs.core.PersistentVector(this__5119.meta,this__5119.cnt,this__5119.shift,cljs.core.do_assoc.call(null,coll,this__5119.shift,this__5119.root,k,v),this__5119.tail,null));
}
} else
{if((k === this__5119.cnt))
{return cljs.core._conj.call(null,coll,v);
} else
{if("\uFDD0'else")
{throw (new Error([cljs.core.str("Index "),cljs.core.str(k),cljs.core.str(" out of bounds  [0,"),cljs.core.str(this__5119.cnt),cljs.core.str("]")].join('')));
} else
{return null;
}
}
}
});
cljs.core.PersistentVector.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentVector.prototype.call = (function() {
var G__5166 = null;
var G__5166__2 = (function (tsym5111,k){
var this__5122 = this;
var tsym5111__5123 = this;
var coll__5124 = tsym5111__5123;
return cljs.core._lookup.call(null,coll__5124,k);
});
var G__5166__3 = (function (tsym5112,k,not_found){
var this__5125 = this;
var tsym5112__5126 = this;
var coll__5127 = tsym5112__5126;
return cljs.core._lookup.call(null,coll__5127,k,not_found);
});
G__5166 = function(tsym5112,k,not_found){
switch(arguments.length){
case 2:
return G__5166__2.call(this,tsym5112,k);
case 3:
return G__5166__3.call(this,tsym5112,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5166;
})()
;
cljs.core.PersistentVector.prototype.apply = (function (tsym5109,args5110){
return tsym5109.call.apply(tsym5109,[tsym5109].concat(cljs.core.aclone.call(null,args5110)));
});
cljs.core.PersistentVector.prototype.cljs$core$ISequential$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (v,f,init){
var this__5128 = this;
var step_init__5129 = [0,init];
var i__5130 = 0;
while(true){
if((i__5130 < this__5128.cnt))
{var arr__5131 = cljs.core.array_for.call(null,v,i__5130);
var len__5132 = arr__5131.length;
var init__5136 = (function (){var j__5133 = 0;
var init__5134 = (step_init__5129[1]);
while(true){
if((j__5133 < len__5132))
{var init__5135 = f.call(null,init__5134,(j__5133 + i__5130),(arr__5131[j__5133]));
if(cljs.core.reduced_QMARK_.call(null,init__5135))
{return init__5135;
} else
{{
var G__5167 = (j__5133 + 1);
var G__5168 = init__5135;
j__5133 = G__5167;
init__5134 = G__5168;
continue;
}
}
} else
{(step_init__5129[0] = len__5132);
(step_init__5129[1] = init__5134);
return init__5134;
}
break;
}
})();
if(cljs.core.reduced_QMARK_.call(null,init__5136))
{return cljs.core.deref.call(null,init__5136);
} else
{{
var G__5169 = (i__5130 + (step_init__5129[0]));
i__5130 = G__5169;
continue;
}
}
} else
{return (step_init__5129[1]);
}
break;
}
});
cljs.core.PersistentVector.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5137 = this;
if(((this__5137.cnt - cljs.core.tail_off.call(null,coll)) < 32))
{var new_tail__5138 = cljs.core.aclone.call(null,this__5137.tail);
new_tail__5138.push(o);
return (new cljs.core.PersistentVector(this__5137.meta,(this__5137.cnt + 1),this__5137.shift,this__5137.root,new_tail__5138,null));
} else
{var root_overflow_QMARK___5139 = ((this__5137.cnt >>> 5) > (1 << this__5137.shift));
var new_shift__5140 = ((root_overflow_QMARK___5139)?(this__5137.shift + 5):this__5137.shift);
var new_root__5142 = ((root_overflow_QMARK___5139)?(function (){var n_r__5141 = cljs.core.pv_fresh_node.call(null,null);
cljs.core.pv_aset.call(null,n_r__5141,0,this__5137.root);
cljs.core.pv_aset.call(null,n_r__5141,1,cljs.core.new_path.call(null,null,this__5137.shift,(new cljs.core.VectorNode(null,this__5137.tail))));
return n_r__5141;
})():cljs.core.push_tail.call(null,coll,this__5137.shift,this__5137.root,(new cljs.core.VectorNode(null,this__5137.tail))));
return (new cljs.core.PersistentVector(this__5137.meta,(this__5137.cnt + 1),new_shift__5140,new_root__5142,[o],null));
}
});
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (coll){
var this__5143 = this;
return cljs.core._nth.call(null,coll,0);
});
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (coll){
var this__5144 = this;
return cljs.core._nth.call(null,coll,1);
});
cljs.core.PersistentVector.prototype.toString = (function (){
var this__5145 = this;
var this$__5146 = this;
return cljs.core.pr_str.call(null,this$__5146);
});
cljs.core.PersistentVector.prototype.cljs$core$IReduce$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (v,f){
var this__5147 = this;
return cljs.core.ci_reduce.call(null,v,f);
});
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (v,f,start){
var this__5148 = this;
return cljs.core.ci_reduce.call(null,v,f,start);
});
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5149 = this;
return cljs.core.vector_seq.call(null,coll,0);
});
cljs.core.PersistentVector.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5150 = this;
return this__5150.cnt;
});
cljs.core.PersistentVector.prototype.cljs$core$IStack$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__5151 = this;
if((this__5151.cnt > 0))
{return cljs.core._nth.call(null,coll,(this__5151.cnt - 1));
} else
{return null;
}
});
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__5152 = this;
if((this__5152.cnt === 0))
{throw (new Error("Can't pop empty vector"));
} else
{if((1 === this__5152.cnt))
{return cljs.core._with_meta.call(null,cljs.core.PersistentVector.EMPTY,this__5152.meta);
} else
{if((1 < (this__5152.cnt - cljs.core.tail_off.call(null,coll))))
{return (new cljs.core.PersistentVector(this__5152.meta,(this__5152.cnt - 1),this__5152.shift,this__5152.root,this__5152.tail.slice(0,-1),null));
} else
{if("\uFDD0'else")
{var new_tail__5153 = cljs.core.array_for.call(null,coll,(this__5152.cnt - 2));
var nr__5154 = cljs.core.pop_tail.call(null,coll,this__5152.shift,this__5152.root);
var new_root__5155 = (((nr__5154 == null))?cljs.core.PersistentVector.EMPTY_NODE:nr__5154);
var cnt_1__5156 = (this__5152.cnt - 1);
if((function (){var and__3822__auto____5157 = (5 < this__5152.shift);
if(and__3822__auto____5157)
{return (cljs.core.pv_aget.call(null,new_root__5155,1) == null);
} else
{return and__3822__auto____5157;
}
})())
{return (new cljs.core.PersistentVector(this__5152.meta,cnt_1__5156,(this__5152.shift - 5),cljs.core.pv_aget.call(null,new_root__5155,0),new_tail__5153,null));
} else
{return (new cljs.core.PersistentVector(this__5152.meta,cnt_1__5156,this__5152.shift,new_root__5155,new_tail__5153,null));
}
} else
{return null;
}
}
}
}
});
cljs.core.PersistentVector.prototype.cljs$core$IVector$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (coll,n,val){
var this__5159 = this;
return cljs.core._assoc.call(null,coll,n,val);
});
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5160 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5161 = this;
return (new cljs.core.PersistentVector(meta,this__5161.cnt,this__5161.shift,this__5161.root,this__5161.tail,this__5161.__hash));
});
cljs.core.PersistentVector.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5162 = this;
return this__5162.meta;
});
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
var this__5163 = this;
return (cljs.core.array_for.call(null,coll,n)[(n & 31)]);
});
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
var this__5164 = this;
if((function (){var and__3822__auto____5165 = (0 <= n);
if(and__3822__auto____5165)
{return (n < this__5164.cnt);
} else
{return and__3822__auto____5165;
}
})())
{return cljs.core._nth.call(null,coll,n);
} else
{return not_found;
}
});
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5158 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentVector.EMPTY,this__5158.meta);
});
cljs.core.PersistentVector;
cljs.core.PersistentVector.EMPTY_NODE = cljs.core.pv_fresh_node.call(null,null);
cljs.core.PersistentVector.EMPTY = (new cljs.core.PersistentVector(null,0,5,cljs.core.PersistentVector.EMPTY_NODE,[],0));
cljs.core.PersistentVector.fromArray = (function (xs){
var xs__5170 = cljs.core.seq.call(null,xs);
var out__5171 = cljs.core.transient$.call(null,cljs.core.PersistentVector.EMPTY);
while(true){
if(cljs.core.truth_(xs__5170))
{{
var G__5172 = cljs.core.next.call(null,xs__5170);
var G__5173 = cljs.core.conj_BANG_.call(null,out__5171,cljs.core.first.call(null,xs__5170));
xs__5170 = G__5172;
out__5171 = G__5173;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,out__5171);
}
break;
}
});
cljs.core.vec = (function vec(coll){
return cljs.core.reduce.call(null,cljs.core.conj,cljs.core.PersistentVector.EMPTY,coll);
});
/**
* @param {...*} var_args
*/
cljs.core.vector = (function() { 
var vector__delegate = function (args){
return cljs.core.vec.call(null,args);
};
var vector = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return vector__delegate.call(this, args);
};
vector.cljs$lang$maxFixedArity = 0;
vector.cljs$lang$applyTo = (function (arglist__5174){
var args = cljs.core.seq(arglist__5174);;
return vector__delegate(args);
});
vector.cljs$lang$arity$variadic = vector__delegate;
return vector;
})()
;

/**
* @constructor
*/
cljs.core.Subvec = (function (meta,v,start,end,__hash){
this.meta = meta;
this.v = v;
this.start = start;
this.end = end;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16200095;
})
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Subvec");
});
cljs.core.Subvec.prototype.cljs$core$IHash$ = true;
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5179 = this;
var h__264__auto____5180 = this__5179.__hash;
if((h__264__auto____5180 != null))
{return h__264__auto____5180;
} else
{var h__264__auto____5181 = cljs.core.hash_coll.call(null,coll);
this__5179.__hash = h__264__auto____5181;
return h__264__auto____5181;
}
});
cljs.core.Subvec.prototype.cljs$core$ILookup$ = true;
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5182 = this;
return cljs.core._nth.call(null,coll,k,null);
});
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5183 = this;
return cljs.core._nth.call(null,coll,k,not_found);
});
cljs.core.Subvec.prototype.cljs$core$IAssociative$ = true;
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,key,val){
var this__5184 = this;
var v_pos__5185 = (this__5184.start + key);
return (new cljs.core.Subvec(this__5184.meta,cljs.core._assoc.call(null,this__5184.v,v_pos__5185,val),this__5184.start,((this__5184.end > (v_pos__5185 + 1)) ? this__5184.end : (v_pos__5185 + 1)),null));
});
cljs.core.Subvec.prototype.cljs$core$IFn$ = true;
cljs.core.Subvec.prototype.call = (function() {
var G__5209 = null;
var G__5209__2 = (function (tsym5177,k){
var this__5186 = this;
var tsym5177__5187 = this;
var coll__5188 = tsym5177__5187;
return cljs.core._lookup.call(null,coll__5188,k);
});
var G__5209__3 = (function (tsym5178,k,not_found){
var this__5189 = this;
var tsym5178__5190 = this;
var coll__5191 = tsym5178__5190;
return cljs.core._lookup.call(null,coll__5191,k,not_found);
});
G__5209 = function(tsym5178,k,not_found){
switch(arguments.length){
case 2:
return G__5209__2.call(this,tsym5178,k);
case 3:
return G__5209__3.call(this,tsym5178,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5209;
})()
;
cljs.core.Subvec.prototype.apply = (function (tsym5175,args5176){
return tsym5175.call.apply(tsym5175,[tsym5175].concat(cljs.core.aclone.call(null,args5176)));
});
cljs.core.Subvec.prototype.cljs$core$ISequential$ = true;
cljs.core.Subvec.prototype.cljs$core$ICollection$ = true;
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5192 = this;
return (new cljs.core.Subvec(this__5192.meta,cljs.core._assoc_n.call(null,this__5192.v,this__5192.end,o),this__5192.start,(this__5192.end + 1),null));
});
cljs.core.Subvec.prototype.toString = (function (){
var this__5193 = this;
var this$__5194 = this;
return cljs.core.pr_str.call(null,this$__5194);
});
cljs.core.Subvec.prototype.cljs$core$IReduce$ = true;
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
var this__5195 = this;
return cljs.core.ci_reduce.call(null,coll,f);
});
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
var this__5196 = this;
return cljs.core.ci_reduce.call(null,coll,f,start);
});
cljs.core.Subvec.prototype.cljs$core$ISeqable$ = true;
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5197 = this;
var subvec_seq__5198 = (function subvec_seq(i){
if((i === this__5197.end))
{return null;
} else
{return cljs.core.cons.call(null,cljs.core._nth.call(null,this__5197.v,i),(new cljs.core.LazySeq(null,false,(function (){
return subvec_seq.call(null,(i + 1));
}))));
}
});
return subvec_seq__5198.call(null,this__5197.start);
});
cljs.core.Subvec.prototype.cljs$core$ICounted$ = true;
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5199 = this;
return (this__5199.end - this__5199.start);
});
cljs.core.Subvec.prototype.cljs$core$IStack$ = true;
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__5200 = this;
return cljs.core._nth.call(null,this__5200.v,(this__5200.end - 1));
});
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__5201 = this;
if((this__5201.start === this__5201.end))
{throw (new Error("Can't pop empty vector"));
} else
{return (new cljs.core.Subvec(this__5201.meta,this__5201.v,this__5201.start,(this__5201.end - 1),null));
}
});
cljs.core.Subvec.prototype.cljs$core$IVector$ = true;
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (coll,n,val){
var this__5202 = this;
return cljs.core._assoc.call(null,coll,n,val);
});
cljs.core.Subvec.prototype.cljs$core$IEquiv$ = true;
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5203 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.Subvec.prototype.cljs$core$IWithMeta$ = true;
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5204 = this;
return (new cljs.core.Subvec(meta,this__5204.v,this__5204.start,this__5204.end,this__5204.__hash));
});
cljs.core.Subvec.prototype.cljs$core$IMeta$ = true;
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5205 = this;
return this__5205.meta;
});
cljs.core.Subvec.prototype.cljs$core$IIndexed$ = true;
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
var this__5207 = this;
return cljs.core._nth.call(null,this__5207.v,(this__5207.start + n));
});
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
var this__5208 = this;
return cljs.core._nth.call(null,this__5208.v,(this__5208.start + n),not_found);
});
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5206 = this;
return cljs.core.with_meta.call(null,cljs.core.Vector.EMPTY,this__5206.meta);
});
cljs.core.Subvec;
/**
* Returns a persistent vector of the items in vector from
* start (inclusive) to end (exclusive).  If end is not supplied,
* defaults to (count vector). This operation is O(1) and very fast, as
* the resulting vector shares structure with the original and no
* trimming is done.
*/
cljs.core.subvec = (function() {
var subvec = null;
var subvec__2 = (function (v,start){
return subvec.call(null,v,start,cljs.core.count.call(null,v));
});
var subvec__3 = (function (v,start,end){
return (new cljs.core.Subvec(null,v,start,end,null));
});
subvec = function(v,start,end){
switch(arguments.length){
case 2:
return subvec__2.call(this,v,start);
case 3:
return subvec__3.call(this,v,start,end);
}
throw('Invalid arity: ' + arguments.length);
};
subvec.cljs$lang$arity$2 = subvec__2;
subvec.cljs$lang$arity$3 = subvec__3;
return subvec;
})()
;
cljs.core.tv_ensure_editable = (function tv_ensure_editable(edit,node){
if((edit === node.edit))
{return node;
} else
{return (new cljs.core.VectorNode(edit,cljs.core.aclone.call(null,node.arr)));
}
});
cljs.core.tv_editable_root = (function tv_editable_root(node){
return (new cljs.core.VectorNode({},cljs.core.aclone.call(null,node.arr)));
});
cljs.core.tv_editable_tail = (function tv_editable_tail(tl){
var ret__5210 = cljs.core.make_array.call(null,32);
cljs.core.array_copy.call(null,tl,0,ret__5210,0,tl.length);
return ret__5210;
});
cljs.core.tv_push_tail = (function tv_push_tail(tv,level,parent,tail_node){
var ret__5211 = cljs.core.tv_ensure_editable.call(null,tv.root.edit,parent);
var subidx__5212 = (((tv.cnt - 1) >>> level) & 31);
cljs.core.pv_aset.call(null,ret__5211,subidx__5212,(((level === 5))?tail_node:(function (){var child__5213 = cljs.core.pv_aget.call(null,ret__5211,subidx__5212);
if((child__5213 != null))
{return tv_push_tail.call(null,tv,(level - 5),child__5213,tail_node);
} else
{return cljs.core.new_path.call(null,tv.root.edit,(level - 5),tail_node);
}
})()));
return ret__5211;
});
cljs.core.tv_pop_tail = (function tv_pop_tail(tv,level,node){
var node__5214 = cljs.core.tv_ensure_editable.call(null,tv.root.edit,node);
var subidx__5215 = (((tv.cnt - 2) >>> level) & 31);
if((level > 5))
{var new_child__5216 = tv_pop_tail.call(null,tv,(level - 5),cljs.core.pv_aget.call(null,node__5214,subidx__5215));
if((function (){var and__3822__auto____5217 = (new_child__5216 == null);
if(and__3822__auto____5217)
{return (subidx__5215 === 0);
} else
{return and__3822__auto____5217;
}
})())
{return null;
} else
{cljs.core.pv_aset.call(null,node__5214,subidx__5215,new_child__5216);
return node__5214;
}
} else
{if((subidx__5215 === 0))
{return null;
} else
{if("\uFDD0'else")
{cljs.core.pv_aset.call(null,node__5214,subidx__5215,null);
return node__5214;
} else
{return null;
}
}
}
});
cljs.core.editable_array_for = (function editable_array_for(tv,i){
if((function (){var and__3822__auto____5218 = (0 <= i);
if(and__3822__auto____5218)
{return (i < tv.cnt);
} else
{return and__3822__auto____5218;
}
})())
{if((i >= cljs.core.tail_off.call(null,tv)))
{return tv.tail;
} else
{var root__5219 = tv.root;
var node__5220 = root__5219;
var level__5221 = tv.shift;
while(true){
if((level__5221 > 0))
{{
var G__5222 = cljs.core.tv_ensure_editable.call(null,root__5219.edit,cljs.core.pv_aget.call(null,node__5220,((i >>> level__5221) & 31)));
var G__5223 = (level__5221 - 5);
node__5220 = G__5222;
level__5221 = G__5223;
continue;
}
} else
{return node__5220.arr;
}
break;
}
}
} else
{throw (new Error([cljs.core.str("No item "),cljs.core.str(i),cljs.core.str(" in transient vector of length "),cljs.core.str(tv.cnt)].join('')));
}
});

/**
* @constructor
*/
cljs.core.TransientVector = (function (cnt,shift,root,tail){
this.cnt = cnt;
this.shift = shift;
this.root = root;
this.tail = tail;
this.cljs$lang$protocol_mask$partition0$ = 147;
this.cljs$lang$protocol_mask$partition1$ = 11;
})
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.TransientVector");
});
cljs.core.TransientVector.prototype.cljs$core$IFn$ = true;
cljs.core.TransientVector.prototype.call = (function() {
var G__5261 = null;
var G__5261__2 = (function (tsym5226,k){
var this__5228 = this;
var tsym5226__5229 = this;
var coll__5230 = tsym5226__5229;
return cljs.core._lookup.call(null,coll__5230,k);
});
var G__5261__3 = (function (tsym5227,k,not_found){
var this__5231 = this;
var tsym5227__5232 = this;
var coll__5233 = tsym5227__5232;
return cljs.core._lookup.call(null,coll__5233,k,not_found);
});
G__5261 = function(tsym5227,k,not_found){
switch(arguments.length){
case 2:
return G__5261__2.call(this,tsym5227,k);
case 3:
return G__5261__3.call(this,tsym5227,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5261;
})()
;
cljs.core.TransientVector.prototype.apply = (function (tsym5224,args5225){
return tsym5224.call.apply(tsym5224,[tsym5224].concat(cljs.core.aclone.call(null,args5225)));
});
cljs.core.TransientVector.prototype.cljs$core$ILookup$ = true;
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5234 = this;
return cljs.core._nth.call(null,coll,k,null);
});
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5235 = this;
return cljs.core._nth.call(null,coll,k,not_found);
});
cljs.core.TransientVector.prototype.cljs$core$IIndexed$ = true;
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
var this__5236 = this;
if(cljs.core.truth_(this__5236.root.edit))
{return (cljs.core.array_for.call(null,coll,n)[(n & 31)]);
} else
{throw (new Error("nth after persistent!"));
}
});
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
var this__5237 = this;
if((function (){var and__3822__auto____5238 = (0 <= n);
if(and__3822__auto____5238)
{return (n < this__5237.cnt);
} else
{return and__3822__auto____5238;
}
})())
{return cljs.core._nth.call(null,coll,n);
} else
{return not_found;
}
});
cljs.core.TransientVector.prototype.cljs$core$ICounted$ = true;
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5239 = this;
if(cljs.core.truth_(this__5239.root.edit))
{return this__5239.cnt;
} else
{throw (new Error("count after persistent!"));
}
});
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$ = true;
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = (function (tcoll,n,val){
var this__5240 = this;
if(cljs.core.truth_(this__5240.root.edit))
{if((function (){var and__3822__auto____5241 = (0 <= n);
if(and__3822__auto____5241)
{return (n < this__5240.cnt);
} else
{return and__3822__auto____5241;
}
})())
{if((cljs.core.tail_off.call(null,tcoll) <= n))
{(this__5240.tail[(n & 31)] = val);
return tcoll;
} else
{var new_root__5244 = (function go(level,node){
var node__5242 = cljs.core.tv_ensure_editable.call(null,this__5240.root.edit,node);
if((level === 0))
{cljs.core.pv_aset.call(null,node__5242,(n & 31),val);
return node__5242;
} else
{var subidx__5243 = ((n >>> level) & 31);
cljs.core.pv_aset.call(null,node__5242,subidx__5243,go.call(null,(level - 5),cljs.core.pv_aget.call(null,node__5242,subidx__5243)));
return node__5242;
}
}).call(null,this__5240.shift,this__5240.root);
this__5240.root = new_root__5244;
return tcoll;
}
} else
{if((n === this__5240.cnt))
{return cljs.core._conj_BANG_.call(null,tcoll,val);
} else
{if("\uFDD0'else")
{throw (new Error([cljs.core.str("Index "),cljs.core.str(n),cljs.core.str(" out of bounds for TransientVector of length"),cljs.core.str(this__5240.cnt)].join('')));
} else
{return null;
}
}
}
} else
{throw (new Error("assoc! after persistent!"));
}
});
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = (function (tcoll){
var this__5245 = this;
if(cljs.core.truth_(this__5245.root.edit))
{if((this__5245.cnt === 0))
{throw (new Error("Can't pop empty vector"));
} else
{if((1 === this__5245.cnt))
{this__5245.cnt = 0;
return tcoll;
} else
{if((((this__5245.cnt - 1) & 31) > 0))
{this__5245.cnt = (this__5245.cnt - 1);
return tcoll;
} else
{if("\uFDD0'else")
{var new_tail__5246 = cljs.core.editable_array_for.call(null,tcoll,(this__5245.cnt - 2));
var new_root__5248 = (function (){var nr__5247 = cljs.core.tv_pop_tail.call(null,tcoll,this__5245.shift,this__5245.root);
if((nr__5247 != null))
{return nr__5247;
} else
{return (new cljs.core.VectorNode(this__5245.root.edit,cljs.core.make_array.call(null,32)));
}
})();
if((function (){var and__3822__auto____5249 = (5 < this__5245.shift);
if(and__3822__auto____5249)
{return (cljs.core.pv_aget.call(null,new_root__5248,1) == null);
} else
{return and__3822__auto____5249;
}
})())
{var new_root__5250 = cljs.core.tv_ensure_editable.call(null,this__5245.root.edit,cljs.core.pv_aget.call(null,new_root__5248,0));
this__5245.root = new_root__5250;
this__5245.shift = (this__5245.shift - 5);
this__5245.cnt = (this__5245.cnt - 1);
this__5245.tail = new_tail__5246;
return tcoll;
} else
{this__5245.root = new_root__5248;
this__5245.cnt = (this__5245.cnt - 1);
this__5245.tail = new_tail__5246;
return tcoll;
}
} else
{return null;
}
}
}
}
} else
{throw (new Error("pop! after persistent!"));
}
});
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$ = true;
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
var this__5251 = this;
return cljs.core._assoc_n_BANG_.call(null,tcoll,key,val);
});
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$ = true;
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
var this__5252 = this;
if(cljs.core.truth_(this__5252.root.edit))
{if(((this__5252.cnt - cljs.core.tail_off.call(null,tcoll)) < 32))
{(this__5252.tail[(this__5252.cnt & 31)] = o);
this__5252.cnt = (this__5252.cnt + 1);
return tcoll;
} else
{var tail_node__5253 = (new cljs.core.VectorNode(this__5252.root.edit,this__5252.tail));
var new_tail__5254 = cljs.core.make_array.call(null,32);
(new_tail__5254[0] = o);
this__5252.tail = new_tail__5254;
if(((this__5252.cnt >>> 5) > (1 << this__5252.shift)))
{var new_root_array__5255 = cljs.core.make_array.call(null,32);
var new_shift__5256 = (this__5252.shift + 5);
(new_root_array__5255[0] = this__5252.root);
(new_root_array__5255[1] = cljs.core.new_path.call(null,this__5252.root.edit,this__5252.shift,tail_node__5253));
this__5252.root = (new cljs.core.VectorNode(this__5252.root.edit,new_root_array__5255));
this__5252.shift = new_shift__5256;
this__5252.cnt = (this__5252.cnt + 1);
return tcoll;
} else
{var new_root__5257 = cljs.core.tv_push_tail.call(null,tcoll,this__5252.shift,this__5252.root,tail_node__5253);
this__5252.root = new_root__5257;
this__5252.cnt = (this__5252.cnt + 1);
return tcoll;
}
}
} else
{throw (new Error("conj! after persistent!"));
}
});
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
var this__5258 = this;
if(cljs.core.truth_(this__5258.root.edit))
{this__5258.root.edit = null;
var len__5259 = (this__5258.cnt - cljs.core.tail_off.call(null,tcoll));
var trimmed_tail__5260 = cljs.core.make_array.call(null,len__5259);
cljs.core.array_copy.call(null,this__5258.tail,0,trimmed_tail__5260,0,len__5259);
return (new cljs.core.PersistentVector(null,this__5258.cnt,this__5258.shift,this__5258.root,trimmed_tail__5260,null));
} else
{throw (new Error("persistent! called twice"));
}
});
cljs.core.TransientVector;

/**
* @constructor
*/
cljs.core.PersistentQueueSeq = (function (meta,front,rear,__hash){
this.meta = meta;
this.front = front;
this.rear = rear;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15925324;
})
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentQueueSeq");
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5262 = this;
var h__264__auto____5263 = this__5262.__hash;
if((h__264__auto____5263 != null))
{return h__264__auto____5263;
} else
{var h__264__auto____5264 = cljs.core.hash_coll.call(null,coll);
this__5262.__hash = h__264__auto____5264;
return h__264__auto____5264;
}
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISequential$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5265 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.PersistentQueueSeq.prototype.toString = (function (){
var this__5266 = this;
var this$__5267 = this;
return cljs.core.pr_str.call(null,this$__5267);
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5268 = this;
return coll;
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__5269 = this;
return cljs.core._first.call(null,this__5269.front);
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__5270 = this;
var temp__3971__auto____5271 = cljs.core.next.call(null,this__5270.front);
if(cljs.core.truth_(temp__3971__auto____5271))
{var f1__5272 = temp__3971__auto____5271;
return (new cljs.core.PersistentQueueSeq(this__5270.meta,f1__5272,this__5270.rear,null));
} else
{if((this__5270.rear == null))
{return cljs.core._empty.call(null,coll);
} else
{return (new cljs.core.PersistentQueueSeq(this__5270.meta,this__5270.rear,null,null));
}
}
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5273 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5274 = this;
return (new cljs.core.PersistentQueueSeq(meta,this__5274.front,this__5274.rear,this__5274.__hash));
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5275 = this;
return this__5275.meta;
});
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5276 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__5276.meta);
});
cljs.core.PersistentQueueSeq;

/**
* @constructor
*/
cljs.core.PersistentQueue = (function (meta,count,front,rear,__hash){
this.meta = meta;
this.count = count;
this.front = front;
this.rear = rear;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15929422;
})
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentQueue");
});
cljs.core.PersistentQueue.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5277 = this;
var h__264__auto____5278 = this__5277.__hash;
if((h__264__auto____5278 != null))
{return h__264__auto____5278;
} else
{var h__264__auto____5279 = cljs.core.hash_coll.call(null,coll);
this__5277.__hash = h__264__auto____5279;
return h__264__auto____5279;
}
});
cljs.core.PersistentQueue.prototype.cljs$core$ISequential$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5280 = this;
if(cljs.core.truth_(this__5280.front))
{return (new cljs.core.PersistentQueue(this__5280.meta,(this__5280.count + 1),this__5280.front,cljs.core.conj.call(null,(function (){var or__3824__auto____5281 = this__5280.rear;
if(cljs.core.truth_(or__3824__auto____5281))
{return or__3824__auto____5281;
} else
{return cljs.core.PersistentVector.fromArray([]);
}
})(),o),null));
} else
{return (new cljs.core.PersistentQueue(this__5280.meta,(this__5280.count + 1),cljs.core.conj.call(null,this__5280.front,o),cljs.core.PersistentVector.fromArray([]),null));
}
});
cljs.core.PersistentQueue.prototype.toString = (function (){
var this__5282 = this;
var this$__5283 = this;
return cljs.core.pr_str.call(null,this$__5283);
});
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5284 = this;
var rear__5285 = cljs.core.seq.call(null,this__5284.rear);
if(cljs.core.truth_((function (){var or__3824__auto____5286 = this__5284.front;
if(cljs.core.truth_(or__3824__auto____5286))
{return or__3824__auto____5286;
} else
{return rear__5285;
}
})()))
{return (new cljs.core.PersistentQueueSeq(null,this__5284.front,cljs.core.seq.call(null,rear__5285),null,null));
} else
{return cljs.core.List.EMPTY;
}
});
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5287 = this;
return this__5287.count;
});
cljs.core.PersistentQueue.prototype.cljs$core$IStack$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
var this__5288 = this;
return cljs.core._first.call(null,this__5288.front);
});
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
var this__5289 = this;
if(cljs.core.truth_(this__5289.front))
{var temp__3971__auto____5290 = cljs.core.next.call(null,this__5289.front);
if(cljs.core.truth_(temp__3971__auto____5290))
{var f1__5291 = temp__3971__auto____5290;
return (new cljs.core.PersistentQueue(this__5289.meta,(this__5289.count - 1),f1__5291,this__5289.rear,null));
} else
{return (new cljs.core.PersistentQueue(this__5289.meta,(this__5289.count - 1),cljs.core.seq.call(null,this__5289.rear),cljs.core.PersistentVector.fromArray([]),null));
}
} else
{return coll;
}
});
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__5292 = this;
return cljs.core.first.call(null,this__5292.front);
});
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__5293 = this;
return cljs.core.rest.call(null,cljs.core.seq.call(null,coll));
});
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5294 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5295 = this;
return (new cljs.core.PersistentQueue(meta,this__5295.count,this__5295.front,this__5295.rear,this__5295.__hash));
});
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5296 = this;
return this__5296.meta;
});
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5297 = this;
return cljs.core.PersistentQueue.EMPTY;
});
cljs.core.PersistentQueue;
cljs.core.PersistentQueue.EMPTY = (new cljs.core.PersistentQueue(null,0,null,cljs.core.PersistentVector.fromArray([]),0));

/**
* @constructor
*/
cljs.core.NeverEquiv = (function (){
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 1048576;
})
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.NeverEquiv");
});
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$ = true;
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
var this__5298 = this;
return false;
});
cljs.core.NeverEquiv;
cljs.core.never_equiv = (new cljs.core.NeverEquiv());
/**
* Assumes y is a map. Returns true if x equals y, otherwise returns
* false.
*/
cljs.core.equiv_map = (function equiv_map(x,y){
return cljs.core.boolean$.call(null,((cljs.core.map_QMARK_.call(null,y))?(((cljs.core.count.call(null,x) === cljs.core.count.call(null,y)))?cljs.core.every_QMARK_.call(null,cljs.core.identity,cljs.core.map.call(null,(function (xkv){
return cljs.core._EQ_.call(null,cljs.core.get.call(null,y,cljs.core.first.call(null,xkv),cljs.core.never_equiv),cljs.core.second.call(null,xkv));
}),x)):null):null));
});
cljs.core.scan_array = (function scan_array(incr,k,array){
var len__5299 = array.length;
var i__5300 = 0;
while(true){
if((i__5300 < len__5299))
{if(cljs.core._EQ_.call(null,k,(array[i__5300])))
{return i__5300;
} else
{{
var G__5301 = (i__5300 + incr);
i__5300 = G__5301;
continue;
}
}
} else
{return null;
}
break;
}
});
cljs.core.obj_map_contains_key_QMARK_ = (function() {
var obj_map_contains_key_QMARK_ = null;
var obj_map_contains_key_QMARK___2 = (function (k,strobj){
return obj_map_contains_key_QMARK_.call(null,k,strobj,true,false);
});
var obj_map_contains_key_QMARK___4 = (function (k,strobj,true_val,false_val){
if(cljs.core.truth_((function (){var and__3822__auto____5302 = goog.isString.call(null,k);
if(cljs.core.truth_(and__3822__auto____5302))
{return strobj.hasOwnProperty(k);
} else
{return and__3822__auto____5302;
}
})()))
{return true_val;
} else
{return false_val;
}
});
obj_map_contains_key_QMARK_ = function(k,strobj,true_val,false_val){
switch(arguments.length){
case 2:
return obj_map_contains_key_QMARK___2.call(this,k,strobj);
case 4:
return obj_map_contains_key_QMARK___4.call(this,k,strobj,true_val,false_val);
}
throw('Invalid arity: ' + arguments.length);
};
obj_map_contains_key_QMARK_.cljs$lang$arity$2 = obj_map_contains_key_QMARK___2;
obj_map_contains_key_QMARK_.cljs$lang$arity$4 = obj_map_contains_key_QMARK___4;
return obj_map_contains_key_QMARK_;
})()
;
cljs.core.obj_map_compare_keys = (function obj_map_compare_keys(a,b){
var a__5303 = cljs.core.hash.call(null,a);
var b__5304 = cljs.core.hash.call(null,b);
if((a__5303 < b__5304))
{return -1;
} else
{if((a__5303 > b__5304))
{return 1;
} else
{if("\uFDD0'else")
{return 0;
} else
{return null;
}
}
}
});
cljs.core.obj_map__GT_hash_map = (function obj_map__GT_hash_map(m,k,v){
var ks__5306 = m.keys;
var len__5307 = ks__5306.length;
var so__5308 = m.strobj;
var out__5309 = cljs.core.with_meta.call(null,cljs.core.PersistentHashMap.EMPTY,cljs.core.meta.call(null,m));
var i__5310 = 0;
var out__5311 = cljs.core.transient$.call(null,out__5309);
while(true){
if((i__5310 < len__5307))
{var k__5312 = (ks__5306[i__5310]);
{
var G__5313 = (i__5310 + 1);
var G__5314 = cljs.core.assoc_BANG_.call(null,out__5311,k__5312,(so__5308[k__5312]));
i__5310 = G__5313;
out__5311 = G__5314;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,cljs.core.assoc_BANG_.call(null,out__5311,k,v));
}
break;
}
});

/**
* @constructor
*/
cljs.core.ObjMap = (function (meta,keys,strobj,update_count,__hash){
this.meta = meta;
this.keys = keys;
this.strobj = strobj;
this.update_count = update_count;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 2155021199;
})
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.ObjMap");
});
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$ = true;
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
var this__5319 = this;
return cljs.core.transient$.call(null,cljs.core.into.call(null,cljs.core.hash_map.call(null),coll));
});
cljs.core.ObjMap.prototype.cljs$core$IHash$ = true;
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5320 = this;
var h__264__auto____5321 = this__5320.__hash;
if((h__264__auto____5321 != null))
{return h__264__auto____5321;
} else
{var h__264__auto____5322 = cljs.core.hash_imap.call(null,coll);
this__5320.__hash = h__264__auto____5322;
return h__264__auto____5322;
}
});
cljs.core.ObjMap.prototype.cljs$core$ILookup$ = true;
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5323 = this;
return cljs.core._lookup.call(null,coll,k,null);
});
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5324 = this;
return cljs.core.obj_map_contains_key_QMARK_.call(null,k,this__5324.strobj,(this__5324.strobj[k]),not_found);
});
cljs.core.ObjMap.prototype.cljs$core$IAssociative$ = true;
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5325 = this;
if(cljs.core.truth_(goog.isString.call(null,k)))
{var overwrite_QMARK___5326 = this__5325.strobj.hasOwnProperty(k);
if(cljs.core.truth_(overwrite_QMARK___5326))
{var new_strobj__5327 = goog.object.clone.call(null,this__5325.strobj);
(new_strobj__5327[k] = v);
return (new cljs.core.ObjMap(this__5325.meta,this__5325.keys,new_strobj__5327,(this__5325.update_count + 1),null));
} else
{if((this__5325.update_count < cljs.core.ObjMap.HASHMAP_THRESHOLD))
{var new_strobj__5328 = goog.object.clone.call(null,this__5325.strobj);
var new_keys__5329 = cljs.core.aclone.call(null,this__5325.keys);
(new_strobj__5328[k] = v);
new_keys__5329.push(k);
return (new cljs.core.ObjMap(this__5325.meta,new_keys__5329,new_strobj__5328,(this__5325.update_count + 1),null));
} else
{return cljs.core.obj_map__GT_hash_map.call(null,coll,k,v);
}
}
} else
{return cljs.core.obj_map__GT_hash_map.call(null,coll,k,v);
}
});
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
var this__5330 = this;
return cljs.core.obj_map_contains_key_QMARK_.call(null,k,this__5330.strobj);
});
cljs.core.ObjMap.prototype.cljs$core$IFn$ = true;
cljs.core.ObjMap.prototype.call = (function() {
var G__5350 = null;
var G__5350__2 = (function (tsym5317,k){
var this__5331 = this;
var tsym5317__5332 = this;
var coll__5333 = tsym5317__5332;
return cljs.core._lookup.call(null,coll__5333,k);
});
var G__5350__3 = (function (tsym5318,k,not_found){
var this__5334 = this;
var tsym5318__5335 = this;
var coll__5336 = tsym5318__5335;
return cljs.core._lookup.call(null,coll__5336,k,not_found);
});
G__5350 = function(tsym5318,k,not_found){
switch(arguments.length){
case 2:
return G__5350__2.call(this,tsym5318,k);
case 3:
return G__5350__3.call(this,tsym5318,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5350;
})()
;
cljs.core.ObjMap.prototype.apply = (function (tsym5315,args5316){
return tsym5315.call.apply(tsym5315,[tsym5315].concat(cljs.core.aclone.call(null,args5316)));
});
cljs.core.ObjMap.prototype.cljs$core$ICollection$ = true;
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
var this__5337 = this;
if(cljs.core.vector_QMARK_.call(null,entry))
{return cljs.core._assoc.call(null,coll,cljs.core._nth.call(null,entry,0),cljs.core._nth.call(null,entry,1));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,coll,entry);
}
});
cljs.core.ObjMap.prototype.toString = (function (){
var this__5338 = this;
var this$__5339 = this;
return cljs.core.pr_str.call(null,this$__5339);
});
cljs.core.ObjMap.prototype.cljs$core$ISeqable$ = true;
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5340 = this;
if((this__5340.keys.length > 0))
{return cljs.core.map.call(null,(function (p1__5305_SHARP_){
return cljs.core.vector.call(null,p1__5305_SHARP_,(this__5340.strobj[p1__5305_SHARP_]));
}),this__5340.keys.sort(cljs.core.obj_map_compare_keys));
} else
{return null;
}
});
cljs.core.ObjMap.prototype.cljs$core$ICounted$ = true;
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5341 = this;
return this__5341.keys.length;
});
cljs.core.ObjMap.prototype.cljs$core$IEquiv$ = true;
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5342 = this;
return cljs.core.equiv_map.call(null,coll,other);
});
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$ = true;
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5343 = this;
return (new cljs.core.ObjMap(meta,this__5343.keys,this__5343.strobj,this__5343.update_count,this__5343.__hash));
});
cljs.core.ObjMap.prototype.cljs$core$IMeta$ = true;
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5344 = this;
return this__5344.meta;
});
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5345 = this;
return cljs.core.with_meta.call(null,cljs.core.ObjMap.EMPTY,this__5345.meta);
});
cljs.core.ObjMap.prototype.cljs$core$IMap$ = true;
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
var this__5346 = this;
if(cljs.core.truth_((function (){var and__3822__auto____5347 = goog.isString.call(null,k);
if(cljs.core.truth_(and__3822__auto____5347))
{return this__5346.strobj.hasOwnProperty(k);
} else
{return and__3822__auto____5347;
}
})()))
{var new_keys__5348 = cljs.core.aclone.call(null,this__5346.keys);
var new_strobj__5349 = goog.object.clone.call(null,this__5346.strobj);
new_keys__5348.splice(cljs.core.scan_array.call(null,1,k,new_keys__5348),1);
cljs.core.js_delete.call(null,new_strobj__5349,k);
return (new cljs.core.ObjMap(this__5346.meta,new_keys__5348,new_strobj__5349,(this__5346.update_count + 1),null));
} else
{return coll;
}
});
cljs.core.ObjMap;
cljs.core.ObjMap.EMPTY = (new cljs.core.ObjMap(null,[],{},0,0));
cljs.core.ObjMap.HASHMAP_THRESHOLD = 32;
cljs.core.ObjMap.fromObject = (function (ks,obj){
return (new cljs.core.ObjMap(null,ks,obj,0,null));
});

/**
* @constructor
*/
cljs.core.HashMap = (function (meta,count,hashobj,__hash){
this.meta = meta;
this.count = count;
this.hashobj = hashobj;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 7537551;
})
cljs.core.HashMap.cljs$lang$type = true;
cljs.core.HashMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.HashMap");
});
cljs.core.HashMap.prototype.cljs$core$IHash$ = true;
cljs.core.HashMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5356 = this;
var h__264__auto____5357 = this__5356.__hash;
if((h__264__auto____5357 != null))
{return h__264__auto____5357;
} else
{var h__264__auto____5358 = cljs.core.hash_imap.call(null,coll);
this__5356.__hash = h__264__auto____5358;
return h__264__auto____5358;
}
});
cljs.core.HashMap.prototype.cljs$core$ILookup$ = true;
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5359 = this;
return cljs.core._lookup.call(null,coll,k,null);
});
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5360 = this;
var bucket__5361 = (this__5360.hashobj[cljs.core.hash.call(null,k)]);
var i__5362 = (cljs.core.truth_(bucket__5361)?cljs.core.scan_array.call(null,2,k,bucket__5361):null);
if(cljs.core.truth_(i__5362))
{return (bucket__5361[(i__5362 + 1)]);
} else
{return not_found;
}
});
cljs.core.HashMap.prototype.cljs$core$IAssociative$ = true;
cljs.core.HashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5363 = this;
var h__5364 = cljs.core.hash.call(null,k);
var bucket__5365 = (this__5363.hashobj[h__5364]);
if(cljs.core.truth_(bucket__5365))
{var new_bucket__5366 = cljs.core.aclone.call(null,bucket__5365);
var new_hashobj__5367 = goog.object.clone.call(null,this__5363.hashobj);
(new_hashobj__5367[h__5364] = new_bucket__5366);
var temp__3971__auto____5368 = cljs.core.scan_array.call(null,2,k,new_bucket__5366);
if(cljs.core.truth_(temp__3971__auto____5368))
{var i__5369 = temp__3971__auto____5368;
(new_bucket__5366[(i__5369 + 1)] = v);
return (new cljs.core.HashMap(this__5363.meta,this__5363.count,new_hashobj__5367,null));
} else
{new_bucket__5366.push(k,v);
return (new cljs.core.HashMap(this__5363.meta,(this__5363.count + 1),new_hashobj__5367,null));
}
} else
{var new_hashobj__5370 = goog.object.clone.call(null,this__5363.hashobj);
(new_hashobj__5370[h__5364] = [k,v]);
return (new cljs.core.HashMap(this__5363.meta,(this__5363.count + 1),new_hashobj__5370,null));
}
});
cljs.core.HashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
var this__5371 = this;
var bucket__5372 = (this__5371.hashobj[cljs.core.hash.call(null,k)]);
var i__5373 = (cljs.core.truth_(bucket__5372)?cljs.core.scan_array.call(null,2,k,bucket__5372):null);
if(cljs.core.truth_(i__5373))
{return true;
} else
{return false;
}
});
cljs.core.HashMap.prototype.cljs$core$IFn$ = true;
cljs.core.HashMap.prototype.call = (function() {
var G__5396 = null;
var G__5396__2 = (function (tsym5354,k){
var this__5374 = this;
var tsym5354__5375 = this;
var coll__5376 = tsym5354__5375;
return cljs.core._lookup.call(null,coll__5376,k);
});
var G__5396__3 = (function (tsym5355,k,not_found){
var this__5377 = this;
var tsym5355__5378 = this;
var coll__5379 = tsym5355__5378;
return cljs.core._lookup.call(null,coll__5379,k,not_found);
});
G__5396 = function(tsym5355,k,not_found){
switch(arguments.length){
case 2:
return G__5396__2.call(this,tsym5355,k);
case 3:
return G__5396__3.call(this,tsym5355,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5396;
})()
;
cljs.core.HashMap.prototype.apply = (function (tsym5352,args5353){
return tsym5352.call.apply(tsym5352,[tsym5352].concat(cljs.core.aclone.call(null,args5353)));
});
cljs.core.HashMap.prototype.cljs$core$ICollection$ = true;
cljs.core.HashMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
var this__5380 = this;
if(cljs.core.vector_QMARK_.call(null,entry))
{return cljs.core._assoc.call(null,coll,cljs.core._nth.call(null,entry,0),cljs.core._nth.call(null,entry,1));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,coll,entry);
}
});
cljs.core.HashMap.prototype.toString = (function (){
var this__5381 = this;
var this$__5382 = this;
return cljs.core.pr_str.call(null,this$__5382);
});
cljs.core.HashMap.prototype.cljs$core$ISeqable$ = true;
cljs.core.HashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5383 = this;
if((this__5383.count > 0))
{var hashes__5384 = cljs.core.js_keys.call(null,this__5383.hashobj).sort();
return cljs.core.mapcat.call(null,(function (p1__5351_SHARP_){
return cljs.core.map.call(null,cljs.core.vec,cljs.core.partition.call(null,2,(this__5383.hashobj[p1__5351_SHARP_])));
}),hashes__5384);
} else
{return null;
}
});
cljs.core.HashMap.prototype.cljs$core$ICounted$ = true;
cljs.core.HashMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5385 = this;
return this__5385.count;
});
cljs.core.HashMap.prototype.cljs$core$IEquiv$ = true;
cljs.core.HashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5386 = this;
return cljs.core.equiv_map.call(null,coll,other);
});
cljs.core.HashMap.prototype.cljs$core$IWithMeta$ = true;
cljs.core.HashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5387 = this;
return (new cljs.core.HashMap(meta,this__5387.count,this__5387.hashobj,this__5387.__hash));
});
cljs.core.HashMap.prototype.cljs$core$IMeta$ = true;
cljs.core.HashMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5388 = this;
return this__5388.meta;
});
cljs.core.HashMap.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.HashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5389 = this;
return cljs.core.with_meta.call(null,cljs.core.HashMap.EMPTY,this__5389.meta);
});
cljs.core.HashMap.prototype.cljs$core$IMap$ = true;
cljs.core.HashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
var this__5390 = this;
var h__5391 = cljs.core.hash.call(null,k);
var bucket__5392 = (this__5390.hashobj[h__5391]);
var i__5393 = (cljs.core.truth_(bucket__5392)?cljs.core.scan_array.call(null,2,k,bucket__5392):null);
if(cljs.core.not.call(null,i__5393))
{return coll;
} else
{var new_hashobj__5394 = goog.object.clone.call(null,this__5390.hashobj);
if((3 > bucket__5392.length))
{cljs.core.js_delete.call(null,new_hashobj__5394,h__5391);
} else
{var new_bucket__5395 = cljs.core.aclone.call(null,bucket__5392);
new_bucket__5395.splice(i__5393,2);
(new_hashobj__5394[h__5391] = new_bucket__5395);
}
return (new cljs.core.HashMap(this__5390.meta,(this__5390.count - 1),new_hashobj__5394,null));
}
});
cljs.core.HashMap;
cljs.core.HashMap.EMPTY = (new cljs.core.HashMap(null,0,{},0));
cljs.core.HashMap.fromArrays = (function (ks,vs){
var len__5397 = ks.length;
var i__5398 = 0;
var out__5399 = cljs.core.HashMap.EMPTY;
while(true){
if((i__5398 < len__5397))
{{
var G__5400 = (i__5398 + 1);
var G__5401 = cljs.core.assoc.call(null,out__5399,(ks[i__5398]),(vs[i__5398]));
i__5398 = G__5400;
out__5399 = G__5401;
continue;
}
} else
{return out__5399;
}
break;
}
});
cljs.core.array_map_index_of = (function array_map_index_of(m,k){
var arr__5402 = m.arr;
var len__5403 = arr__5402.length;
var i__5404 = 0;
while(true){
if((len__5403 <= i__5404))
{return -1;
} else
{if(cljs.core._EQ_.call(null,(arr__5402[i__5404]),k))
{return i__5404;
} else
{if("\uFDD0'else")
{{
var G__5405 = (i__5404 + 2);
i__5404 = G__5405;
continue;
}
} else
{return null;
}
}
}
break;
}
});
void 0;

/**
* @constructor
*/
cljs.core.PersistentArrayMap = (function (meta,cnt,arr,__hash){
this.meta = meta;
this.cnt = cnt;
this.arr = arr;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 2155545487;
})
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentArrayMap");
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
var this__5410 = this;
return (new cljs.core.TransientArrayMap({},this__5410.arr.length,cljs.core.aclone.call(null,this__5410.arr)));
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5411 = this;
var h__264__auto____5412 = this__5411.__hash;
if((h__264__auto____5412 != null))
{return h__264__auto____5412;
} else
{var h__264__auto____5413 = cljs.core.hash_imap.call(null,coll);
this__5411.__hash = h__264__auto____5413;
return h__264__auto____5413;
}
});
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5414 = this;
return cljs.core._lookup.call(null,coll,k,null);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5415 = this;
var idx__5416 = cljs.core.array_map_index_of.call(null,coll,k);
if((idx__5416 === -1))
{return not_found;
} else
{return (this__5415.arr[(idx__5416 + 1)]);
}
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5417 = this;
var idx__5418 = cljs.core.array_map_index_of.call(null,coll,k);
if((idx__5418 === -1))
{if((this__5417.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD))
{return (new cljs.core.PersistentArrayMap(this__5417.meta,(this__5417.cnt + 1),(function (){var G__5419__5420 = cljs.core.aclone.call(null,this__5417.arr);
G__5419__5420.push(k);
G__5419__5420.push(v);
return G__5419__5420;
})(),null));
} else
{return cljs.core.persistent_BANG_.call(null,cljs.core.assoc_BANG_.call(null,cljs.core.transient$.call(null,cljs.core.into.call(null,cljs.core.PersistentHashMap.EMPTY,coll)),k,v));
}
} else
{if((v === (this__5417.arr[(idx__5418 + 1)])))
{return coll;
} else
{if("\uFDD0'else")
{return (new cljs.core.PersistentArrayMap(this__5417.meta,this__5417.cnt,(function (){var G__5421__5422 = cljs.core.aclone.call(null,this__5417.arr);
(G__5421__5422[(idx__5418 + 1)] = v);
return G__5421__5422;
})(),null));
} else
{return null;
}
}
}
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
var this__5423 = this;
return (cljs.core.array_map_index_of.call(null,coll,k) != -1);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentArrayMap.prototype.call = (function() {
var G__5453 = null;
var G__5453__2 = (function (tsym5408,k){
var this__5424 = this;
var tsym5408__5425 = this;
var coll__5426 = tsym5408__5425;
return cljs.core._lookup.call(null,coll__5426,k);
});
var G__5453__3 = (function (tsym5409,k,not_found){
var this__5427 = this;
var tsym5409__5428 = this;
var coll__5429 = tsym5409__5428;
return cljs.core._lookup.call(null,coll__5429,k,not_found);
});
G__5453 = function(tsym5409,k,not_found){
switch(arguments.length){
case 2:
return G__5453__2.call(this,tsym5409,k);
case 3:
return G__5453__3.call(this,tsym5409,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5453;
})()
;
cljs.core.PersistentArrayMap.prototype.apply = (function (tsym5406,args5407){
return tsym5406.call.apply(tsym5406,[tsym5406].concat(cljs.core.aclone.call(null,args5407)));
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
var this__5430 = this;
var len__5431 = this__5430.arr.length;
var i__5432 = 0;
var init__5433 = init;
while(true){
if((i__5432 < len__5431))
{var init__5434 = f.call(null,init__5433,(this__5430.arr[i__5432]),(this__5430.arr[(i__5432 + 1)]));
if(cljs.core.reduced_QMARK_.call(null,init__5434))
{return cljs.core.deref.call(null,init__5434);
} else
{{
var G__5454 = (i__5432 + 2);
var G__5455 = init__5434;
i__5432 = G__5454;
init__5433 = G__5455;
continue;
}
}
} else
{return null;
}
break;
}
});
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
var this__5435 = this;
if(cljs.core.vector_QMARK_.call(null,entry))
{return cljs.core._assoc.call(null,coll,cljs.core._nth.call(null,entry,0),cljs.core._nth.call(null,entry,1));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,coll,entry);
}
});
cljs.core.PersistentArrayMap.prototype.toString = (function (){
var this__5436 = this;
var this$__5437 = this;
return cljs.core.pr_str.call(null,this$__5437);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5438 = this;
if((this__5438.cnt > 0))
{var len__5439 = this__5438.arr.length;
var array_map_seq__5440 = (function array_map_seq(i){
return (new cljs.core.LazySeq(null,false,(function (){
if((i < len__5439))
{return cljs.core.cons.call(null,cljs.core.PersistentVector.fromArray([(this__5438.arr[i]),(this__5438.arr[(i + 1)])]),array_map_seq.call(null,(i + 2)));
} else
{return null;
}
})));
});
return array_map_seq__5440.call(null,0);
} else
{return null;
}
});
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5441 = this;
return this__5441.cnt;
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5442 = this;
return cljs.core.equiv_map.call(null,coll,other);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5443 = this;
return (new cljs.core.PersistentArrayMap(meta,this__5443.cnt,this__5443.arr,this__5443.__hash));
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5444 = this;
return this__5444.meta;
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5445 = this;
return cljs.core._with_meta.call(null,cljs.core.PersistentArrayMap.EMPTY,this__5445.meta);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
var this__5446 = this;
var idx__5447 = cljs.core.array_map_index_of.call(null,coll,k);
if((idx__5447 >= 0))
{var len__5448 = this__5446.arr.length;
var new_len__5449 = (len__5448 - 2);
if((new_len__5449 === 0))
{return cljs.core._empty.call(null,coll);
} else
{var new_arr__5450 = cljs.core.make_array.call(null,new_len__5449);
var s__5451 = 0;
var d__5452 = 0;
while(true){
if((s__5451 >= len__5448))
{return (new cljs.core.PersistentArrayMap(this__5446.meta,(this__5446.cnt - 1),new_arr__5450,null));
} else
{if(cljs.core._EQ_.call(null,k,(this__5446.arr[s__5451])))
{{
var G__5456 = (s__5451 + 2);
var G__5457 = d__5452;
s__5451 = G__5456;
d__5452 = G__5457;
continue;
}
} else
{if("\uFDD0'else")
{(new_arr__5450[d__5452] = (this__5446.arr[s__5451]));
(new_arr__5450[(d__5452 + 1)] = (this__5446.arr[(s__5451 + 1)]));
{
var G__5458 = (s__5451 + 2);
var G__5459 = (d__5452 + 2);
s__5451 = G__5458;
d__5452 = G__5459;
continue;
}
} else
{return null;
}
}
}
break;
}
}
} else
{return coll;
}
});
cljs.core.PersistentArrayMap;
cljs.core.PersistentArrayMap.EMPTY = (new cljs.core.PersistentArrayMap(null,0,[],null));
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 16;
cljs.core.PersistentArrayMap.fromArrays = (function (ks,vs){
var len__5460 = cljs.core.count.call(null,ks);
var i__5461 = 0;
var out__5462 = cljs.core.transient$.call(null,cljs.core.PersistentArrayMap.EMPTY);
while(true){
if((i__5461 < len__5460))
{{
var G__5463 = (i__5461 + 1);
var G__5464 = cljs.core.assoc_BANG_.call(null,out__5462,(ks[i__5461]),(vs[i__5461]));
i__5461 = G__5463;
out__5462 = G__5464;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,out__5462);
}
break;
}
});
void 0;

/**
* @constructor
*/
cljs.core.TransientArrayMap = (function (editable_QMARK_,len,arr){
this.editable_QMARK_ = editable_QMARK_;
this.len = len;
this.arr = arr;
this.cljs$lang$protocol_mask$partition1$ = 7;
this.cljs$lang$protocol_mask$partition0$ = 130;
})
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.TransientArrayMap");
});
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$ = true;
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = (function (tcoll,key){
var this__5465 = this;
if(cljs.core.truth_(this__5465.editable_QMARK_))
{var idx__5466 = cljs.core.array_map_index_of.call(null,tcoll,key);
if((idx__5466 >= 0))
{(this__5465.arr[idx__5466] = (this__5465.arr[(this__5465.len - 2)]));
(this__5465.arr[(idx__5466 + 1)] = (this__5465.arr[(this__5465.len - 1)]));
var G__5467__5468 = this__5465.arr;
G__5467__5468.pop();
G__5467__5468.pop();
G__5467__5468;
this__5465.len = (this__5465.len - 2);
} else
{}
return tcoll;
} else
{throw (new Error("dissoc! after persistent!"));
}
});
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$ = true;
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
var this__5469 = this;
if(cljs.core.truth_(this__5469.editable_QMARK_))
{var idx__5470 = cljs.core.array_map_index_of.call(null,tcoll,key);
if((idx__5470 === -1))
{if(((this__5469.len + 2) <= (2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD)))
{this__5469.len = (this__5469.len + 2);
this__5469.arr.push(key);
this__5469.arr.push(val);
return tcoll;
} else
{return cljs.core.assoc_BANG_.call(null,cljs.core.array__GT_transient_hash_map.call(null,this__5469.len,this__5469.arr),key,val);
}
} else
{if((val === (this__5469.arr[(idx__5470 + 1)])))
{return tcoll;
} else
{(this__5469.arr[(idx__5470 + 1)] = val);
return tcoll;
}
}
} else
{throw (new Error("assoc! after persistent!"));
}
});
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$ = true;
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
var this__5471 = this;
if(cljs.core.truth_(this__5471.editable_QMARK_))
{if((function (){var G__5472__5473 = o;
if((G__5472__5473 != null))
{if((function (){var or__3824__auto____5474 = (G__5472__5473.cljs$lang$protocol_mask$partition0$ & 1024);
if(or__3824__auto____5474)
{return or__3824__auto____5474;
} else
{return G__5472__5473.cljs$core$IMapEntry$;
}
})())
{return true;
} else
{if((!G__5472__5473.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IMapEntry,G__5472__5473);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IMapEntry,G__5472__5473);
}
})())
{return cljs.core._assoc_BANG_.call(null,tcoll,cljs.core.key.call(null,o),cljs.core.val.call(null,o));
} else
{var es__5475 = cljs.core.seq.call(null,o);
var tcoll__5476 = tcoll;
while(true){
var temp__3971__auto____5477 = cljs.core.first.call(null,es__5475);
if(cljs.core.truth_(temp__3971__auto____5477))
{var e__5478 = temp__3971__auto____5477;
{
var G__5484 = cljs.core.next.call(null,es__5475);
var G__5485 = cljs.core._assoc_BANG_.call(null,tcoll__5476,cljs.core.key.call(null,e__5478),cljs.core.val.call(null,e__5478));
es__5475 = G__5484;
tcoll__5476 = G__5485;
continue;
}
} else
{return tcoll__5476;
}
break;
}
}
} else
{throw (new Error("conj! after persistent!"));
}
});
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
var this__5479 = this;
if(cljs.core.truth_(this__5479.editable_QMARK_))
{this__5479.editable_QMARK_ = false;
return (new cljs.core.PersistentArrayMap(null,cljs.core.quot.call(null,this__5479.len,2),this__5479.arr,null));
} else
{throw (new Error("persistent! called twice"));
}
});
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$ = true;
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,k){
var this__5480 = this;
return cljs.core._lookup.call(null,tcoll,k,null);
});
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,k,not_found){
var this__5481 = this;
if(cljs.core.truth_(this__5481.editable_QMARK_))
{var idx__5482 = cljs.core.array_map_index_of.call(null,tcoll,k);
if((idx__5482 === -1))
{return not_found;
} else
{return (this__5481.arr[(idx__5482 + 1)]);
}
} else
{throw (new Error("lookup after persistent!"));
}
});
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$ = true;
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (tcoll){
var this__5483 = this;
if(cljs.core.truth_(this__5483.editable_QMARK_))
{return cljs.core.quot.call(null,this__5483.len,2);
} else
{throw (new Error("count after persistent!"));
}
});
cljs.core.TransientArrayMap;
void 0;
cljs.core.array__GT_transient_hash_map = (function array__GT_transient_hash_map(len,arr){
var out__5486 = cljs.core.transient$.call(null,cljs.core.ObjMap.fromObject([],{}));
var i__5487 = 0;
while(true){
if((i__5487 < len))
{{
var G__5488 = cljs.core.assoc_BANG_.call(null,out__5486,(arr[i__5487]),(arr[(i__5487 + 1)]));
var G__5489 = (i__5487 + 2);
out__5486 = G__5488;
i__5487 = G__5489;
continue;
}
} else
{return out__5486;
}
break;
}
});
void 0;
void 0;
void 0;
void 0;
void 0;
void 0;
cljs.core.mask = (function mask(hash,shift){
return ((hash >>> shift) & 31);
});
cljs.core.clone_and_set = (function() {
var clone_and_set = null;
var clone_and_set__3 = (function (arr,i,a){
var G__5490__5491 = cljs.core.aclone.call(null,arr);
(G__5490__5491[i] = a);
return G__5490__5491;
});
var clone_and_set__5 = (function (arr,i,a,j,b){
var G__5492__5493 = cljs.core.aclone.call(null,arr);
(G__5492__5493[i] = a);
(G__5492__5493[j] = b);
return G__5492__5493;
});
clone_and_set = function(arr,i,a,j,b){
switch(arguments.length){
case 3:
return clone_and_set__3.call(this,arr,i,a);
case 5:
return clone_and_set__5.call(this,arr,i,a,j,b);
}
throw('Invalid arity: ' + arguments.length);
};
clone_and_set.cljs$lang$arity$3 = clone_and_set__3;
clone_and_set.cljs$lang$arity$5 = clone_and_set__5;
return clone_and_set;
})()
;
cljs.core.remove_pair = (function remove_pair(arr,i){
var new_arr__5494 = cljs.core.make_array.call(null,(arr.length - 2));
cljs.core.array_copy.call(null,arr,0,new_arr__5494,0,(2 * i));
cljs.core.array_copy.call(null,arr,(2 * (i + 1)),new_arr__5494,(2 * i),(new_arr__5494.length - (2 * i)));
return new_arr__5494;
});
cljs.core.bitmap_indexed_node_index = (function bitmap_indexed_node_index(bitmap,bit){
return cljs.core.bit_count.call(null,(bitmap & (bit - 1)));
});
cljs.core.bitpos = (function bitpos(hash,shift){
return (1 << ((hash >>> shift) & 0x01f));
});
cljs.core.edit_and_set = (function() {
var edit_and_set = null;
var edit_and_set__4 = (function (inode,edit,i,a){
var editable__5495 = inode.ensure_editable(edit);
(editable__5495.arr[i] = a);
return editable__5495;
});
var edit_and_set__6 = (function (inode,edit,i,a,j,b){
var editable__5496 = inode.ensure_editable(edit);
(editable__5496.arr[i] = a);
(editable__5496.arr[j] = b);
return editable__5496;
});
edit_and_set = function(inode,edit,i,a,j,b){
switch(arguments.length){
case 4:
return edit_and_set__4.call(this,inode,edit,i,a);
case 6:
return edit_and_set__6.call(this,inode,edit,i,a,j,b);
}
throw('Invalid arity: ' + arguments.length);
};
edit_and_set.cljs$lang$arity$4 = edit_and_set__4;
edit_and_set.cljs$lang$arity$6 = edit_and_set__6;
return edit_and_set;
})()
;
cljs.core.inode_kv_reduce = (function inode_kv_reduce(arr,f,init){
var len__5497 = arr.length;
var i__5498 = 0;
var init__5499 = init;
while(true){
if((i__5498 < len__5497))
{var init__5502 = (function (){var k__5500 = (arr[i__5498]);
if((k__5500 != null))
{return f.call(null,init__5499,k__5500,(arr[(i__5498 + 1)]));
} else
{var node__5501 = (arr[(i__5498 + 1)]);
if((node__5501 != null))
{return node__5501.kv_reduce(f,init__5499);
} else
{return init__5499;
}
}
})();
if(cljs.core.reduced_QMARK_.call(null,init__5502))
{return cljs.core.deref.call(null,init__5502);
} else
{{
var G__5503 = (i__5498 + 2);
var G__5504 = init__5502;
i__5498 = G__5503;
init__5499 = G__5504;
continue;
}
}
} else
{return init__5499;
}
break;
}
});
void 0;

/**
* @constructor
*/
cljs.core.BitmapIndexedNode = (function (edit,bitmap,arr){
this.edit = edit;
this.bitmap = bitmap;
this.arr = arr;
})
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.BitmapIndexedNode");
});
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = (function (e,bit,i){
var this__5505 = this;
var inode__5506 = this;
if((this__5505.bitmap === bit))
{return null;
} else
{var editable__5507 = inode__5506.ensure_editable(e);
var earr__5508 = editable__5507.arr;
var len__5509 = earr__5508.length;
editable__5507.bitmap = (bit ^ editable__5507.bitmap);
cljs.core.array_copy.call(null,earr__5508,(2 * (i + 1)),earr__5508,(2 * i),(len__5509 - (2 * (i + 1))));
(earr__5508[(len__5509 - 2)] = null);
(earr__5508[(len__5509 - 1)] = null);
return editable__5507;
}
});
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = (function (edit,shift,hash,key,val,added_leaf_QMARK_){
var this__5510 = this;
var inode__5511 = this;
var bit__5512 = (1 << ((hash >>> shift) & 0x01f));
var idx__5513 = cljs.core.bitmap_indexed_node_index.call(null,this__5510.bitmap,bit__5512);
if(((this__5510.bitmap & bit__5512) === 0))
{var n__5514 = cljs.core.bit_count.call(null,this__5510.bitmap);
if(((2 * n__5514) < this__5510.arr.length))
{var editable__5515 = inode__5511.ensure_editable(edit);
var earr__5516 = editable__5515.arr;
(added_leaf_QMARK_[0] = true);
cljs.core.array_copy_downward.call(null,earr__5516,(2 * idx__5513),earr__5516,(2 * (idx__5513 + 1)),(2 * (n__5514 - idx__5513)));
(earr__5516[(2 * idx__5513)] = key);
(earr__5516[((2 * idx__5513) + 1)] = val);
editable__5515.bitmap = (editable__5515.bitmap | bit__5512);
return editable__5515;
} else
{if((n__5514 >= 16))
{var nodes__5517 = cljs.core.make_array.call(null,32);
var jdx__5518 = ((hash >>> shift) & 0x01f);
(nodes__5517[jdx__5518] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit,(shift + 5),hash,key,val,added_leaf_QMARK_));
var i__5519 = 0;
var j__5520 = 0;
while(true){
if((i__5519 < 32))
{if((((this__5510.bitmap >>> i__5519) & 1) === 0))
{{
var G__5573 = (i__5519 + 1);
var G__5574 = j__5520;
i__5519 = G__5573;
j__5520 = G__5574;
continue;
}
} else
{(nodes__5517[i__5519] = (((null != (this__5510.arr[j__5520])))?cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit,(shift + 5),cljs.core.hash.call(null,(this__5510.arr[j__5520])),(this__5510.arr[j__5520]),(this__5510.arr[(j__5520 + 1)]),added_leaf_QMARK_):(this__5510.arr[(j__5520 + 1)])));
{
var G__5575 = (i__5519 + 1);
var G__5576 = (j__5520 + 2);
i__5519 = G__5575;
j__5520 = G__5576;
continue;
}
}
} else
{}
break;
}
return (new cljs.core.ArrayNode(edit,(n__5514 + 1),nodes__5517));
} else
{if("\uFDD0'else")
{var new_arr__5521 = cljs.core.make_array.call(null,(2 * (n__5514 + 4)));
cljs.core.array_copy.call(null,this__5510.arr,0,new_arr__5521,0,(2 * idx__5513));
(new_arr__5521[(2 * idx__5513)] = key);
(added_leaf_QMARK_[0] = true);
(new_arr__5521[((2 * idx__5513) + 1)] = val);
cljs.core.array_copy.call(null,this__5510.arr,(2 * idx__5513),new_arr__5521,(2 * (idx__5513 + 1)),(2 * (n__5514 - idx__5513)));
var editable__5522 = inode__5511.ensure_editable(edit);
editable__5522.arr = new_arr__5521;
editable__5522.bitmap = (editable__5522.bitmap | bit__5512);
return editable__5522;
} else
{return null;
}
}
}
} else
{var key_or_nil__5523 = (this__5510.arr[(2 * idx__5513)]);
var val_or_node__5524 = (this__5510.arr[((2 * idx__5513) + 1)]);
if((null == key_or_nil__5523))
{var n__5525 = val_or_node__5524.inode_assoc_BANG_(edit,(shift + 5),hash,key,val,added_leaf_QMARK_);
if((n__5525 === val_or_node__5524))
{return inode__5511;
} else
{return cljs.core.edit_and_set.call(null,inode__5511,edit,((2 * idx__5513) + 1),n__5525);
}
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5523))
{if((val === val_or_node__5524))
{return inode__5511;
} else
{return cljs.core.edit_and_set.call(null,inode__5511,edit,((2 * idx__5513) + 1),val);
}
} else
{if("\uFDD0'else")
{(added_leaf_QMARK_[0] = true);
return cljs.core.edit_and_set.call(null,inode__5511,edit,(2 * idx__5513),null,((2 * idx__5513) + 1),cljs.core.create_node.call(null,edit,(shift + 5),key_or_nil__5523,val_or_node__5524,hash,key,val));
} else
{return null;
}
}
}
}
});
cljs.core.BitmapIndexedNode.prototype.inode_seq = (function (){
var this__5526 = this;
var inode__5527 = this;
return cljs.core.create_inode_seq.call(null,this__5526.arr);
});
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = (function (edit,shift,hash,key,removed_leaf_QMARK_){
var this__5528 = this;
var inode__5529 = this;
var bit__5530 = (1 << ((hash >>> shift) & 0x01f));
if(((this__5528.bitmap & bit__5530) === 0))
{return inode__5529;
} else
{var idx__5531 = cljs.core.bitmap_indexed_node_index.call(null,this__5528.bitmap,bit__5530);
var key_or_nil__5532 = (this__5528.arr[(2 * idx__5531)]);
var val_or_node__5533 = (this__5528.arr[((2 * idx__5531) + 1)]);
if((null == key_or_nil__5532))
{var n__5534 = val_or_node__5533.inode_without_BANG_(edit,(shift + 5),hash,key,removed_leaf_QMARK_);
if((n__5534 === val_or_node__5533))
{return inode__5529;
} else
{if((null != n__5534))
{return cljs.core.edit_and_set.call(null,inode__5529,edit,((2 * idx__5531) + 1),n__5534);
} else
{if((this__5528.bitmap === bit__5530))
{return null;
} else
{if("\uFDD0'else")
{return inode__5529.edit_and_remove_pair(edit,bit__5530,idx__5531);
} else
{return null;
}
}
}
}
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5532))
{(removed_leaf_QMARK_[0] = true);
return inode__5529.edit_and_remove_pair(edit,bit__5530,idx__5531);
} else
{if("\uFDD0'else")
{return inode__5529;
} else
{return null;
}
}
}
}
});
cljs.core.BitmapIndexedNode.prototype.ensure_editable = (function (e){
var this__5535 = this;
var inode__5536 = this;
if((e === this__5535.edit))
{return inode__5536;
} else
{var n__5537 = cljs.core.bit_count.call(null,this__5535.bitmap);
var new_arr__5538 = cljs.core.make_array.call(null,(((n__5537 < 0))?4:(2 * (n__5537 + 1))));
cljs.core.array_copy.call(null,this__5535.arr,0,new_arr__5538,0,(2 * n__5537));
return (new cljs.core.BitmapIndexedNode(e,this__5535.bitmap,new_arr__5538));
}
});
cljs.core.BitmapIndexedNode.prototype.kv_reduce = (function (f,init){
var this__5539 = this;
var inode__5540 = this;
return cljs.core.inode_kv_reduce.call(null,this__5539.arr,f,init);
});
cljs.core.BitmapIndexedNode.prototype.inode_find = (function() {
var G__5577 = null;
var G__5577__3 = (function (shift,hash,key){
var this__5541 = this;
var inode__5542 = this;
var bit__5543 = (1 << ((hash >>> shift) & 0x01f));
if(((this__5541.bitmap & bit__5543) === 0))
{return null;
} else
{var idx__5544 = cljs.core.bitmap_indexed_node_index.call(null,this__5541.bitmap,bit__5543);
var key_or_nil__5545 = (this__5541.arr[(2 * idx__5544)]);
var val_or_node__5546 = (this__5541.arr[((2 * idx__5544) + 1)]);
if((null == key_or_nil__5545))
{return val_or_node__5546.inode_find((shift + 5),hash,key);
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5545))
{return cljs.core.PersistentVector.fromArray([key_or_nil__5545,val_or_node__5546]);
} else
{if("\uFDD0'else")
{return null;
} else
{return null;
}
}
}
}
});
var G__5577__4 = (function (shift,hash,key,not_found){
var this__5547 = this;
var inode__5548 = this;
var bit__5549 = (1 << ((hash >>> shift) & 0x01f));
if(((this__5547.bitmap & bit__5549) === 0))
{return not_found;
} else
{var idx__5550 = cljs.core.bitmap_indexed_node_index.call(null,this__5547.bitmap,bit__5549);
var key_or_nil__5551 = (this__5547.arr[(2 * idx__5550)]);
var val_or_node__5552 = (this__5547.arr[((2 * idx__5550) + 1)]);
if((null == key_or_nil__5551))
{return val_or_node__5552.inode_find((shift + 5),hash,key,not_found);
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5551))
{return cljs.core.PersistentVector.fromArray([key_or_nil__5551,val_or_node__5552]);
} else
{if("\uFDD0'else")
{return not_found;
} else
{return null;
}
}
}
}
});
G__5577 = function(shift,hash,key,not_found){
switch(arguments.length){
case 3:
return G__5577__3.call(this,shift,hash,key);
case 4:
return G__5577__4.call(this,shift,hash,key,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5577;
})()
;
cljs.core.BitmapIndexedNode.prototype.inode_without = (function (shift,hash,key){
var this__5553 = this;
var inode__5554 = this;
var bit__5555 = (1 << ((hash >>> shift) & 0x01f));
if(((this__5553.bitmap & bit__5555) === 0))
{return inode__5554;
} else
{var idx__5556 = cljs.core.bitmap_indexed_node_index.call(null,this__5553.bitmap,bit__5555);
var key_or_nil__5557 = (this__5553.arr[(2 * idx__5556)]);
var val_or_node__5558 = (this__5553.arr[((2 * idx__5556) + 1)]);
if((null == key_or_nil__5557))
{var n__5559 = val_or_node__5558.inode_without((shift + 5),hash,key);
if((n__5559 === val_or_node__5558))
{return inode__5554;
} else
{if((null != n__5559))
{return (new cljs.core.BitmapIndexedNode(null,this__5553.bitmap,cljs.core.clone_and_set.call(null,this__5553.arr,((2 * idx__5556) + 1),n__5559)));
} else
{if((this__5553.bitmap === bit__5555))
{return null;
} else
{if("\uFDD0'else")
{return (new cljs.core.BitmapIndexedNode(null,(this__5553.bitmap ^ bit__5555),cljs.core.remove_pair.call(null,this__5553.arr,idx__5556)));
} else
{return null;
}
}
}
}
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5557))
{return (new cljs.core.BitmapIndexedNode(null,(this__5553.bitmap ^ bit__5555),cljs.core.remove_pair.call(null,this__5553.arr,idx__5556)));
} else
{if("\uFDD0'else")
{return inode__5554;
} else
{return null;
}
}
}
}
});
cljs.core.BitmapIndexedNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
var this__5560 = this;
var inode__5561 = this;
var bit__5562 = (1 << ((hash >>> shift) & 0x01f));
var idx__5563 = cljs.core.bitmap_indexed_node_index.call(null,this__5560.bitmap,bit__5562);
if(((this__5560.bitmap & bit__5562) === 0))
{var n__5564 = cljs.core.bit_count.call(null,this__5560.bitmap);
if((n__5564 >= 16))
{var nodes__5565 = cljs.core.make_array.call(null,32);
var jdx__5566 = ((hash >>> shift) & 0x01f);
(nodes__5565[jdx__5566] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + 5),hash,key,val,added_leaf_QMARK_));
var i__5567 = 0;
var j__5568 = 0;
while(true){
if((i__5567 < 32))
{if((((this__5560.bitmap >>> i__5567) & 1) === 0))
{{
var G__5578 = (i__5567 + 1);
var G__5579 = j__5568;
i__5567 = G__5578;
j__5568 = G__5579;
continue;
}
} else
{(nodes__5565[i__5567] = (((null != (this__5560.arr[j__5568])))?cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + 5),cljs.core.hash.call(null,(this__5560.arr[j__5568])),(this__5560.arr[j__5568]),(this__5560.arr[(j__5568 + 1)]),added_leaf_QMARK_):(this__5560.arr[(j__5568 + 1)])));
{
var G__5580 = (i__5567 + 1);
var G__5581 = (j__5568 + 2);
i__5567 = G__5580;
j__5568 = G__5581;
continue;
}
}
} else
{}
break;
}
return (new cljs.core.ArrayNode(null,(n__5564 + 1),nodes__5565));
} else
{var new_arr__5569 = cljs.core.make_array.call(null,(2 * (n__5564 + 1)));
cljs.core.array_copy.call(null,this__5560.arr,0,new_arr__5569,0,(2 * idx__5563));
(new_arr__5569[(2 * idx__5563)] = key);
(added_leaf_QMARK_[0] = true);
(new_arr__5569[((2 * idx__5563) + 1)] = val);
cljs.core.array_copy.call(null,this__5560.arr,(2 * idx__5563),new_arr__5569,(2 * (idx__5563 + 1)),(2 * (n__5564 - idx__5563)));
return (new cljs.core.BitmapIndexedNode(null,(this__5560.bitmap | bit__5562),new_arr__5569));
}
} else
{var key_or_nil__5570 = (this__5560.arr[(2 * idx__5563)]);
var val_or_node__5571 = (this__5560.arr[((2 * idx__5563) + 1)]);
if((null == key_or_nil__5570))
{var n__5572 = val_or_node__5571.inode_assoc((shift + 5),hash,key,val,added_leaf_QMARK_);
if((n__5572 === val_or_node__5571))
{return inode__5561;
} else
{return (new cljs.core.BitmapIndexedNode(null,this__5560.bitmap,cljs.core.clone_and_set.call(null,this__5560.arr,((2 * idx__5563) + 1),n__5572)));
}
} else
{if(cljs.core._EQ_.call(null,key,key_or_nil__5570))
{if((val === val_or_node__5571))
{return inode__5561;
} else
{return (new cljs.core.BitmapIndexedNode(null,this__5560.bitmap,cljs.core.clone_and_set.call(null,this__5560.arr,((2 * idx__5563) + 1),val)));
}
} else
{if("\uFDD0'else")
{(added_leaf_QMARK_[0] = true);
return (new cljs.core.BitmapIndexedNode(null,this__5560.bitmap,cljs.core.clone_and_set.call(null,this__5560.arr,(2 * idx__5563),null,((2 * idx__5563) + 1),cljs.core.create_node.call(null,(shift + 5),key_or_nil__5570,val_or_node__5571,hash,key,val))));
} else
{return null;
}
}
}
}
});
cljs.core.BitmapIndexedNode;
cljs.core.BitmapIndexedNode.EMPTY = (new cljs.core.BitmapIndexedNode(null,0,cljs.core.make_array.call(null,0)));
cljs.core.pack_array_node = (function pack_array_node(array_node,edit,idx){
var arr__5582 = array_node.arr;
var len__5583 = (2 * (array_node.cnt - 1));
var new_arr__5584 = cljs.core.make_array.call(null,len__5583);
var i__5585 = 0;
var j__5586 = 1;
var bitmap__5587 = 0;
while(true){
if((i__5585 < len__5583))
{if((function (){var and__3822__auto____5588 = (i__5585 != idx);
if(and__3822__auto____5588)
{return (null != (arr__5582[i__5585]));
} else
{return and__3822__auto____5588;
}
})())
{(new_arr__5584[j__5586] = (arr__5582[i__5585]));
{
var G__5589 = (i__5585 + 1);
var G__5590 = (j__5586 + 2);
var G__5591 = (bitmap__5587 | (1 << i__5585));
i__5585 = G__5589;
j__5586 = G__5590;
bitmap__5587 = G__5591;
continue;
}
} else
{{
var G__5592 = (i__5585 + 1);
var G__5593 = j__5586;
var G__5594 = bitmap__5587;
i__5585 = G__5592;
j__5586 = G__5593;
bitmap__5587 = G__5594;
continue;
}
}
} else
{return (new cljs.core.BitmapIndexedNode(edit,bitmap__5587,new_arr__5584));
}
break;
}
});

/**
* @constructor
*/
cljs.core.ArrayNode = (function (edit,cnt,arr){
this.edit = edit;
this.cnt = cnt;
this.arr = arr;
})
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.ArrayNode");
});
cljs.core.ArrayNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
var this__5595 = this;
var inode__5596 = this;
var idx__5597 = ((hash >>> shift) & 0x01f);
var node__5598 = (this__5595.arr[idx__5597]);
if((null == node__5598))
{return (new cljs.core.ArrayNode(null,(this__5595.cnt + 1),cljs.core.clone_and_set.call(null,this__5595.arr,idx__5597,cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + 5),hash,key,val,added_leaf_QMARK_))));
} else
{var n__5599 = node__5598.inode_assoc((shift + 5),hash,key,val,added_leaf_QMARK_);
if((n__5599 === node__5598))
{return inode__5596;
} else
{return (new cljs.core.ArrayNode(null,this__5595.cnt,cljs.core.clone_and_set.call(null,this__5595.arr,idx__5597,n__5599)));
}
}
});
cljs.core.ArrayNode.prototype.inode_without = (function (shift,hash,key){
var this__5600 = this;
var inode__5601 = this;
var idx__5602 = ((hash >>> shift) & 0x01f);
var node__5603 = (this__5600.arr[idx__5602]);
if((null != node__5603))
{var n__5604 = node__5603.inode_without((shift + 5),hash,key);
if((n__5604 === node__5603))
{return inode__5601;
} else
{if((n__5604 == null))
{if((this__5600.cnt <= 8))
{return cljs.core.pack_array_node.call(null,inode__5601,null,idx__5602);
} else
{return (new cljs.core.ArrayNode(null,(this__5600.cnt - 1),cljs.core.clone_and_set.call(null,this__5600.arr,idx__5602,n__5604)));
}
} else
{if("\uFDD0'else")
{return (new cljs.core.ArrayNode(null,this__5600.cnt,cljs.core.clone_and_set.call(null,this__5600.arr,idx__5602,n__5604)));
} else
{return null;
}
}
}
} else
{return inode__5601;
}
});
cljs.core.ArrayNode.prototype.inode_find = (function() {
var G__5636 = null;
var G__5636__3 = (function (shift,hash,key){
var this__5605 = this;
var inode__5606 = this;
var idx__5607 = ((hash >>> shift) & 0x01f);
var node__5608 = (this__5605.arr[idx__5607]);
if((null != node__5608))
{return node__5608.inode_find((shift + 5),hash,key);
} else
{return null;
}
});
var G__5636__4 = (function (shift,hash,key,not_found){
var this__5609 = this;
var inode__5610 = this;
var idx__5611 = ((hash >>> shift) & 0x01f);
var node__5612 = (this__5609.arr[idx__5611]);
if((null != node__5612))
{return node__5612.inode_find((shift + 5),hash,key,not_found);
} else
{return not_found;
}
});
G__5636 = function(shift,hash,key,not_found){
switch(arguments.length){
case 3:
return G__5636__3.call(this,shift,hash,key);
case 4:
return G__5636__4.call(this,shift,hash,key,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5636;
})()
;
cljs.core.ArrayNode.prototype.inode_seq = (function (){
var this__5613 = this;
var inode__5614 = this;
return cljs.core.create_array_node_seq.call(null,this__5613.arr);
});
cljs.core.ArrayNode.prototype.ensure_editable = (function (e){
var this__5615 = this;
var inode__5616 = this;
if((e === this__5615.edit))
{return inode__5616;
} else
{return (new cljs.core.ArrayNode(e,this__5615.cnt,cljs.core.aclone.call(null,this__5615.arr)));
}
});
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = (function (edit,shift,hash,key,val,added_leaf_QMARK_){
var this__5617 = this;
var inode__5618 = this;
var idx__5619 = ((hash >>> shift) & 0x01f);
var node__5620 = (this__5617.arr[idx__5619]);
if((null == node__5620))
{var editable__5621 = cljs.core.edit_and_set.call(null,inode__5618,edit,idx__5619,cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit,(shift + 5),hash,key,val,added_leaf_QMARK_));
editable__5621.cnt = (editable__5621.cnt + 1);
return editable__5621;
} else
{var n__5622 = node__5620.inode_assoc_BANG_(edit,(shift + 5),hash,key,val,added_leaf_QMARK_);
if((n__5622 === node__5620))
{return inode__5618;
} else
{return cljs.core.edit_and_set.call(null,inode__5618,edit,idx__5619,n__5622);
}
}
});
cljs.core.ArrayNode.prototype.inode_without_BANG_ = (function (edit,shift,hash,key,removed_leaf_QMARK_){
var this__5623 = this;
var inode__5624 = this;
var idx__5625 = ((hash >>> shift) & 0x01f);
var node__5626 = (this__5623.arr[idx__5625]);
if((null == node__5626))
{return inode__5624;
} else
{var n__5627 = node__5626.inode_without_BANG_(edit,(shift + 5),hash,key,removed_leaf_QMARK_);
if((n__5627 === node__5626))
{return inode__5624;
} else
{if((null == n__5627))
{if((this__5623.cnt <= 8))
{return cljs.core.pack_array_node.call(null,inode__5624,edit,idx__5625);
} else
{var editable__5628 = cljs.core.edit_and_set.call(null,inode__5624,edit,idx__5625,n__5627);
editable__5628.cnt = (editable__5628.cnt - 1);
return editable__5628;
}
} else
{if("\uFDD0'else")
{return cljs.core.edit_and_set.call(null,inode__5624,edit,idx__5625,n__5627);
} else
{return null;
}
}
}
}
});
cljs.core.ArrayNode.prototype.kv_reduce = (function (f,init){
var this__5629 = this;
var inode__5630 = this;
var len__5631 = this__5629.arr.length;
var i__5632 = 0;
var init__5633 = init;
while(true){
if((i__5632 < len__5631))
{var node__5634 = (this__5629.arr[i__5632]);
if((node__5634 != null))
{var init__5635 = node__5634.kv_reduce(f,init__5633);
if(cljs.core.reduced_QMARK_.call(null,init__5635))
{return cljs.core.deref.call(null,init__5635);
} else
{{
var G__5637 = (i__5632 + 1);
var G__5638 = init__5635;
i__5632 = G__5637;
init__5633 = G__5638;
continue;
}
}
} else
{return null;
}
} else
{return init__5633;
}
break;
}
});
cljs.core.ArrayNode;
cljs.core.hash_collision_node_find_index = (function hash_collision_node_find_index(arr,cnt,key){
var lim__5639 = (2 * cnt);
var i__5640 = 0;
while(true){
if((i__5640 < lim__5639))
{if(cljs.core._EQ_.call(null,key,(arr[i__5640])))
{return i__5640;
} else
{{
var G__5641 = (i__5640 + 2);
i__5640 = G__5641;
continue;
}
}
} else
{return -1;
}
break;
}
});

/**
* @constructor
*/
cljs.core.HashCollisionNode = (function (edit,collision_hash,cnt,arr){
this.edit = edit;
this.collision_hash = collision_hash;
this.cnt = cnt;
this.arr = arr;
})
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.HashCollisionNode");
});
cljs.core.HashCollisionNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
var this__5642 = this;
var inode__5643 = this;
if((hash === this__5642.collision_hash))
{var idx__5644 = cljs.core.hash_collision_node_find_index.call(null,this__5642.arr,this__5642.cnt,key);
if((idx__5644 === -1))
{var len__5645 = this__5642.arr.length;
var new_arr__5646 = cljs.core.make_array.call(null,(len__5645 + 2));
cljs.core.array_copy.call(null,this__5642.arr,0,new_arr__5646,0,len__5645);
(new_arr__5646[len__5645] = key);
(new_arr__5646[(len__5645 + 1)] = val);
(added_leaf_QMARK_[0] = true);
return (new cljs.core.HashCollisionNode(null,this__5642.collision_hash,(this__5642.cnt + 1),new_arr__5646));
} else
{if(cljs.core._EQ_.call(null,(this__5642.arr[idx__5644]),val))
{return inode__5643;
} else
{return (new cljs.core.HashCollisionNode(null,this__5642.collision_hash,this__5642.cnt,cljs.core.clone_and_set.call(null,this__5642.arr,(idx__5644 + 1),val)));
}
}
} else
{return (new cljs.core.BitmapIndexedNode(null,(1 << ((this__5642.collision_hash >>> shift) & 0x01f)),[null,inode__5643])).inode_assoc(shift,hash,key,val,added_leaf_QMARK_);
}
});
cljs.core.HashCollisionNode.prototype.inode_without = (function (shift,hash,key){
var this__5647 = this;
var inode__5648 = this;
var idx__5649 = cljs.core.hash_collision_node_find_index.call(null,this__5647.arr,this__5647.cnt,key);
if((idx__5649 === -1))
{return inode__5648;
} else
{if((this__5647.cnt === 1))
{return null;
} else
{if("\uFDD0'else")
{return (new cljs.core.HashCollisionNode(null,this__5647.collision_hash,(this__5647.cnt - 1),cljs.core.remove_pair.call(null,this__5647.arr,cljs.core.quot.call(null,idx__5649,2))));
} else
{return null;
}
}
}
});
cljs.core.HashCollisionNode.prototype.inode_find = (function() {
var G__5676 = null;
var G__5676__3 = (function (shift,hash,key){
var this__5650 = this;
var inode__5651 = this;
var idx__5652 = cljs.core.hash_collision_node_find_index.call(null,this__5650.arr,this__5650.cnt,key);
if((idx__5652 < 0))
{return null;
} else
{if(cljs.core._EQ_.call(null,key,(this__5650.arr[idx__5652])))
{return cljs.core.PersistentVector.fromArray([(this__5650.arr[idx__5652]),(this__5650.arr[(idx__5652 + 1)])]);
} else
{if("\uFDD0'else")
{return null;
} else
{return null;
}
}
}
});
var G__5676__4 = (function (shift,hash,key,not_found){
var this__5653 = this;
var inode__5654 = this;
var idx__5655 = cljs.core.hash_collision_node_find_index.call(null,this__5653.arr,this__5653.cnt,key);
if((idx__5655 < 0))
{return not_found;
} else
{if(cljs.core._EQ_.call(null,key,(this__5653.arr[idx__5655])))
{return cljs.core.PersistentVector.fromArray([(this__5653.arr[idx__5655]),(this__5653.arr[(idx__5655 + 1)])]);
} else
{if("\uFDD0'else")
{return not_found;
} else
{return null;
}
}
}
});
G__5676 = function(shift,hash,key,not_found){
switch(arguments.length){
case 3:
return G__5676__3.call(this,shift,hash,key);
case 4:
return G__5676__4.call(this,shift,hash,key,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5676;
})()
;
cljs.core.HashCollisionNode.prototype.inode_seq = (function (){
var this__5656 = this;
var inode__5657 = this;
return cljs.core.create_inode_seq.call(null,this__5656.arr);
});
cljs.core.HashCollisionNode.prototype.ensure_editable = (function() {
var G__5677 = null;
var G__5677__1 = (function (e){
var this__5658 = this;
var inode__5659 = this;
if((e === this__5658.edit))
{return inode__5659;
} else
{var new_arr__5660 = cljs.core.make_array.call(null,(2 * (this__5658.cnt + 1)));
cljs.core.array_copy.call(null,this__5658.arr,0,new_arr__5660,0,(2 * this__5658.cnt));
return (new cljs.core.HashCollisionNode(e,this__5658.collision_hash,this__5658.cnt,new_arr__5660));
}
});
var G__5677__3 = (function (e,count,array){
var this__5661 = this;
var inode__5662 = this;
if((e === this__5661.edit))
{this__5661.arr = array;
this__5661.cnt = count;
return inode__5662;
} else
{return (new cljs.core.HashCollisionNode(this__5661.edit,this__5661.collision_hash,count,array));
}
});
G__5677 = function(e,count,array){
switch(arguments.length){
case 1:
return G__5677__1.call(this,e);
case 3:
return G__5677__3.call(this,e,count,array);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5677;
})()
;
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = (function (edit,shift,hash,key,val,added_leaf_QMARK_){
var this__5663 = this;
var inode__5664 = this;
if((hash === this__5663.collision_hash))
{var idx__5665 = cljs.core.hash_collision_node_find_index.call(null,this__5663.arr,this__5663.cnt,key);
if((idx__5665 === -1))
{if((this__5663.arr.length > (2 * this__5663.cnt)))
{var editable__5666 = cljs.core.edit_and_set.call(null,inode__5664,edit,(2 * this__5663.cnt),key,((2 * this__5663.cnt) + 1),val);
(added_leaf_QMARK_[0] = true);
editable__5666.cnt = (editable__5666.cnt + 1);
return editable__5666;
} else
{var len__5667 = this__5663.arr.length;
var new_arr__5668 = cljs.core.make_array.call(null,(len__5667 + 2));
cljs.core.array_copy.call(null,this__5663.arr,0,new_arr__5668,0,len__5667);
(new_arr__5668[len__5667] = key);
(new_arr__5668[(len__5667 + 1)] = val);
(added_leaf_QMARK_[0] = true);
return inode__5664.ensure_editable(edit,(this__5663.cnt + 1),new_arr__5668);
}
} else
{if(((this__5663.arr[(idx__5665 + 1)]) === val))
{return inode__5664;
} else
{return cljs.core.edit_and_set.call(null,inode__5664,edit,(idx__5665 + 1),val);
}
}
} else
{return (new cljs.core.BitmapIndexedNode(edit,(1 << ((this__5663.collision_hash >>> shift) & 0x01f)),[null,inode__5664,null,null])).inode_assoc_BANG_(edit,shift,hash,key,val,added_leaf_QMARK_);
}
});
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = (function (edit,shift,hash,key,removed_leaf_QMARK_){
var this__5669 = this;
var inode__5670 = this;
var idx__5671 = cljs.core.hash_collision_node_find_index.call(null,this__5669.arr,this__5669.cnt,key);
if((idx__5671 === -1))
{return inode__5670;
} else
{(removed_leaf_QMARK_[0] = true);
if((this__5669.cnt === 1))
{return null;
} else
{var editable__5672 = inode__5670.ensure_editable(edit);
var earr__5673 = editable__5672.arr;
(earr__5673[idx__5671] = (earr__5673[((2 * this__5669.cnt) - 2)]));
(earr__5673[(idx__5671 + 1)] = (earr__5673[((2 * this__5669.cnt) - 1)]));
(earr__5673[((2 * this__5669.cnt) - 1)] = null);
(earr__5673[((2 * this__5669.cnt) - 2)] = null);
editable__5672.cnt = (editable__5672.cnt - 1);
return editable__5672;
}
}
});
cljs.core.HashCollisionNode.prototype.kv_reduce = (function (f,init){
var this__5674 = this;
var inode__5675 = this;
return cljs.core.inode_kv_reduce.call(null,this__5674.arr,f,init);
});
cljs.core.HashCollisionNode;
cljs.core.create_node = (function() {
var create_node = null;
var create_node__6 = (function (shift,key1,val1,key2hash,key2,val2){
var key1hash__5678 = cljs.core.hash.call(null,key1);
if((key1hash__5678 === key2hash))
{return (new cljs.core.HashCollisionNode(null,key1hash__5678,2,[key1,val1,key2,val2]));
} else
{var added_leaf_QMARK___5679 = [false];
return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift,key1hash__5678,key1,val1,added_leaf_QMARK___5679).inode_assoc(shift,key2hash,key2,val2,added_leaf_QMARK___5679);
}
});
var create_node__7 = (function (edit,shift,key1,val1,key2hash,key2,val2){
var key1hash__5680 = cljs.core.hash.call(null,key1);
if((key1hash__5680 === key2hash))
{return (new cljs.core.HashCollisionNode(null,key1hash__5680,2,[key1,val1,key2,val2]));
} else
{var added_leaf_QMARK___5681 = [false];
return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit,shift,key1hash__5680,key1,val1,added_leaf_QMARK___5681).inode_assoc_BANG_(edit,shift,key2hash,key2,val2,added_leaf_QMARK___5681);
}
});
create_node = function(edit,shift,key1,val1,key2hash,key2,val2){
switch(arguments.length){
case 6:
return create_node__6.call(this,edit,shift,key1,val1,key2hash,key2);
case 7:
return create_node__7.call(this,edit,shift,key1,val1,key2hash,key2,val2);
}
throw('Invalid arity: ' + arguments.length);
};
create_node.cljs$lang$arity$6 = create_node__6;
create_node.cljs$lang$arity$7 = create_node__7;
return create_node;
})()
;

/**
* @constructor
*/
cljs.core.NodeSeq = (function (meta,nodes,i,s,__hash){
this.meta = meta;
this.nodes = nodes;
this.i = i;
this.s = s;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15925324;
})
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.NodeSeq");
});
cljs.core.NodeSeq.prototype.cljs$core$IHash$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5682 = this;
var h__264__auto____5683 = this__5682.__hash;
if((h__264__auto____5683 != null))
{return h__264__auto____5683;
} else
{var h__264__auto____5684 = cljs.core.hash_coll.call(null,coll);
this__5682.__hash = h__264__auto____5684;
return h__264__auto____5684;
}
});
cljs.core.NodeSeq.prototype.cljs$core$ISequential$ = true;
cljs.core.NodeSeq.prototype.cljs$core$ICollection$ = true;
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5685 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.NodeSeq.prototype.toString = (function (){
var this__5686 = this;
var this$__5687 = this;
return cljs.core.pr_str.call(null,this$__5687);
});
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this__5688 = this;
return this$;
});
cljs.core.NodeSeq.prototype.cljs$core$ISeq$ = true;
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__5689 = this;
if((this__5689.s == null))
{return cljs.core.PersistentVector.fromArray([(this__5689.nodes[this__5689.i]),(this__5689.nodes[(this__5689.i + 1)])]);
} else
{return cljs.core.first.call(null,this__5689.s);
}
});
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__5690 = this;
if((this__5690.s == null))
{return cljs.core.create_inode_seq.call(null,this__5690.nodes,(this__5690.i + 2),null);
} else
{return cljs.core.create_inode_seq.call(null,this__5690.nodes,this__5690.i,cljs.core.next.call(null,this__5690.s));
}
});
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5691 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5692 = this;
return (new cljs.core.NodeSeq(meta,this__5692.nodes,this__5692.i,this__5692.s,this__5692.__hash));
});
cljs.core.NodeSeq.prototype.cljs$core$IMeta$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5693 = this;
return this__5693.meta;
});
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5694 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__5694.meta);
});
cljs.core.NodeSeq;
cljs.core.create_inode_seq = (function() {
var create_inode_seq = null;
var create_inode_seq__1 = (function (nodes){
return create_inode_seq.call(null,nodes,0,null);
});
var create_inode_seq__3 = (function (nodes,i,s){
if((s == null))
{var len__5695 = nodes.length;
var j__5696 = i;
while(true){
if((j__5696 < len__5695))
{if((null != (nodes[j__5696])))
{return (new cljs.core.NodeSeq(null,nodes,j__5696,null,null));
} else
{var temp__3971__auto____5697 = (nodes[(j__5696 + 1)]);
if(cljs.core.truth_(temp__3971__auto____5697))
{var node__5698 = temp__3971__auto____5697;
var temp__3971__auto____5699 = node__5698.inode_seq();
if(cljs.core.truth_(temp__3971__auto____5699))
{var node_seq__5700 = temp__3971__auto____5699;
return (new cljs.core.NodeSeq(null,nodes,(j__5696 + 2),node_seq__5700,null));
} else
{{
var G__5701 = (j__5696 + 2);
j__5696 = G__5701;
continue;
}
}
} else
{{
var G__5702 = (j__5696 + 2);
j__5696 = G__5702;
continue;
}
}
}
} else
{return null;
}
break;
}
} else
{return (new cljs.core.NodeSeq(null,nodes,i,s,null));
}
});
create_inode_seq = function(nodes,i,s){
switch(arguments.length){
case 1:
return create_inode_seq__1.call(this,nodes);
case 3:
return create_inode_seq__3.call(this,nodes,i,s);
}
throw('Invalid arity: ' + arguments.length);
};
create_inode_seq.cljs$lang$arity$1 = create_inode_seq__1;
create_inode_seq.cljs$lang$arity$3 = create_inode_seq__3;
return create_inode_seq;
})()
;

/**
* @constructor
*/
cljs.core.ArrayNodeSeq = (function (meta,nodes,i,s,__hash){
this.meta = meta;
this.nodes = nodes;
this.i = i;
this.s = s;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15925324;
})
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.ArrayNodeSeq");
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5703 = this;
var h__264__auto____5704 = this__5703.__hash;
if((h__264__auto____5704 != null))
{return h__264__auto____5704;
} else
{var h__264__auto____5705 = cljs.core.hash_coll.call(null,coll);
this__5703.__hash = h__264__auto____5705;
return h__264__auto____5705;
}
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISequential$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5706 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.ArrayNodeSeq.prototype.toString = (function (){
var this__5707 = this;
var this$__5708 = this;
return cljs.core.pr_str.call(null,this$__5708);
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this__5709 = this;
return this$;
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
var this__5710 = this;
return cljs.core.first.call(null,this__5710.s);
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
var this__5711 = this;
return cljs.core.create_array_node_seq.call(null,null,this__5711.nodes,this__5711.i,cljs.core.next.call(null,this__5711.s));
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5712 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5713 = this;
return (new cljs.core.ArrayNodeSeq(meta,this__5713.nodes,this__5713.i,this__5713.s,this__5713.__hash));
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5714 = this;
return this__5714.meta;
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5715 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__5715.meta);
});
cljs.core.ArrayNodeSeq;
cljs.core.create_array_node_seq = (function() {
var create_array_node_seq = null;
var create_array_node_seq__1 = (function (nodes){
return create_array_node_seq.call(null,null,nodes,0,null);
});
var create_array_node_seq__4 = (function (meta,nodes,i,s){
if((s == null))
{var len__5716 = nodes.length;
var j__5717 = i;
while(true){
if((j__5717 < len__5716))
{var temp__3971__auto____5718 = (nodes[j__5717]);
if(cljs.core.truth_(temp__3971__auto____5718))
{var nj__5719 = temp__3971__auto____5718;
var temp__3971__auto____5720 = nj__5719.inode_seq();
if(cljs.core.truth_(temp__3971__auto____5720))
{var ns__5721 = temp__3971__auto____5720;
return (new cljs.core.ArrayNodeSeq(meta,nodes,(j__5717 + 1),ns__5721,null));
} else
{{
var G__5722 = (j__5717 + 1);
j__5717 = G__5722;
continue;
}
}
} else
{{
var G__5723 = (j__5717 + 1);
j__5717 = G__5723;
continue;
}
}
} else
{return null;
}
break;
}
} else
{return (new cljs.core.ArrayNodeSeq(meta,nodes,i,s,null));
}
});
create_array_node_seq = function(meta,nodes,i,s){
switch(arguments.length){
case 1:
return create_array_node_seq__1.call(this,meta);
case 4:
return create_array_node_seq__4.call(this,meta,nodes,i,s);
}
throw('Invalid arity: ' + arguments.length);
};
create_array_node_seq.cljs$lang$arity$1 = create_array_node_seq__1;
create_array_node_seq.cljs$lang$arity$4 = create_array_node_seq__4;
return create_array_node_seq;
})()
;
void 0;

/**
* @constructor
*/
cljs.core.PersistentHashMap = (function (meta,cnt,root,has_nil_QMARK_,nil_val,__hash){
this.meta = meta;
this.cnt = cnt;
this.root = root;
this.has_nil_QMARK_ = has_nil_QMARK_;
this.nil_val = nil_val;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 2155545487;
})
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentHashMap");
});
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
var this__5728 = this;
return (new cljs.core.TransientHashMap({},this__5728.root,this__5728.cnt,this__5728.has_nil_QMARK_,this__5728.nil_val));
});
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5729 = this;
var h__264__auto____5730 = this__5729.__hash;
if((h__264__auto____5730 != null))
{return h__264__auto____5730;
} else
{var h__264__auto____5731 = cljs.core.hash_imap.call(null,coll);
this__5729.__hash = h__264__auto____5731;
return h__264__auto____5731;
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5732 = this;
return cljs.core._lookup.call(null,coll,k,null);
});
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5733 = this;
if((k == null))
{if(cljs.core.truth_(this__5733.has_nil_QMARK_))
{return this__5733.nil_val;
} else
{return not_found;
}
} else
{if((this__5733.root == null))
{return not_found;
} else
{if("\uFDD0'else")
{return cljs.core.nth.call(null,this__5733.root.inode_find(0,cljs.core.hash.call(null,k),k,[null,not_found]),1);
} else
{return null;
}
}
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5734 = this;
if((k == null))
{if(cljs.core.truth_((function (){var and__3822__auto____5735 = this__5734.has_nil_QMARK_;
if(cljs.core.truth_(and__3822__auto____5735))
{return (v === this__5734.nil_val);
} else
{return and__3822__auto____5735;
}
})()))
{return coll;
} else
{return (new cljs.core.PersistentHashMap(this__5734.meta,(cljs.core.truth_(this__5734.has_nil_QMARK_)?this__5734.cnt:(this__5734.cnt + 1)),this__5734.root,true,v,null));
}
} else
{var added_leaf_QMARK___5736 = [false];
var new_root__5737 = (((this__5734.root == null))?cljs.core.BitmapIndexedNode.EMPTY:this__5734.root).inode_assoc(0,cljs.core.hash.call(null,k),k,v,added_leaf_QMARK___5736);
if((new_root__5737 === this__5734.root))
{return coll;
} else
{return (new cljs.core.PersistentHashMap(this__5734.meta,(cljs.core.truth_((added_leaf_QMARK___5736[0]))?(this__5734.cnt + 1):this__5734.cnt),new_root__5737,this__5734.has_nil_QMARK_,this__5734.nil_val,null));
}
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
var this__5738 = this;
if((k == null))
{return this__5738.has_nil_QMARK_;
} else
{if((this__5738.root == null))
{return false;
} else
{if("\uFDD0'else")
{return cljs.core.not.call(null,(this__5738.root.inode_find(0,cljs.core.hash.call(null,k),k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel));
} else
{return null;
}
}
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentHashMap.prototype.call = (function() {
var G__5759 = null;
var G__5759__2 = (function (tsym5726,k){
var this__5739 = this;
var tsym5726__5740 = this;
var coll__5741 = tsym5726__5740;
return cljs.core._lookup.call(null,coll__5741,k);
});
var G__5759__3 = (function (tsym5727,k,not_found){
var this__5742 = this;
var tsym5727__5743 = this;
var coll__5744 = tsym5727__5743;
return cljs.core._lookup.call(null,coll__5744,k,not_found);
});
G__5759 = function(tsym5727,k,not_found){
switch(arguments.length){
case 2:
return G__5759__2.call(this,tsym5727,k);
case 3:
return G__5759__3.call(this,tsym5727,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5759;
})()
;
cljs.core.PersistentHashMap.prototype.apply = (function (tsym5724,args5725){
return tsym5724.call.apply(tsym5724,[tsym5724].concat(cljs.core.aclone.call(null,args5725)));
});
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
var this__5745 = this;
var init__5746 = (cljs.core.truth_(this__5745.has_nil_QMARK_)?f.call(null,init,null,this__5745.nil_val):init);
if(cljs.core.reduced_QMARK_.call(null,init__5746))
{return cljs.core.deref.call(null,init__5746);
} else
{if((null != this__5745.root))
{return this__5745.root.kv_reduce(f,init__5746);
} else
{if("\uFDD0'else")
{return init__5746;
} else
{return null;
}
}
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
var this__5747 = this;
if(cljs.core.vector_QMARK_.call(null,entry))
{return cljs.core._assoc.call(null,coll,cljs.core._nth.call(null,entry,0),cljs.core._nth.call(null,entry,1));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,coll,entry);
}
});
cljs.core.PersistentHashMap.prototype.toString = (function (){
var this__5748 = this;
var this$__5749 = this;
return cljs.core.pr_str.call(null,this$__5749);
});
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5750 = this;
if((this__5750.cnt > 0))
{var s__5751 = (((null != this__5750.root))?this__5750.root.inode_seq():null);
if(cljs.core.truth_(this__5750.has_nil_QMARK_))
{return cljs.core.cons.call(null,cljs.core.PersistentVector.fromArray([null,this__5750.nil_val]),s__5751);
} else
{return s__5751;
}
} else
{return null;
}
});
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5752 = this;
return this__5752.cnt;
});
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5753 = this;
return cljs.core.equiv_map.call(null,coll,other);
});
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5754 = this;
return (new cljs.core.PersistentHashMap(meta,this__5754.cnt,this__5754.root,this__5754.has_nil_QMARK_,this__5754.nil_val,this__5754.__hash));
});
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5755 = this;
return this__5755.meta;
});
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5756 = this;
return cljs.core._with_meta.call(null,cljs.core.PersistentHashMap.EMPTY,this__5756.meta);
});
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
var this__5757 = this;
if((k == null))
{if(cljs.core.truth_(this__5757.has_nil_QMARK_))
{return (new cljs.core.PersistentHashMap(this__5757.meta,(this__5757.cnt - 1),this__5757.root,false,null,null));
} else
{return coll;
}
} else
{if((this__5757.root == null))
{return coll;
} else
{if("\uFDD0'else")
{var new_root__5758 = this__5757.root.inode_without(0,cljs.core.hash.call(null,k),k);
if((new_root__5758 === this__5757.root))
{return coll;
} else
{return (new cljs.core.PersistentHashMap(this__5757.meta,(this__5757.cnt - 1),new_root__5758,this__5757.has_nil_QMARK_,this__5757.nil_val,null));
}
} else
{return null;
}
}
}
});
cljs.core.PersistentHashMap;
cljs.core.PersistentHashMap.EMPTY = (new cljs.core.PersistentHashMap(null,0,null,false,null,0));
cljs.core.PersistentHashMap.fromArrays = (function (ks,vs){
var len__5760 = ks.length;
var i__5761 = 0;
var out__5762 = cljs.core.transient$.call(null,cljs.core.PersistentHashMap.EMPTY);
while(true){
if((i__5761 < len__5760))
{{
var G__5763 = (i__5761 + 1);
var G__5764 = cljs.core.assoc_BANG_.call(null,out__5762,(ks[i__5761]),(vs[i__5761]));
i__5761 = G__5763;
out__5762 = G__5764;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,out__5762);
}
break;
}
});

/**
* @constructor
*/
cljs.core.TransientHashMap = (function (edit,root,count,has_nil_QMARK_,nil_val){
this.edit = edit;
this.root = root;
this.count = count;
this.has_nil_QMARK_ = has_nil_QMARK_;
this.nil_val = nil_val;
this.cljs$lang$protocol_mask$partition1$ = 7;
this.cljs$lang$protocol_mask$partition0$ = 130;
})
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.TransientHashMap");
});
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$ = true;
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = (function (tcoll,key){
var this__5765 = this;
return tcoll.without_BANG_(key);
});
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$ = true;
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
var this__5766 = this;
return tcoll.assoc_BANG_(key,val);
});
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$ = true;
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,val){
var this__5767 = this;
return tcoll.conj_BANG_(val);
});
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
var this__5768 = this;
return tcoll.persistent_BANG_();
});
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$ = true;
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,k){
var this__5769 = this;
if((k == null))
{if(cljs.core.truth_(this__5769.has_nil_QMARK_))
{return this__5769.nil_val;
} else
{return null;
}
} else
{if((this__5769.root == null))
{return null;
} else
{return cljs.core.nth.call(null,this__5769.root.inode_find(0,cljs.core.hash.call(null,k),k),1);
}
}
});
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,k,not_found){
var this__5770 = this;
if((k == null))
{if(cljs.core.truth_(this__5770.has_nil_QMARK_))
{return this__5770.nil_val;
} else
{return not_found;
}
} else
{if((this__5770.root == null))
{return not_found;
} else
{return cljs.core.nth.call(null,this__5770.root.inode_find(0,cljs.core.hash.call(null,k),k,[null,not_found]),1);
}
}
});
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$ = true;
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5771 = this;
if(cljs.core.truth_(this__5771.edit))
{return this__5771.count;
} else
{throw (new Error("count after persistent!"));
}
});
cljs.core.TransientHashMap.prototype.conj_BANG_ = (function (o){
var this__5772 = this;
var tcoll__5773 = this;
if(cljs.core.truth_(this__5772.edit))
{if((function (){var G__5774__5775 = o;
if((G__5774__5775 != null))
{if((function (){var or__3824__auto____5776 = (G__5774__5775.cljs$lang$protocol_mask$partition0$ & 1024);
if(or__3824__auto____5776)
{return or__3824__auto____5776;
} else
{return G__5774__5775.cljs$core$IMapEntry$;
}
})())
{return true;
} else
{if((!G__5774__5775.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IMapEntry,G__5774__5775);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IMapEntry,G__5774__5775);
}
})())
{return tcoll__5773.assoc_BANG_(cljs.core.key.call(null,o),cljs.core.val.call(null,o));
} else
{var es__5777 = cljs.core.seq.call(null,o);
var tcoll__5778 = tcoll__5773;
while(true){
var temp__3971__auto____5779 = cljs.core.first.call(null,es__5777);
if(cljs.core.truth_(temp__3971__auto____5779))
{var e__5780 = temp__3971__auto____5779;
{
var G__5791 = cljs.core.next.call(null,es__5777);
var G__5792 = tcoll__5778.assoc_BANG_(cljs.core.key.call(null,e__5780),cljs.core.val.call(null,e__5780));
es__5777 = G__5791;
tcoll__5778 = G__5792;
continue;
}
} else
{return tcoll__5778;
}
break;
}
}
} else
{throw (new Error("conj! after persistent"));
}
});
cljs.core.TransientHashMap.prototype.assoc_BANG_ = (function (k,v){
var this__5781 = this;
var tcoll__5782 = this;
if(cljs.core.truth_(this__5781.edit))
{if((k == null))
{if((this__5781.nil_val === v))
{} else
{this__5781.nil_val = v;
}
if(cljs.core.truth_(this__5781.has_nil_QMARK_))
{} else
{this__5781.count = (this__5781.count + 1);
this__5781.has_nil_QMARK_ = true;
}
return tcoll__5782;
} else
{var added_leaf_QMARK___5783 = [false];
var node__5784 = (((this__5781.root == null))?cljs.core.BitmapIndexedNode.EMPTY:this__5781.root).inode_assoc_BANG_(this__5781.edit,0,cljs.core.hash.call(null,k),k,v,added_leaf_QMARK___5783);
if((node__5784 === this__5781.root))
{} else
{this__5781.root = node__5784;
}
if(cljs.core.truth_((added_leaf_QMARK___5783[0])))
{this__5781.count = (this__5781.count + 1);
} else
{}
return tcoll__5782;
}
} else
{throw (new Error("assoc! after persistent!"));
}
});
cljs.core.TransientHashMap.prototype.without_BANG_ = (function (k){
var this__5785 = this;
var tcoll__5786 = this;
if(cljs.core.truth_(this__5785.edit))
{if((k == null))
{if(cljs.core.truth_(this__5785.has_nil_QMARK_))
{this__5785.has_nil_QMARK_ = false;
this__5785.nil_val = null;
this__5785.count = (this__5785.count - 1);
return tcoll__5786;
} else
{return tcoll__5786;
}
} else
{if((this__5785.root == null))
{return tcoll__5786;
} else
{var removed_leaf_QMARK___5787 = [false];
var node__5788 = this__5785.root.inode_without_BANG_(this__5785.edit,0,cljs.core.hash.call(null,k),k,removed_leaf_QMARK___5787);
if((node__5788 === this__5785.root))
{} else
{this__5785.root = node__5788;
}
if(cljs.core.truth_((removed_leaf_QMARK___5787[0])))
{this__5785.count = (this__5785.count - 1);
} else
{}
return tcoll__5786;
}
}
} else
{throw (new Error("dissoc! after persistent!"));
}
});
cljs.core.TransientHashMap.prototype.persistent_BANG_ = (function (){
var this__5789 = this;
var tcoll__5790 = this;
if(cljs.core.truth_(this__5789.edit))
{this__5789.edit = null;
return (new cljs.core.PersistentHashMap(null,this__5789.count,this__5789.root,this__5789.has_nil_QMARK_,this__5789.nil_val,null));
} else
{throw (new Error("persistent! called twice"));
}
});
cljs.core.TransientHashMap;
cljs.core.tree_map_seq_push = (function tree_map_seq_push(node,stack,ascending_QMARK_){
var t__5793 = node;
var stack__5794 = stack;
while(true){
if((t__5793 != null))
{{
var G__5795 = (cljs.core.truth_(ascending_QMARK_)?t__5793.left:t__5793.right);
var G__5796 = cljs.core.conj.call(null,stack__5794,t__5793);
t__5793 = G__5795;
stack__5794 = G__5796;
continue;
}
} else
{return stack__5794;
}
break;
}
});

/**
* @constructor
*/
cljs.core.PersistentTreeMapSeq = (function (meta,stack,ascending_QMARK_,cnt,__hash){
this.meta = meta;
this.stack = stack;
this.ascending_QMARK_ = ascending_QMARK_;
this.cnt = cnt;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 15925322;
})
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentTreeMapSeq");
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5797 = this;
var h__264__auto____5798 = this__5797.__hash;
if((h__264__auto____5798 != null))
{return h__264__auto____5798;
} else
{var h__264__auto____5799 = cljs.core.hash_coll.call(null,coll);
this__5797.__hash = h__264__auto____5799;
return h__264__auto____5799;
}
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISequential$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__5800 = this;
return cljs.core.cons.call(null,o,coll);
});
cljs.core.PersistentTreeMapSeq.prototype.toString = (function (){
var this__5801 = this;
var this$__5802 = this;
return cljs.core.pr_str.call(null,this$__5802);
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this__5803 = this;
return this$;
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5804 = this;
if((this__5804.cnt < 0))
{return (cljs.core.count.call(null,cljs.core.next.call(null,coll)) + 1);
} else
{return this__5804.cnt;
}
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (this$){
var this__5805 = this;
return cljs.core.peek.call(null,this__5805.stack);
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (this$){
var this__5806 = this;
var t__5807 = cljs.core.peek.call(null,this__5806.stack);
var next_stack__5808 = cljs.core.tree_map_seq_push.call(null,(cljs.core.truth_(this__5806.ascending_QMARK_)?t__5807.right:t__5807.left),cljs.core.pop.call(null,this__5806.stack),this__5806.ascending_QMARK_);
if((next_stack__5808 != null))
{return (new cljs.core.PersistentTreeMapSeq(null,next_stack__5808,this__5806.ascending_QMARK_,(this__5806.cnt - 1),null));
} else
{return null;
}
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5809 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5810 = this;
return (new cljs.core.PersistentTreeMapSeq(meta,this__5810.stack,this__5810.ascending_QMARK_,this__5810.cnt,this__5810.__hash));
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5811 = this;
return this__5811.meta;
});
cljs.core.PersistentTreeMapSeq;
cljs.core.create_tree_map_seq = (function create_tree_map_seq(tree,ascending_QMARK_,cnt){
return (new cljs.core.PersistentTreeMapSeq(null,cljs.core.tree_map_seq_push.call(null,tree,null,ascending_QMARK_),ascending_QMARK_,cnt,null));
});
void 0;
void 0;
cljs.core.balance_left = (function balance_left(key,val,ins,right){
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins))
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins.left))
{return (new cljs.core.RedNode(ins.key,ins.val,ins.left.blacken(),(new cljs.core.BlackNode(key,val,ins.right,right,null)),null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins.right))
{return (new cljs.core.RedNode(ins.right.key,ins.right.val,(new cljs.core.BlackNode(ins.key,ins.val,ins.left,ins.right.left,null)),(new cljs.core.BlackNode(key,val,ins.right.right,right,null)),null));
} else
{if("\uFDD0'else")
{return (new cljs.core.BlackNode(key,val,ins,right,null));
} else
{return null;
}
}
}
} else
{return (new cljs.core.BlackNode(key,val,ins,right,null));
}
});
cljs.core.balance_right = (function balance_right(key,val,left,ins){
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins))
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins.right))
{return (new cljs.core.RedNode(ins.key,ins.val,(new cljs.core.BlackNode(key,val,left,ins.left,null)),ins.right.blacken(),null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,ins.left))
{return (new cljs.core.RedNode(ins.left.key,ins.left.val,(new cljs.core.BlackNode(key,val,left,ins.left.left,null)),(new cljs.core.BlackNode(ins.key,ins.val,ins.left.right,ins.right,null)),null));
} else
{if("\uFDD0'else")
{return (new cljs.core.BlackNode(key,val,left,ins,null));
} else
{return null;
}
}
}
} else
{return (new cljs.core.BlackNode(key,val,left,ins,null));
}
});
cljs.core.balance_left_del = (function balance_left_del(key,val,del,right){
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,del))
{return (new cljs.core.RedNode(key,val,del.blacken(),right,null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,right))
{return cljs.core.balance_right.call(null,key,val,del,right.redden());
} else
{if((function (){var and__3822__auto____5812 = cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,right);
if(and__3822__auto____5812)
{return cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,right.left);
} else
{return and__3822__auto____5812;
}
})())
{return (new cljs.core.RedNode(right.left.key,right.left.val,(new cljs.core.BlackNode(key,val,del,right.left.left,null)),cljs.core.balance_right.call(null,right.key,right.val,right.left.right,right.right.redden()),null));
} else
{if("\uFDD0'else")
{throw (new Error("red-black tree invariant violation"));
} else
{return null;
}
}
}
}
});
cljs.core.balance_right_del = (function balance_right_del(key,val,left,del){
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,del))
{return (new cljs.core.RedNode(key,val,left,del.blacken(),null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,left))
{return cljs.core.balance_left.call(null,key,val,left.redden(),del);
} else
{if((function (){var and__3822__auto____5813 = cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,left);
if(and__3822__auto____5813)
{return cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,left.right);
} else
{return and__3822__auto____5813;
}
})())
{return (new cljs.core.RedNode(left.right.key,left.right.val,cljs.core.balance_left.call(null,left.key,left.val,left.left.redden(),left.right.left),(new cljs.core.BlackNode(key,val,left.right.right,del,null)),null));
} else
{if("\uFDD0'else")
{throw (new Error("red-black tree invariant violation"));
} else
{return null;
}
}
}
}
});
cljs.core.tree_map_kv_reduce = (function tree_map_kv_reduce(node,f,init){
var init__5814 = f.call(null,init,node.key,node.val);
if(cljs.core.reduced_QMARK_.call(null,init__5814))
{return cljs.core.deref.call(null,init__5814);
} else
{var init__5815 = (((node.left != null))?tree_map_kv_reduce.call(null,node.left,f,init__5814):init__5814);
if(cljs.core.reduced_QMARK_.call(null,init__5815))
{return cljs.core.deref.call(null,init__5815);
} else
{var init__5816 = (((node.right != null))?tree_map_kv_reduce.call(null,node.right,f,init__5815):init__5815);
if(cljs.core.reduced_QMARK_.call(null,init__5816))
{return cljs.core.deref.call(null,init__5816);
} else
{return init__5816;
}
}
}
});

/**
* @constructor
*/
cljs.core.BlackNode = (function (key,val,left,right,__hash){
this.key = key;
this.val = val;
this.left = left;
this.right = right;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16201119;
})
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.BlackNode");
});
cljs.core.BlackNode.prototype.cljs$core$IHash$ = true;
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5821 = this;
var h__264__auto____5822 = this__5821.__hash;
if((h__264__auto____5822 != null))
{return h__264__auto____5822;
} else
{var h__264__auto____5823 = cljs.core.hash_coll.call(null,coll);
this__5821.__hash = h__264__auto____5823;
return h__264__auto____5823;
}
});
cljs.core.BlackNode.prototype.cljs$core$ILookup$ = true;
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (node,k){
var this__5824 = this;
return cljs.core._nth.call(null,node,k,null);
});
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (node,k,not_found){
var this__5825 = this;
return cljs.core._nth.call(null,node,k,not_found);
});
cljs.core.BlackNode.prototype.cljs$core$IAssociative$ = true;
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (node,k,v){
var this__5826 = this;
return cljs.core.assoc.call(null,cljs.core.PersistentVector.fromArray([this__5826.key,this__5826.val]),k,v);
});
cljs.core.BlackNode.prototype.cljs$core$IFn$ = true;
cljs.core.BlackNode.prototype.call = (function() {
var G__5873 = null;
var G__5873__2 = (function (tsym5819,k){
var this__5827 = this;
var tsym5819__5828 = this;
var node__5829 = tsym5819__5828;
return cljs.core._lookup.call(null,node__5829,k);
});
var G__5873__3 = (function (tsym5820,k,not_found){
var this__5830 = this;
var tsym5820__5831 = this;
var node__5832 = tsym5820__5831;
return cljs.core._lookup.call(null,node__5832,k,not_found);
});
G__5873 = function(tsym5820,k,not_found){
switch(arguments.length){
case 2:
return G__5873__2.call(this,tsym5820,k);
case 3:
return G__5873__3.call(this,tsym5820,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5873;
})()
;
cljs.core.BlackNode.prototype.apply = (function (tsym5817,args5818){
return tsym5817.call.apply(tsym5817,[tsym5817].concat(cljs.core.aclone.call(null,args5818)));
});
cljs.core.BlackNode.prototype.cljs$core$ISequential$ = true;
cljs.core.BlackNode.prototype.cljs$core$ICollection$ = true;
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (node,o){
var this__5833 = this;
return cljs.core.PersistentVector.fromArray([this__5833.key,this__5833.val,o]);
});
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$ = true;
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (node){
var this__5834 = this;
return this__5834.key;
});
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (node){
var this__5835 = this;
return this__5835.val;
});
cljs.core.BlackNode.prototype.add_right = (function (ins){
var this__5836 = this;
var node__5837 = this;
return ins.balance_right(node__5837);
});
cljs.core.BlackNode.prototype.redden = (function (){
var this__5838 = this;
var node__5839 = this;
return (new cljs.core.RedNode(this__5838.key,this__5838.val,this__5838.left,this__5838.right,null));
});
cljs.core.BlackNode.prototype.remove_right = (function (del){
var this__5840 = this;
var node__5841 = this;
return cljs.core.balance_right_del.call(null,this__5840.key,this__5840.val,this__5840.left,del);
});
cljs.core.BlackNode.prototype.replace = (function (key,val,left,right){
var this__5842 = this;
var node__5843 = this;
return (new cljs.core.BlackNode(key,val,left,right,null));
});
cljs.core.BlackNode.prototype.kv_reduce = (function (f,init){
var this__5844 = this;
var node__5845 = this;
return cljs.core.tree_map_kv_reduce.call(null,node__5845,f,init);
});
cljs.core.BlackNode.prototype.remove_left = (function (del){
var this__5846 = this;
var node__5847 = this;
return cljs.core.balance_left_del.call(null,this__5846.key,this__5846.val,del,this__5846.right);
});
cljs.core.BlackNode.prototype.add_left = (function (ins){
var this__5848 = this;
var node__5849 = this;
return ins.balance_left(node__5849);
});
cljs.core.BlackNode.prototype.balance_left = (function (parent){
var this__5850 = this;
var node__5851 = this;
return (new cljs.core.BlackNode(parent.key,parent.val,node__5851,parent.right,null));
});
cljs.core.BlackNode.prototype.toString = (function() {
var G__5874 = null;
var G__5874__0 = (function (){
var this__5854 = this;
var this$__5855 = this;
return cljs.core.pr_str.call(null,this$__5855);
});
G__5874 = function(){
switch(arguments.length){
case 0:
return G__5874__0.call(this);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5874;
})()
;
cljs.core.BlackNode.prototype.balance_right = (function (parent){
var this__5856 = this;
var node__5857 = this;
return (new cljs.core.BlackNode(parent.key,parent.val,parent.left,node__5857,null));
});
cljs.core.BlackNode.prototype.blacken = (function (){
var this__5858 = this;
var node__5859 = this;
return node__5859;
});
cljs.core.BlackNode.prototype.cljs$core$IReduce$ = true;
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (node,f){
var this__5860 = this;
return cljs.core.ci_reduce.call(null,node,f);
});
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (node,f,start){
var this__5861 = this;
return cljs.core.ci_reduce.call(null,node,f,start);
});
cljs.core.BlackNode.prototype.cljs$core$ISeqable$ = true;
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (node){
var this__5862 = this;
return cljs.core.list.call(null,this__5862.key,this__5862.val);
});
cljs.core.BlackNode.prototype.cljs$core$ICounted$ = true;
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (node){
var this__5864 = this;
return 2;
});
cljs.core.BlackNode.prototype.cljs$core$IStack$ = true;
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = (function (node){
var this__5865 = this;
return this__5865.val;
});
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = (function (node){
var this__5866 = this;
return cljs.core.PersistentVector.fromArray([this__5866.key]);
});
cljs.core.BlackNode.prototype.cljs$core$IVector$ = true;
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (node,n,v){
var this__5867 = this;
return cljs.core._assoc_n.call(null,cljs.core.PersistentVector.fromArray([this__5867.key,this__5867.val]),n,v);
});
cljs.core.BlackNode.prototype.cljs$core$IEquiv$ = true;
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5868 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$ = true;
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (node,meta){
var this__5869 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentVector.fromArray([this__5869.key,this__5869.val]),meta);
});
cljs.core.BlackNode.prototype.cljs$core$IMeta$ = true;
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (node){
var this__5870 = this;
return null;
});
cljs.core.BlackNode.prototype.cljs$core$IIndexed$ = true;
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (node,n){
var this__5871 = this;
if((n === 0))
{return this__5871.key;
} else
{if((n === 1))
{return this__5871.val;
} else
{if("\uFDD0'else")
{return null;
} else
{return null;
}
}
}
});
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (node,n,not_found){
var this__5872 = this;
if((n === 0))
{return this__5872.key;
} else
{if((n === 1))
{return this__5872.val;
} else
{if("\uFDD0'else")
{return not_found;
} else
{return null;
}
}
}
});
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (node){
var this__5863 = this;
return cljs.core.PersistentVector.fromArray([]);
});
cljs.core.BlackNode;

/**
* @constructor
*/
cljs.core.RedNode = (function (key,val,left,right,__hash){
this.key = key;
this.val = val;
this.left = left;
this.right = right;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16201119;
})
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.RedNode");
});
cljs.core.RedNode.prototype.cljs$core$IHash$ = true;
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5879 = this;
var h__264__auto____5880 = this__5879.__hash;
if((h__264__auto____5880 != null))
{return h__264__auto____5880;
} else
{var h__264__auto____5881 = cljs.core.hash_coll.call(null,coll);
this__5879.__hash = h__264__auto____5881;
return h__264__auto____5881;
}
});
cljs.core.RedNode.prototype.cljs$core$ILookup$ = true;
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (node,k){
var this__5882 = this;
return cljs.core._nth.call(null,node,k,null);
});
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (node,k,not_found){
var this__5883 = this;
return cljs.core._nth.call(null,node,k,not_found);
});
cljs.core.RedNode.prototype.cljs$core$IAssociative$ = true;
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (node,k,v){
var this__5884 = this;
return cljs.core.assoc.call(null,cljs.core.PersistentVector.fromArray([this__5884.key,this__5884.val]),k,v);
});
cljs.core.RedNode.prototype.cljs$core$IFn$ = true;
cljs.core.RedNode.prototype.call = (function() {
var G__5931 = null;
var G__5931__2 = (function (tsym5877,k){
var this__5885 = this;
var tsym5877__5886 = this;
var node__5887 = tsym5877__5886;
return cljs.core._lookup.call(null,node__5887,k);
});
var G__5931__3 = (function (tsym5878,k,not_found){
var this__5888 = this;
var tsym5878__5889 = this;
var node__5890 = tsym5878__5889;
return cljs.core._lookup.call(null,node__5890,k,not_found);
});
G__5931 = function(tsym5878,k,not_found){
switch(arguments.length){
case 2:
return G__5931__2.call(this,tsym5878,k);
case 3:
return G__5931__3.call(this,tsym5878,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5931;
})()
;
cljs.core.RedNode.prototype.apply = (function (tsym5875,args5876){
return tsym5875.call.apply(tsym5875,[tsym5875].concat(cljs.core.aclone.call(null,args5876)));
});
cljs.core.RedNode.prototype.cljs$core$ISequential$ = true;
cljs.core.RedNode.prototype.cljs$core$ICollection$ = true;
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (node,o){
var this__5891 = this;
return cljs.core.PersistentVector.fromArray([this__5891.key,this__5891.val,o]);
});
cljs.core.RedNode.prototype.cljs$core$IMapEntry$ = true;
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (node){
var this__5892 = this;
return this__5892.key;
});
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (node){
var this__5893 = this;
return this__5893.val;
});
cljs.core.RedNode.prototype.add_right = (function (ins){
var this__5894 = this;
var node__5895 = this;
return (new cljs.core.RedNode(this__5894.key,this__5894.val,this__5894.left,ins,null));
});
cljs.core.RedNode.prototype.redden = (function (){
var this__5896 = this;
var node__5897 = this;
throw (new Error("red-black tree invariant violation"));
});
cljs.core.RedNode.prototype.remove_right = (function (del){
var this__5898 = this;
var node__5899 = this;
return (new cljs.core.RedNode(this__5898.key,this__5898.val,this__5898.left,del,null));
});
cljs.core.RedNode.prototype.replace = (function (key,val,left,right){
var this__5900 = this;
var node__5901 = this;
return (new cljs.core.RedNode(key,val,left,right,null));
});
cljs.core.RedNode.prototype.kv_reduce = (function (f,init){
var this__5902 = this;
var node__5903 = this;
return cljs.core.tree_map_kv_reduce.call(null,node__5903,f,init);
});
cljs.core.RedNode.prototype.remove_left = (function (del){
var this__5904 = this;
var node__5905 = this;
return (new cljs.core.RedNode(this__5904.key,this__5904.val,del,this__5904.right,null));
});
cljs.core.RedNode.prototype.add_left = (function (ins){
var this__5906 = this;
var node__5907 = this;
return (new cljs.core.RedNode(this__5906.key,this__5906.val,ins,this__5906.right,null));
});
cljs.core.RedNode.prototype.balance_left = (function (parent){
var this__5908 = this;
var node__5909 = this;
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,this__5908.left))
{return (new cljs.core.RedNode(this__5908.key,this__5908.val,this__5908.left.blacken(),(new cljs.core.BlackNode(parent.key,parent.val,this__5908.right,parent.right,null)),null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,this__5908.right))
{return (new cljs.core.RedNode(this__5908.right.key,this__5908.right.val,(new cljs.core.BlackNode(this__5908.key,this__5908.val,this__5908.left,this__5908.right.left,null)),(new cljs.core.BlackNode(parent.key,parent.val,this__5908.right.right,parent.right,null)),null));
} else
{if("\uFDD0'else")
{return (new cljs.core.BlackNode(parent.key,parent.val,node__5909,parent.right,null));
} else
{return null;
}
}
}
});
cljs.core.RedNode.prototype.toString = (function() {
var G__5932 = null;
var G__5932__0 = (function (){
var this__5912 = this;
var this$__5913 = this;
return cljs.core.pr_str.call(null,this$__5913);
});
G__5932 = function(){
switch(arguments.length){
case 0:
return G__5932__0.call(this);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5932;
})()
;
cljs.core.RedNode.prototype.balance_right = (function (parent){
var this__5914 = this;
var node__5915 = this;
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,this__5914.right))
{return (new cljs.core.RedNode(this__5914.key,this__5914.val,(new cljs.core.BlackNode(parent.key,parent.val,parent.left,this__5914.left,null)),this__5914.right.blacken(),null));
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,this__5914.left))
{return (new cljs.core.RedNode(this__5914.left.key,this__5914.left.val,(new cljs.core.BlackNode(parent.key,parent.val,parent.left,this__5914.left.left,null)),(new cljs.core.BlackNode(this__5914.key,this__5914.val,this__5914.left.right,this__5914.right,null)),null));
} else
{if("\uFDD0'else")
{return (new cljs.core.BlackNode(parent.key,parent.val,parent.left,node__5915,null));
} else
{return null;
}
}
}
});
cljs.core.RedNode.prototype.blacken = (function (){
var this__5916 = this;
var node__5917 = this;
return (new cljs.core.BlackNode(this__5916.key,this__5916.val,this__5916.left,this__5916.right,null));
});
cljs.core.RedNode.prototype.cljs$core$IReduce$ = true;
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (node,f){
var this__5918 = this;
return cljs.core.ci_reduce.call(null,node,f);
});
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (node,f,start){
var this__5919 = this;
return cljs.core.ci_reduce.call(null,node,f,start);
});
cljs.core.RedNode.prototype.cljs$core$ISeqable$ = true;
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (node){
var this__5920 = this;
return cljs.core.list.call(null,this__5920.key,this__5920.val);
});
cljs.core.RedNode.prototype.cljs$core$ICounted$ = true;
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (node){
var this__5922 = this;
return 2;
});
cljs.core.RedNode.prototype.cljs$core$IStack$ = true;
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = (function (node){
var this__5923 = this;
return this__5923.val;
});
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = (function (node){
var this__5924 = this;
return cljs.core.PersistentVector.fromArray([this__5924.key]);
});
cljs.core.RedNode.prototype.cljs$core$IVector$ = true;
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (node,n,v){
var this__5925 = this;
return cljs.core._assoc_n.call(null,cljs.core.PersistentVector.fromArray([this__5925.key,this__5925.val]),n,v);
});
cljs.core.RedNode.prototype.cljs$core$IEquiv$ = true;
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5926 = this;
return cljs.core.equiv_sequential.call(null,coll,other);
});
cljs.core.RedNode.prototype.cljs$core$IWithMeta$ = true;
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (node,meta){
var this__5927 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentVector.fromArray([this__5927.key,this__5927.val]),meta);
});
cljs.core.RedNode.prototype.cljs$core$IMeta$ = true;
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (node){
var this__5928 = this;
return null;
});
cljs.core.RedNode.prototype.cljs$core$IIndexed$ = true;
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (node,n){
var this__5929 = this;
if((n === 0))
{return this__5929.key;
} else
{if((n === 1))
{return this__5929.val;
} else
{if("\uFDD0'else")
{return null;
} else
{return null;
}
}
}
});
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (node,n,not_found){
var this__5930 = this;
if((n === 0))
{return this__5930.key;
} else
{if((n === 1))
{return this__5930.val;
} else
{if("\uFDD0'else")
{return not_found;
} else
{return null;
}
}
}
});
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (node){
var this__5921 = this;
return cljs.core.PersistentVector.fromArray([]);
});
cljs.core.RedNode;
cljs.core.tree_map_add = (function tree_map_add(comp,tree,k,v,found){
if((tree == null))
{return (new cljs.core.RedNode(k,v,null,null,null));
} else
{var c__5933 = comp.call(null,k,tree.key);
if((c__5933 === 0))
{(found[0] = tree);
return null;
} else
{if((c__5933 < 0))
{var ins__5934 = tree_map_add.call(null,comp,tree.left,k,v,found);
if((ins__5934 != null))
{return tree.add_left(ins__5934);
} else
{return null;
}
} else
{if("\uFDD0'else")
{var ins__5935 = tree_map_add.call(null,comp,tree.right,k,v,found);
if((ins__5935 != null))
{return tree.add_right(ins__5935);
} else
{return null;
}
} else
{return null;
}
}
}
}
});
cljs.core.tree_map_append = (function tree_map_append(left,right){
if((left == null))
{return right;
} else
{if((right == null))
{return left;
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,left))
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,right))
{var app__5936 = tree_map_append.call(null,left.right,right.left);
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,app__5936))
{return (new cljs.core.RedNode(app__5936.key,app__5936.val,(new cljs.core.RedNode(left.key,left.val,left.left,app__5936.left)),(new cljs.core.RedNode(right.key,right.val,app__5936.right,right.right)),null));
} else
{return (new cljs.core.RedNode(left.key,left.val,left.left,(new cljs.core.RedNode(right.key,right.val,app__5936,right.right,null)),null));
}
} else
{return (new cljs.core.RedNode(left.key,left.val,left.left,tree_map_append.call(null,left.right,right),null));
}
} else
{if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,right))
{return (new cljs.core.RedNode(right.key,right.val,tree_map_append.call(null,left,right.left),right.right,null));
} else
{if("\uFDD0'else")
{var app__5937 = tree_map_append.call(null,left.right,right.left);
if(cljs.core.instance_QMARK_.call(null,cljs.core.RedNode,app__5937))
{return (new cljs.core.RedNode(app__5937.key,app__5937.val,(new cljs.core.BlackNode(left.key,left.val,left.left,app__5937.left,null)),(new cljs.core.BlackNode(right.key,right.val,app__5937.right,right.right,null)),null));
} else
{return cljs.core.balance_left_del.call(null,left.key,left.val,left.left,(new cljs.core.BlackNode(right.key,right.val,app__5937,right.right,null)));
}
} else
{return null;
}
}
}
}
}
});
cljs.core.tree_map_remove = (function tree_map_remove(comp,tree,k,found){
if((tree != null))
{var c__5938 = comp.call(null,k,tree.key);
if((c__5938 === 0))
{(found[0] = tree);
return cljs.core.tree_map_append.call(null,tree.left,tree.right);
} else
{if((c__5938 < 0))
{var del__5939 = tree_map_remove.call(null,comp,tree.left,k,found);
if((function (){var or__3824__auto____5940 = (del__5939 != null);
if(or__3824__auto____5940)
{return or__3824__auto____5940;
} else
{return ((found[0]) != null);
}
})())
{if(cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,tree.left))
{return cljs.core.balance_left_del.call(null,tree.key,tree.val,del__5939,tree.right);
} else
{return (new cljs.core.RedNode(tree.key,tree.val,del__5939,tree.right,null));
}
} else
{return null;
}
} else
{if("\uFDD0'else")
{var del__5941 = tree_map_remove.call(null,comp,tree.right,k,found);
if((function (){var or__3824__auto____5942 = (del__5941 != null);
if(or__3824__auto____5942)
{return or__3824__auto____5942;
} else
{return ((found[0]) != null);
}
})())
{if(cljs.core.instance_QMARK_.call(null,cljs.core.BlackNode,tree.right))
{return cljs.core.balance_right_del.call(null,tree.key,tree.val,tree.left,del__5941);
} else
{return (new cljs.core.RedNode(tree.key,tree.val,tree.left,del__5941,null));
}
} else
{return null;
}
} else
{return null;
}
}
}
} else
{return null;
}
});
cljs.core.tree_map_replace = (function tree_map_replace(comp,tree,k,v){
var tk__5943 = tree.key;
var c__5944 = comp.call(null,k,tk__5943);
if((c__5944 === 0))
{return tree.replace(tk__5943,v,tree.left,tree.right);
} else
{if((c__5944 < 0))
{return tree.replace(tk__5943,tree.val,tree_map_replace.call(null,comp,tree.left,k,v),tree.right);
} else
{if("\uFDD0'else")
{return tree.replace(tk__5943,tree.val,tree.left,tree_map_replace.call(null,comp,tree.right,k,v));
} else
{return null;
}
}
}
});
void 0;

/**
* @constructor
*/
cljs.core.PersistentTreeMap = (function (comp,tree,cnt,meta,__hash){
this.comp = comp;
this.tree = tree;
this.cnt = cnt;
this.meta = meta;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 209388431;
})
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentTreeMap");
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__5949 = this;
var h__264__auto____5950 = this__5949.__hash;
if((h__264__auto____5950 != null))
{return h__264__auto____5950;
} else
{var h__264__auto____5951 = cljs.core.hash_imap.call(null,coll);
this__5949.__hash = h__264__auto____5951;
return h__264__auto____5951;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
var this__5952 = this;
return cljs.core._lookup.call(null,coll,k,null);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
var this__5953 = this;
var n__5954 = coll.entry_at(k);
if((n__5954 != null))
{return n__5954.val;
} else
{return not_found;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
var this__5955 = this;
var found__5956 = [null];
var t__5957 = cljs.core.tree_map_add.call(null,this__5955.comp,this__5955.tree,k,v,found__5956);
if((t__5957 == null))
{var found_node__5958 = cljs.core.nth.call(null,found__5956,0);
if(cljs.core._EQ_.call(null,v,found_node__5958.val))
{return coll;
} else
{return (new cljs.core.PersistentTreeMap(this__5955.comp,cljs.core.tree_map_replace.call(null,this__5955.comp,this__5955.tree,k,v),this__5955.cnt,this__5955.meta,null));
}
} else
{return (new cljs.core.PersistentTreeMap(this__5955.comp,t__5957.blacken(),(this__5955.cnt + 1),this__5955.meta,null));
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
var this__5959 = this;
return (coll.entry_at(k) != null);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentTreeMap.prototype.call = (function() {
var G__5991 = null;
var G__5991__2 = (function (tsym5947,k){
var this__5960 = this;
var tsym5947__5961 = this;
var coll__5962 = tsym5947__5961;
return cljs.core._lookup.call(null,coll__5962,k);
});
var G__5991__3 = (function (tsym5948,k,not_found){
var this__5963 = this;
var tsym5948__5964 = this;
var coll__5965 = tsym5948__5964;
return cljs.core._lookup.call(null,coll__5965,k,not_found);
});
G__5991 = function(tsym5948,k,not_found){
switch(arguments.length){
case 2:
return G__5991__2.call(this,tsym5948,k);
case 3:
return G__5991__3.call(this,tsym5948,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__5991;
})()
;
cljs.core.PersistentTreeMap.prototype.apply = (function (tsym5945,args5946){
return tsym5945.call.apply(tsym5945,[tsym5945].concat(cljs.core.aclone.call(null,args5946)));
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
var this__5966 = this;
if((this__5966.tree != null))
{return cljs.core.tree_map_kv_reduce.call(null,this__5966.tree,f,init);
} else
{return init;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
var this__5967 = this;
if(cljs.core.vector_QMARK_.call(null,entry))
{return cljs.core._assoc.call(null,coll,cljs.core._nth.call(null,entry,0),cljs.core._nth.call(null,entry,1));
} else
{return cljs.core.reduce.call(null,cljs.core._conj,coll,entry);
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
var this__5968 = this;
if((this__5968.cnt > 0))
{return cljs.core.create_tree_map_seq.call(null,this__5968.tree,false,this__5968.cnt);
} else
{return null;
}
});
cljs.core.PersistentTreeMap.prototype.toString = (function (){
var this__5969 = this;
var this$__5970 = this;
return cljs.core.pr_str.call(null,this$__5970);
});
cljs.core.PersistentTreeMap.prototype.entry_at = (function (k){
var this__5971 = this;
var coll__5972 = this;
var t__5973 = this__5971.tree;
while(true){
if((t__5973 != null))
{var c__5974 = this__5971.comp.call(null,k,t__5973.key);
if((c__5974 === 0))
{return t__5973;
} else
{if((c__5974 < 0))
{{
var G__5992 = t__5973.left;
t__5973 = G__5992;
continue;
}
} else
{if("\uFDD0'else")
{{
var G__5993 = t__5973.right;
t__5973 = G__5993;
continue;
}
} else
{return null;
}
}
}
} else
{return null;
}
break;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = (function (coll,ascending_QMARK_){
var this__5975 = this;
if((this__5975.cnt > 0))
{return cljs.core.create_tree_map_seq.call(null,this__5975.tree,ascending_QMARK_,this__5975.cnt);
} else
{return null;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = (function (coll,k,ascending_QMARK_){
var this__5976 = this;
if((this__5976.cnt > 0))
{var stack__5977 = null;
var t__5978 = this__5976.tree;
while(true){
if((t__5978 != null))
{var c__5979 = this__5976.comp.call(null,k,t__5978.key);
if((c__5979 === 0))
{return (new cljs.core.PersistentTreeMapSeq(null,cljs.core.conj.call(null,stack__5977,t__5978),ascending_QMARK_,-1));
} else
{if(cljs.core.truth_(ascending_QMARK_))
{if((c__5979 < 0))
{{
var G__5994 = cljs.core.conj.call(null,stack__5977,t__5978);
var G__5995 = t__5978.left;
stack__5977 = G__5994;
t__5978 = G__5995;
continue;
}
} else
{{
var G__5996 = stack__5977;
var G__5997 = t__5978.right;
stack__5977 = G__5996;
t__5978 = G__5997;
continue;
}
}
} else
{if("\uFDD0'else")
{if((c__5979 > 0))
{{
var G__5998 = cljs.core.conj.call(null,stack__5977,t__5978);
var G__5999 = t__5978.right;
stack__5977 = G__5998;
t__5978 = G__5999;
continue;
}
} else
{{
var G__6000 = stack__5977;
var G__6001 = t__5978.left;
stack__5977 = G__6000;
t__5978 = G__6001;
continue;
}
}
} else
{return null;
}
}
}
} else
{if((stack__5977 == null))
{return (new cljs.core.PersistentTreeMapSeq(null,stack__5977,ascending_QMARK_,-1));
} else
{return null;
}
}
break;
}
} else
{return null;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = (function (coll,entry){
var this__5980 = this;
return cljs.core.key.call(null,entry);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = (function (coll){
var this__5981 = this;
return this__5981.comp;
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__5982 = this;
if((this__5982.cnt > 0))
{return cljs.core.create_tree_map_seq.call(null,this__5982.tree,true,this__5982.cnt);
} else
{return null;
}
});
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__5983 = this;
return this__5983.cnt;
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__5984 = this;
return cljs.core.equiv_map.call(null,coll,other);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__5985 = this;
return (new cljs.core.PersistentTreeMap(this__5985.comp,this__5985.tree,this__5985.cnt,meta,this__5985.__hash));
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__5989 = this;
return this__5989.meta;
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__5990 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentTreeMap.EMPTY,this__5990.meta);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
var this__5986 = this;
var found__5987 = [null];
var t__5988 = cljs.core.tree_map_remove.call(null,this__5986.comp,this__5986.tree,k,found__5987);
if((t__5988 == null))
{if((cljs.core.nth.call(null,found__5987,0) == null))
{return coll;
} else
{return (new cljs.core.PersistentTreeMap(this__5986.comp,null,0,this__5986.meta,null));
}
} else
{return (new cljs.core.PersistentTreeMap(this__5986.comp,t__5988.blacken(),(this__5986.cnt - 1),this__5986.meta,null));
}
});
cljs.core.PersistentTreeMap;
cljs.core.PersistentTreeMap.EMPTY = (new cljs.core.PersistentTreeMap(cljs.core.compare,null,0,null,0));
/**
* keyval => key val
* Returns a new hash map with supplied mappings.
* @param {...*} var_args
*/
cljs.core.hash_map = (function() { 
var hash_map__delegate = function (keyvals){
var in$__6002 = cljs.core.seq.call(null,keyvals);
var out__6003 = cljs.core.transient$.call(null,cljs.core.PersistentHashMap.EMPTY);
while(true){
if(cljs.core.truth_(in$__6002))
{{
var G__6004 = cljs.core.nnext.call(null,in$__6002);
var G__6005 = cljs.core.assoc_BANG_.call(null,out__6003,cljs.core.first.call(null,in$__6002),cljs.core.second.call(null,in$__6002));
in$__6002 = G__6004;
out__6003 = G__6005;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,out__6003);
}
break;
}
};
var hash_map = function (var_args){
var keyvals = null;
if (goog.isDef(var_args)) {
  keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return hash_map__delegate.call(this, keyvals);
};
hash_map.cljs$lang$maxFixedArity = 0;
hash_map.cljs$lang$applyTo = (function (arglist__6006){
var keyvals = cljs.core.seq(arglist__6006);;
return hash_map__delegate(keyvals);
});
hash_map.cljs$lang$arity$variadic = hash_map__delegate;
return hash_map;
})()
;
/**
* keyval => key val
* Returns a new array map with supplied mappings.
* @param {...*} var_args
*/
cljs.core.array_map = (function() { 
var array_map__delegate = function (keyvals){
return (new cljs.core.PersistentArrayMap(null,cljs.core.quot.call(null,cljs.core.count.call(null,keyvals),2),cljs.core.apply.call(null,cljs.core.array,keyvals),null));
};
var array_map = function (var_args){
var keyvals = null;
if (goog.isDef(var_args)) {
  keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return array_map__delegate.call(this, keyvals);
};
array_map.cljs$lang$maxFixedArity = 0;
array_map.cljs$lang$applyTo = (function (arglist__6007){
var keyvals = cljs.core.seq(arglist__6007);;
return array_map__delegate(keyvals);
});
array_map.cljs$lang$arity$variadic = array_map__delegate;
return array_map;
})()
;
/**
* keyval => key val
* Returns a new sorted map with supplied mappings.
* @param {...*} var_args
*/
cljs.core.sorted_map = (function() { 
var sorted_map__delegate = function (keyvals){
var in$__6008 = cljs.core.seq.call(null,keyvals);
var out__6009 = cljs.core.PersistentTreeMap.EMPTY;
while(true){
if(cljs.core.truth_(in$__6008))
{{
var G__6010 = cljs.core.nnext.call(null,in$__6008);
var G__6011 = cljs.core.assoc.call(null,out__6009,cljs.core.first.call(null,in$__6008),cljs.core.second.call(null,in$__6008));
in$__6008 = G__6010;
out__6009 = G__6011;
continue;
}
} else
{return out__6009;
}
break;
}
};
var sorted_map = function (var_args){
var keyvals = null;
if (goog.isDef(var_args)) {
  keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return sorted_map__delegate.call(this, keyvals);
};
sorted_map.cljs$lang$maxFixedArity = 0;
sorted_map.cljs$lang$applyTo = (function (arglist__6012){
var keyvals = cljs.core.seq(arglist__6012);;
return sorted_map__delegate(keyvals);
});
sorted_map.cljs$lang$arity$variadic = sorted_map__delegate;
return sorted_map;
})()
;
/**
* keyval => key val
* Returns a new sorted map with supplied mappings, using the supplied comparator.
* @param {...*} var_args
*/
cljs.core.sorted_map_by = (function() { 
var sorted_map_by__delegate = function (comparator,keyvals){
var in$__6013 = cljs.core.seq.call(null,keyvals);
var out__6014 = (new cljs.core.PersistentTreeMap(comparator,null,0,null,0));
while(true){
if(cljs.core.truth_(in$__6013))
{{
var G__6015 = cljs.core.nnext.call(null,in$__6013);
var G__6016 = cljs.core.assoc.call(null,out__6014,cljs.core.first.call(null,in$__6013),cljs.core.second.call(null,in$__6013));
in$__6013 = G__6015;
out__6014 = G__6016;
continue;
}
} else
{return out__6014;
}
break;
}
};
var sorted_map_by = function (comparator,var_args){
var keyvals = null;
if (goog.isDef(var_args)) {
  keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return sorted_map_by__delegate.call(this, comparator, keyvals);
};
sorted_map_by.cljs$lang$maxFixedArity = 1;
sorted_map_by.cljs$lang$applyTo = (function (arglist__6017){
var comparator = cljs.core.first(arglist__6017);
var keyvals = cljs.core.rest(arglist__6017);
return sorted_map_by__delegate(comparator, keyvals);
});
sorted_map_by.cljs$lang$arity$variadic = sorted_map_by__delegate;
return sorted_map_by;
})()
;
/**
* Returns a sequence of the map's keys.
*/
cljs.core.keys = (function keys(hash_map){
return cljs.core.seq.call(null,cljs.core.map.call(null,cljs.core.first,hash_map));
});
/**
* Returns the key of the map entry.
*/
cljs.core.key = (function key(map_entry){
return cljs.core._key.call(null,map_entry);
});
/**
* Returns a sequence of the map's values.
*/
cljs.core.vals = (function vals(hash_map){
return cljs.core.seq.call(null,cljs.core.map.call(null,cljs.core.second,hash_map));
});
/**
* Returns the value in the map entry.
*/
cljs.core.val = (function val(map_entry){
return cljs.core._val.call(null,map_entry);
});
/**
* Returns a map that consists of the rest of the maps conj-ed onto
* the first.  If a key occurs in more than one map, the mapping from
* the latter (left-to-right) will be the mapping in the result.
* @param {...*} var_args
*/
cljs.core.merge = (function() { 
var merge__delegate = function (maps){
if(cljs.core.truth_(cljs.core.some.call(null,cljs.core.identity,maps)))
{return cljs.core.reduce.call(null,(function (p1__6018_SHARP_,p2__6019_SHARP_){
return cljs.core.conj.call(null,(function (){var or__3824__auto____6020 = p1__6018_SHARP_;
if(cljs.core.truth_(or__3824__auto____6020))
{return or__3824__auto____6020;
} else
{return cljs.core.ObjMap.fromObject([],{});
}
})(),p2__6019_SHARP_);
}),maps);
} else
{return null;
}
};
var merge = function (var_args){
var maps = null;
if (goog.isDef(var_args)) {
  maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return merge__delegate.call(this, maps);
};
merge.cljs$lang$maxFixedArity = 0;
merge.cljs$lang$applyTo = (function (arglist__6021){
var maps = cljs.core.seq(arglist__6021);;
return merge__delegate(maps);
});
merge.cljs$lang$arity$variadic = merge__delegate;
return merge;
})()
;
/**
* Returns a map that consists of the rest of the maps conj-ed onto
* the first.  If a key occurs in more than one map, the mapping(s)
* from the latter (left-to-right) will be combined with the mapping in
* the result by calling (f val-in-result val-in-latter).
* @param {...*} var_args
*/
cljs.core.merge_with = (function() { 
var merge_with__delegate = function (f,maps){
if(cljs.core.truth_(cljs.core.some.call(null,cljs.core.identity,maps)))
{var merge_entry__6024 = (function (m,e){
var k__6022 = cljs.core.first.call(null,e);
var v__6023 = cljs.core.second.call(null,e);
if(cljs.core.contains_QMARK_.call(null,m,k__6022))
{return cljs.core.assoc.call(null,m,k__6022,f.call(null,cljs.core.get.call(null,m,k__6022),v__6023));
} else
{return cljs.core.assoc.call(null,m,k__6022,v__6023);
}
});
var merge2__6026 = (function (m1,m2){
return cljs.core.reduce.call(null,merge_entry__6024,(function (){var or__3824__auto____6025 = m1;
if(cljs.core.truth_(or__3824__auto____6025))
{return or__3824__auto____6025;
} else
{return cljs.core.ObjMap.fromObject([],{});
}
})(),cljs.core.seq.call(null,m2));
});
return cljs.core.reduce.call(null,merge2__6026,maps);
} else
{return null;
}
};
var merge_with = function (f,var_args){
var maps = null;
if (goog.isDef(var_args)) {
  maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return merge_with__delegate.call(this, f, maps);
};
merge_with.cljs$lang$maxFixedArity = 1;
merge_with.cljs$lang$applyTo = (function (arglist__6027){
var f = cljs.core.first(arglist__6027);
var maps = cljs.core.rest(arglist__6027);
return merge_with__delegate(f, maps);
});
merge_with.cljs$lang$arity$variadic = merge_with__delegate;
return merge_with;
})()
;
/**
* Returns a map containing only those entries in map whose key is in keys
*/
cljs.core.select_keys = (function select_keys(map,keyseq){
var ret__6028 = cljs.core.ObjMap.fromObject([],{});
var keys__6029 = cljs.core.seq.call(null,keyseq);
while(true){
if(cljs.core.truth_(keys__6029))
{var key__6030 = cljs.core.first.call(null,keys__6029);
var entry__6031 = cljs.core.get.call(null,map,key__6030,"\uFDD0'clojure.core/not-found");
{
var G__6032 = ((cljs.core.not_EQ_.call(null,entry__6031,"\uFDD0'clojure.core/not-found"))?cljs.core.assoc.call(null,ret__6028,key__6030,entry__6031):ret__6028);
var G__6033 = cljs.core.next.call(null,keys__6029);
ret__6028 = G__6032;
keys__6029 = G__6033;
continue;
}
} else
{return ret__6028;
}
break;
}
});
void 0;

/**
* @constructor
*/
cljs.core.PersistentHashSet = (function (meta,hash_map,__hash){
this.meta = meta;
this.hash_map = hash_map;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 2155022479;
})
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentHashSet");
});
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
var this__6039 = this;
return (new cljs.core.TransientHashSet(cljs.core.transient$.call(null,this__6039.hash_map)));
});
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__6040 = this;
var h__264__auto____6041 = this__6040.__hash;
if((h__264__auto____6041 != null))
{return h__264__auto____6041;
} else
{var h__264__auto____6042 = cljs.core.hash_iset.call(null,coll);
this__6040.__hash = h__264__auto____6042;
return h__264__auto____6042;
}
});
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,v){
var this__6043 = this;
return cljs.core._lookup.call(null,coll,v,null);
});
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,v,not_found){
var this__6044 = this;
if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null,this__6044.hash_map,v)))
{return v;
} else
{return not_found;
}
});
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentHashSet.prototype.call = (function() {
var G__6063 = null;
var G__6063__2 = (function (tsym6037,k){
var this__6045 = this;
var tsym6037__6046 = this;
var coll__6047 = tsym6037__6046;
return cljs.core._lookup.call(null,coll__6047,k);
});
var G__6063__3 = (function (tsym6038,k,not_found){
var this__6048 = this;
var tsym6038__6049 = this;
var coll__6050 = tsym6038__6049;
return cljs.core._lookup.call(null,coll__6050,k,not_found);
});
G__6063 = function(tsym6038,k,not_found){
switch(arguments.length){
case 2:
return G__6063__2.call(this,tsym6038,k);
case 3:
return G__6063__3.call(this,tsym6038,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__6063;
})()
;
cljs.core.PersistentHashSet.prototype.apply = (function (tsym6035,args6036){
return tsym6035.call.apply(tsym6035,[tsym6035].concat(cljs.core.aclone.call(null,args6036)));
});
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__6051 = this;
return (new cljs.core.PersistentHashSet(this__6051.meta,cljs.core.assoc.call(null,this__6051.hash_map,o,null),null));
});
cljs.core.PersistentHashSet.prototype.toString = (function (){
var this__6052 = this;
var this$__6053 = this;
return cljs.core.pr_str.call(null,this$__6053);
});
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__6054 = this;
return cljs.core.keys.call(null,this__6054.hash_map);
});
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = (function (coll,v){
var this__6055 = this;
return (new cljs.core.PersistentHashSet(this__6055.meta,cljs.core.dissoc.call(null,this__6055.hash_map,v),null));
});
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__6056 = this;
return cljs.core.count.call(null,cljs.core.seq.call(null,coll));
});
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__6057 = this;
var and__3822__auto____6058 = cljs.core.set_QMARK_.call(null,other);
if(and__3822__auto____6058)
{var and__3822__auto____6059 = (cljs.core.count.call(null,coll) === cljs.core.count.call(null,other));
if(and__3822__auto____6059)
{return cljs.core.every_QMARK_.call(null,(function (p1__6034_SHARP_){
return cljs.core.contains_QMARK_.call(null,coll,p1__6034_SHARP_);
}),other);
} else
{return and__3822__auto____6059;
}
} else
{return and__3822__auto____6058;
}
});
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__6060 = this;
return (new cljs.core.PersistentHashSet(meta,this__6060.hash_map,this__6060.__hash));
});
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__6061 = this;
return this__6061.meta;
});
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__6062 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentHashSet.EMPTY,this__6062.meta);
});
cljs.core.PersistentHashSet;
cljs.core.PersistentHashSet.EMPTY = (new cljs.core.PersistentHashSet(null,cljs.core.hash_map.call(null),0));

/**
* @constructor
*/
cljs.core.TransientHashSet = (function (transient_map){
this.transient_map = transient_map;
this.cljs$lang$protocol_mask$partition0$ = 131;
this.cljs$lang$protocol_mask$partition1$ = 17;
})
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.TransientHashSet");
});
cljs.core.TransientHashSet.prototype.cljs$core$IFn$ = true;
cljs.core.TransientHashSet.prototype.call = (function() {
var G__6081 = null;
var G__6081__2 = (function (tsym6067,k){
var this__6069 = this;
var tsym6067__6070 = this;
var tcoll__6071 = tsym6067__6070;
if((cljs.core._lookup.call(null,this__6069.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel))
{return null;
} else
{return k;
}
});
var G__6081__3 = (function (tsym6068,k,not_found){
var this__6072 = this;
var tsym6068__6073 = this;
var tcoll__6074 = tsym6068__6073;
if((cljs.core._lookup.call(null,this__6072.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel))
{return not_found;
} else
{return k;
}
});
G__6081 = function(tsym6068,k,not_found){
switch(arguments.length){
case 2:
return G__6081__2.call(this,tsym6068,k);
case 3:
return G__6081__3.call(this,tsym6068,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__6081;
})()
;
cljs.core.TransientHashSet.prototype.apply = (function (tsym6065,args6066){
return tsym6065.call.apply(tsym6065,[tsym6065].concat(cljs.core.aclone.call(null,args6066)));
});
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$ = true;
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,v){
var this__6075 = this;
return cljs.core._lookup.call(null,tcoll,v,null);
});
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,v,not_found){
var this__6076 = this;
if((cljs.core._lookup.call(null,this__6076.transient_map,v,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel))
{return not_found;
} else
{return v;
}
});
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$ = true;
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (tcoll){
var this__6077 = this;
return cljs.core.count.call(null,this__6077.transient_map);
});
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$ = true;
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = (function (tcoll,v){
var this__6078 = this;
this__6078.transient_map = cljs.core.dissoc_BANG_.call(null,this__6078.transient_map,v);
return tcoll;
});
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$ = true;
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
var this__6079 = this;
this__6079.transient_map = cljs.core.assoc_BANG_.call(null,this__6079.transient_map,o,null);
return tcoll;
});
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
var this__6080 = this;
return (new cljs.core.PersistentHashSet(null,cljs.core.persistent_BANG_.call(null,this__6080.transient_map),null));
});
cljs.core.TransientHashSet;

/**
* @constructor
*/
cljs.core.PersistentTreeSet = (function (meta,tree_map,__hash){
this.meta = meta;
this.tree_map = tree_map;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 208865423;
})
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.PersistentTreeSet");
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
var this__6086 = this;
var h__264__auto____6087 = this__6086.__hash;
if((h__264__auto____6087 != null))
{return h__264__auto____6087;
} else
{var h__264__auto____6088 = cljs.core.hash_iset.call(null,coll);
this__6086.__hash = h__264__auto____6088;
return h__264__auto____6088;
}
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,v){
var this__6089 = this;
return cljs.core._lookup.call(null,coll,v,null);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,v,not_found){
var this__6090 = this;
if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null,this__6090.tree_map,v)))
{return v;
} else
{return not_found;
}
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$ = true;
cljs.core.PersistentTreeSet.prototype.call = (function() {
var G__6114 = null;
var G__6114__2 = (function (tsym6084,k){
var this__6091 = this;
var tsym6084__6092 = this;
var coll__6093 = tsym6084__6092;
return cljs.core._lookup.call(null,coll__6093,k);
});
var G__6114__3 = (function (tsym6085,k,not_found){
var this__6094 = this;
var tsym6085__6095 = this;
var coll__6096 = tsym6085__6095;
return cljs.core._lookup.call(null,coll__6096,k,not_found);
});
G__6114 = function(tsym6085,k,not_found){
switch(arguments.length){
case 2:
return G__6114__2.call(this,tsym6085,k);
case 3:
return G__6114__3.call(this,tsym6085,k,not_found);
}
throw('Invalid arity: ' + arguments.length);
};
return G__6114;
})()
;
cljs.core.PersistentTreeSet.prototype.apply = (function (tsym6082,args6083){
return tsym6082.call.apply(tsym6082,[tsym6082].concat(cljs.core.aclone.call(null,args6083)));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
var this__6097 = this;
return (new cljs.core.PersistentTreeSet(this__6097.meta,cljs.core.assoc.call(null,this__6097.tree_map,o,null),null));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
var this__6098 = this;
return cljs.core.map.call(null,cljs.core.key,cljs.core.rseq.call(null,this__6098.tree_map));
});
cljs.core.PersistentTreeSet.prototype.toString = (function (){
var this__6099 = this;
var this$__6100 = this;
return cljs.core.pr_str.call(null,this$__6100);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = (function (coll,ascending_QMARK_){
var this__6101 = this;
return cljs.core.map.call(null,cljs.core.key,cljs.core._sorted_seq.call(null,this__6101.tree_map,ascending_QMARK_));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = (function (coll,k,ascending_QMARK_){
var this__6102 = this;
return cljs.core.map.call(null,cljs.core.key,cljs.core._sorted_seq_from.call(null,this__6102.tree_map,k,ascending_QMARK_));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = (function (coll,entry){
var this__6103 = this;
return entry;
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = (function (coll){
var this__6104 = this;
return cljs.core._comparator.call(null,this__6104.tree_map);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
var this__6105 = this;
return cljs.core.keys.call(null,this__6105.tree_map);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = (function (coll,v){
var this__6106 = this;
return (new cljs.core.PersistentTreeSet(this__6106.meta,cljs.core.dissoc.call(null,this__6106.tree_map,v),null));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
var this__6107 = this;
return cljs.core.count.call(null,this__6107.tree_map);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
var this__6108 = this;
var and__3822__auto____6109 = cljs.core.set_QMARK_.call(null,other);
if(and__3822__auto____6109)
{var and__3822__auto____6110 = (cljs.core.count.call(null,coll) === cljs.core.count.call(null,other));
if(and__3822__auto____6110)
{return cljs.core.every_QMARK_.call(null,(function (p1__6064_SHARP_){
return cljs.core.contains_QMARK_.call(null,coll,p1__6064_SHARP_);
}),other);
} else
{return and__3822__auto____6110;
}
} else
{return and__3822__auto____6109;
}
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta){
var this__6111 = this;
return (new cljs.core.PersistentTreeSet(meta,this__6111.tree_map,this__6111.__hash));
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
var this__6112 = this;
return this__6112.meta;
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
var this__6113 = this;
return cljs.core.with_meta.call(null,cljs.core.PersistentTreeSet.EMPTY,this__6113.meta);
});
cljs.core.PersistentTreeSet;
cljs.core.PersistentTreeSet.EMPTY = (new cljs.core.PersistentTreeSet(null,cljs.core.sorted_map.call(null),0));
/**
* Returns a set of the distinct elements of coll.
*/
cljs.core.set = (function set(coll){
var in$__6115 = cljs.core.seq.call(null,coll);
var out__6116 = cljs.core.transient$.call(null,cljs.core.PersistentHashSet.EMPTY);
while(true){
if(cljs.core.truth_(cljs.core.seq.call(null,in$__6115)))
{{
var G__6117 = cljs.core.next.call(null,in$__6115);
var G__6118 = cljs.core.conj_BANG_.call(null,out__6116,cljs.core.first.call(null,in$__6115));
in$__6115 = G__6117;
out__6116 = G__6118;
continue;
}
} else
{return cljs.core.persistent_BANG_.call(null,out__6116);
}
break;
}
});
/**
* Returns a new sorted set with supplied keys.
* @param {...*} var_args
*/
cljs.core.sorted_set = (function() { 
var sorted_set__delegate = function (keys){
return cljs.core.reduce.call(null,cljs.core._conj,cljs.core.PersistentTreeSet.EMPTY,keys);
};
var sorted_set = function (var_args){
var keys = null;
if (goog.isDef(var_args)) {
  keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return sorted_set__delegate.call(this, keys);
};
sorted_set.cljs$lang$maxFixedArity = 0;
sorted_set.cljs$lang$applyTo = (function (arglist__6119){
var keys = cljs.core.seq(arglist__6119);;
return sorted_set__delegate(keys);
});
sorted_set.cljs$lang$arity$variadic = sorted_set__delegate;
return sorted_set;
})()
;
/**
* Returns a new sorted set with supplied keys, using the supplied comparator.
* @param {...*} var_args
*/
cljs.core.sorted_set_by = (function() { 
var sorted_set_by__delegate = function (comparator,keys){
return cljs.core.reduce.call(null,cljs.core._conj,(new cljs.core.PersistentTreeSet(null,cljs.core.sorted_map_by.call(null,comparator),0)),keys);
};
var sorted_set_by = function (comparator,var_args){
var keys = null;
if (goog.isDef(var_args)) {
  keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return sorted_set_by__delegate.call(this, comparator, keys);
};
sorted_set_by.cljs$lang$maxFixedArity = 1;
sorted_set_by.cljs$lang$applyTo = (function (arglist__6121){
var comparator = cljs.core.first(arglist__6121);
var keys = cljs.core.rest(arglist__6121);
return sorted_set_by__delegate(comparator, keys);
});
sorted_set_by.cljs$lang$arity$variadic = sorted_set_by__delegate;
return sorted_set_by;
})()
;
/**
* Given a map of replacement pairs and a vector/collection, returns a
* vector/seq with any elements = a key in smap replaced with the
* corresponding val in smap
*/
cljs.core.replace = (function replace(smap,coll){
if(cljs.core.vector_QMARK_.call(null,coll))
{var n__6122 = cljs.core.count.call(null,coll);
return cljs.core.reduce.call(null,(function (v,i){
var temp__3971__auto____6123 = cljs.core.find.call(null,smap,cljs.core.nth.call(null,v,i));
if(cljs.core.truth_(temp__3971__auto____6123))
{var e__6124 = temp__3971__auto____6123;
return cljs.core.assoc.call(null,v,i,cljs.core.second.call(null,e__6124));
} else
{return v;
}
}),coll,cljs.core.take.call(null,n__6122,cljs.core.iterate.call(null,cljs.core.inc,0)));
} else
{return cljs.core.map.call(null,(function (p1__6120_SHARP_){
var temp__3971__auto____6125 = cljs.core.find.call(null,smap,p1__6120_SHARP_);
if(cljs.core.truth_(temp__3971__auto____6125))
{var e__6126 = temp__3971__auto____6125;
return cljs.core.second.call(null,e__6126);
} else
{return p1__6120_SHARP_;
}
}),coll);
}
});
/**
* Returns a lazy sequence of the elements of coll with duplicates removed
*/
cljs.core.distinct = (function distinct(coll){
var step__6134 = (function step(xs,seen){
return (new cljs.core.LazySeq(null,false,(function (){
return (function (p__6127,seen){
while(true){
var vec__6128__6129 = p__6127;
var f__6130 = cljs.core.nth.call(null,vec__6128__6129,0,null);
var xs__6131 = vec__6128__6129;
var temp__3974__auto____6132 = cljs.core.seq.call(null,xs__6131);
if(cljs.core.truth_(temp__3974__auto____6132))
{var s__6133 = temp__3974__auto____6132;
if(cljs.core.contains_QMARK_.call(null,seen,f__6130))
{{
var G__6135 = cljs.core.rest.call(null,s__6133);
var G__6136 = seen;
p__6127 = G__6135;
seen = G__6136;
continue;
}
} else
{return cljs.core.cons.call(null,f__6130,step.call(null,cljs.core.rest.call(null,s__6133),cljs.core.conj.call(null,seen,f__6130)));
}
} else
{return null;
}
break;
}
}).call(null,xs,seen);
})));
});
return step__6134.call(null,coll,cljs.core.set([]));
});
cljs.core.butlast = (function butlast(s){
var ret__6137 = cljs.core.PersistentVector.fromArray([]);
var s__6138 = s;
while(true){
if(cljs.core.truth_(cljs.core.next.call(null,s__6138)))
{{
var G__6139 = cljs.core.conj.call(null,ret__6137,cljs.core.first.call(null,s__6138));
var G__6140 = cljs.core.next.call(null,s__6138);
ret__6137 = G__6139;
s__6138 = G__6140;
continue;
}
} else
{return cljs.core.seq.call(null,ret__6137);
}
break;
}
});
/**
* Returns the name String of a string, symbol or keyword.
*/
cljs.core.name = (function name(x){
if(cljs.core.string_QMARK_.call(null,x))
{return x;
} else
{if((function (){var or__3824__auto____6141 = cljs.core.keyword_QMARK_.call(null,x);
if(or__3824__auto____6141)
{return or__3824__auto____6141;
} else
{return cljs.core.symbol_QMARK_.call(null,x);
}
})())
{var i__6142 = x.lastIndexOf("/");
if((i__6142 < 0))
{return cljs.core.subs.call(null,x,2);
} else
{return cljs.core.subs.call(null,x,(i__6142 + 1));
}
} else
{if("\uFDD0'else")
{throw (new Error([cljs.core.str("Doesn't support name: "),cljs.core.str(x)].join('')));
} else
{return null;
}
}
}
});
/**
* Returns the namespace String of a symbol or keyword, or nil if not present.
*/
cljs.core.namespace = (function namespace(x){
if((function (){var or__3824__auto____6143 = cljs.core.keyword_QMARK_.call(null,x);
if(or__3824__auto____6143)
{return or__3824__auto____6143;
} else
{return cljs.core.symbol_QMARK_.call(null,x);
}
})())
{var i__6144 = x.lastIndexOf("/");
if((i__6144 > -1))
{return cljs.core.subs.call(null,x,2,i__6144);
} else
{return null;
}
} else
{throw (new Error([cljs.core.str("Doesn't support namespace: "),cljs.core.str(x)].join('')));
}
});
/**
* Returns a map with the keys mapped to the corresponding vals.
*/
cljs.core.zipmap = (function zipmap(keys,vals){
var map__6147 = cljs.core.ObjMap.fromObject([],{});
var ks__6148 = cljs.core.seq.call(null,keys);
var vs__6149 = cljs.core.seq.call(null,vals);
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____6150 = ks__6148;
if(cljs.core.truth_(and__3822__auto____6150))
{return vs__6149;
} else
{return and__3822__auto____6150;
}
})()))
{{
var G__6151 = cljs.core.assoc.call(null,map__6147,cljs.core.first.call(null,ks__6148),cljs.core.first.call(null,vs__6149));
var G__6152 = cljs.core.next.call(null,ks__6148);
var G__6153 = cljs.core.next.call(null,vs__6149);
map__6147 = G__6151;
ks__6148 = G__6152;
vs__6149 = G__6153;
continue;
}
} else
{return map__6147;
}
break;
}
});
/**
* Returns the x for which (k x), a number, is greatest.
* @param {...*} var_args
*/
cljs.core.max_key = (function() {
var max_key = null;
var max_key__2 = (function (k,x){
return x;
});
var max_key__3 = (function (k,x,y){
if((k.call(null,x) > k.call(null,y)))
{return x;
} else
{return y;
}
});
var max_key__4 = (function() { 
var G__6156__delegate = function (k,x,y,more){
return cljs.core.reduce.call(null,(function (p1__6145_SHARP_,p2__6146_SHARP_){
return max_key.call(null,k,p1__6145_SHARP_,p2__6146_SHARP_);
}),max_key.call(null,k,x,y),more);
};
var G__6156 = function (k,x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6156__delegate.call(this, k, x, y, more);
};
G__6156.cljs$lang$maxFixedArity = 3;
G__6156.cljs$lang$applyTo = (function (arglist__6157){
var k = cljs.core.first(arglist__6157);
var x = cljs.core.first(cljs.core.next(arglist__6157));
var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6157)));
var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6157)));
return G__6156__delegate(k, x, y, more);
});
G__6156.cljs$lang$arity$variadic = G__6156__delegate;
return G__6156;
})()
;
max_key = function(k,x,y,var_args){
var more = var_args;
switch(arguments.length){
case 2:
return max_key__2.call(this,k,x);
case 3:
return max_key__3.call(this,k,x,y);
default:
return max_key__4.cljs$lang$arity$variadic(k,x,y, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
max_key.cljs$lang$maxFixedArity = 3;
max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
max_key.cljs$lang$arity$2 = max_key__2;
max_key.cljs$lang$arity$3 = max_key__3;
max_key.cljs$lang$arity$variadic = max_key__4.cljs$lang$arity$variadic;
return max_key;
})()
;
/**
* Returns the x for which (k x), a number, is least.
* @param {...*} var_args
*/
cljs.core.min_key = (function() {
var min_key = null;
var min_key__2 = (function (k,x){
return x;
});
var min_key__3 = (function (k,x,y){
if((k.call(null,x) < k.call(null,y)))
{return x;
} else
{return y;
}
});
var min_key__4 = (function() { 
var G__6158__delegate = function (k,x,y,more){
return cljs.core.reduce.call(null,(function (p1__6154_SHARP_,p2__6155_SHARP_){
return min_key.call(null,k,p1__6154_SHARP_,p2__6155_SHARP_);
}),min_key.call(null,k,x,y),more);
};
var G__6158 = function (k,x,y,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6158__delegate.call(this, k, x, y, more);
};
G__6158.cljs$lang$maxFixedArity = 3;
G__6158.cljs$lang$applyTo = (function (arglist__6159){
var k = cljs.core.first(arglist__6159);
var x = cljs.core.first(cljs.core.next(arglist__6159));
var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6159)));
var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6159)));
return G__6158__delegate(k, x, y, more);
});
G__6158.cljs$lang$arity$variadic = G__6158__delegate;
return G__6158;
})()
;
min_key = function(k,x,y,var_args){
var more = var_args;
switch(arguments.length){
case 2:
return min_key__2.call(this,k,x);
case 3:
return min_key__3.call(this,k,x,y);
default:
return min_key__4.cljs$lang$arity$variadic(k,x,y, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
min_key.cljs$lang$maxFixedArity = 3;
min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
min_key.cljs$lang$arity$2 = min_key__2;
min_key.cljs$lang$arity$3 = min_key__3;
min_key.cljs$lang$arity$variadic = min_key__4.cljs$lang$arity$variadic;
return min_key;
})()
;
/**
* Returns a lazy sequence of lists like partition, but may include
* partitions with fewer than n items at the end.
*/
cljs.core.partition_all = (function() {
var partition_all = null;
var partition_all__2 = (function (n,coll){
return partition_all.call(null,n,n,coll);
});
var partition_all__3 = (function (n,step,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____6160 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____6160))
{var s__6161 = temp__3974__auto____6160;
return cljs.core.cons.call(null,cljs.core.take.call(null,n,s__6161),partition_all.call(null,n,step,cljs.core.drop.call(null,step,s__6161)));
} else
{return null;
}
})));
});
partition_all = function(n,step,coll){
switch(arguments.length){
case 2:
return partition_all__2.call(this,n,step);
case 3:
return partition_all__3.call(this,n,step,coll);
}
throw('Invalid arity: ' + arguments.length);
};
partition_all.cljs$lang$arity$2 = partition_all__2;
partition_all.cljs$lang$arity$3 = partition_all__3;
return partition_all;
})()
;
/**
* Returns a lazy sequence of successive items from coll while
* (pred item) returns true. pred must be free of side-effects.
*/
cljs.core.take_while = (function take_while(pred,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____6162 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____6162))
{var s__6163 = temp__3974__auto____6162;
if(cljs.core.truth_(pred.call(null,cljs.core.first.call(null,s__6163))))
{return cljs.core.cons.call(null,cljs.core.first.call(null,s__6163),take_while.call(null,pred,cljs.core.rest.call(null,s__6163)));
} else
{return null;
}
} else
{return null;
}
})));
});
cljs.core.mk_bound_fn = (function mk_bound_fn(sc,test,key){
return (function (e){
var comp__6164 = cljs.core._comparator.call(null,sc);
return test.call(null,comp__6164.call(null,cljs.core._entry_key.call(null,sc,e),key),0);
});
});
/**
* sc must be a sorted collection, test(s) one of <, <=, > or
* >=. Returns a seq of those entries with keys ek for
* which (test (.. sc comparator (compare ek key)) 0) is true
*/
cljs.core.subseq = (function() {
var subseq = null;
var subseq__3 = (function (sc,test,key){
var include__6165 = cljs.core.mk_bound_fn.call(null,sc,test,key);
if(cljs.core.truth_(cljs.core.set([cljs.core._GT_,cljs.core._GT__EQ_]).call(null,test)))
{var temp__3974__auto____6166 = cljs.core._sorted_seq_from.call(null,sc,key,true);
if(cljs.core.truth_(temp__3974__auto____6166))
{var vec__6167__6168 = temp__3974__auto____6166;
var e__6169 = cljs.core.nth.call(null,vec__6167__6168,0,null);
var s__6170 = vec__6167__6168;
if(cljs.core.truth_(include__6165.call(null,e__6169)))
{return s__6170;
} else
{return cljs.core.next.call(null,s__6170);
}
} else
{return null;
}
} else
{return cljs.core.take_while.call(null,include__6165,cljs.core._sorted_seq.call(null,sc,true));
}
});
var subseq__5 = (function (sc,start_test,start_key,end_test,end_key){
var temp__3974__auto____6171 = cljs.core._sorted_seq_from.call(null,sc,start_key,true);
if(cljs.core.truth_(temp__3974__auto____6171))
{var vec__6172__6173 = temp__3974__auto____6171;
var e__6174 = cljs.core.nth.call(null,vec__6172__6173,0,null);
var s__6175 = vec__6172__6173;
return cljs.core.take_while.call(null,cljs.core.mk_bound_fn.call(null,sc,end_test,end_key),(cljs.core.truth_(cljs.core.mk_bound_fn.call(null,sc,start_test,start_key).call(null,e__6174))?s__6175:cljs.core.next.call(null,s__6175)));
} else
{return null;
}
});
subseq = function(sc,start_test,start_key,end_test,end_key){
switch(arguments.length){
case 3:
return subseq__3.call(this,sc,start_test,start_key);
case 5:
return subseq__5.call(this,sc,start_test,start_key,end_test,end_key);
}
throw('Invalid arity: ' + arguments.length);
};
subseq.cljs$lang$arity$3 = subseq__3;
subseq.cljs$lang$arity$5 = subseq__5;
return subseq;
})()
;
/**
* sc must be a sorted collection, test(s) one of <, <=, > or
* >=. Returns a reverse seq of those entries with keys ek for
* which (test (.. sc comparator (compare ek key)) 0) is true
*/
cljs.core.rsubseq = (function() {
var rsubseq = null;
var rsubseq__3 = (function (sc,test,key){
var include__6176 = cljs.core.mk_bound_fn.call(null,sc,test,key);
if(cljs.core.truth_(cljs.core.set([cljs.core._LT_,cljs.core._LT__EQ_]).call(null,test)))
{var temp__3974__auto____6177 = cljs.core._sorted_seq_from.call(null,sc,key,false);
if(cljs.core.truth_(temp__3974__auto____6177))
{var vec__6178__6179 = temp__3974__auto____6177;
var e__6180 = cljs.core.nth.call(null,vec__6178__6179,0,null);
var s__6181 = vec__6178__6179;
if(cljs.core.truth_(include__6176.call(null,e__6180)))
{return s__6181;
} else
{return cljs.core.next.call(null,s__6181);
}
} else
{return null;
}
} else
{return cljs.core.take_while.call(null,include__6176,cljs.core._sorted_seq.call(null,sc,false));
}
});
var rsubseq__5 = (function (sc,start_test,start_key,end_test,end_key){
var temp__3974__auto____6182 = cljs.core._sorted_seq_from.call(null,sc,end_key,false);
if(cljs.core.truth_(temp__3974__auto____6182))
{var vec__6183__6184 = temp__3974__auto____6182;
var e__6185 = cljs.core.nth.call(null,vec__6183__6184,0,null);
var s__6186 = vec__6183__6184;
return cljs.core.take_while.call(null,cljs.core.mk_bound_fn.call(null,sc,start_test,start_key),(cljs.core.truth_(cljs.core.mk_bound_fn.call(null,sc,end_test,end_key).call(null,e__6185))?s__6186:cljs.core.next.call(null,s__6186)));
} else
{return null;
}
});
rsubseq = function(sc,start_test,start_key,end_test,end_key){
switch(arguments.length){
case 3:
return rsubseq__3.call(this,sc,start_test,start_key);
case 5:
return rsubseq__5.call(this,sc,start_test,start_key,end_test,end_key);
}
throw('Invalid arity: ' + arguments.length);
};
rsubseq.cljs$lang$arity$3 = rsubseq__3;
rsubseq.cljs$lang$arity$5 = rsubseq__5;
return rsubseq;
})()
;

/**
* @constructor
*/
cljs.core.Range = (function (meta,start,end,step,__hash){
this.meta = meta;
this.start = start;
this.end = end;
this.step = step;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 16187486;
})
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Range");
});
cljs.core.Range.prototype.cljs$core$IHash$ = true;
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = (function (rng){
var this__6187 = this;
var h__264__auto____6188 = this__6187.__hash;
if((h__264__auto____6188 != null))
{return h__264__auto____6188;
} else
{var h__264__auto____6189 = cljs.core.hash_coll.call(null,rng);
this__6187.__hash = h__264__auto____6189;
return h__264__auto____6189;
}
});
cljs.core.Range.prototype.cljs$core$ISequential$ = true;
cljs.core.Range.prototype.cljs$core$ICollection$ = true;
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = (function (rng,o){
var this__6190 = this;
return cljs.core.cons.call(null,o,rng);
});
cljs.core.Range.prototype.toString = (function (){
var this__6191 = this;
var this$__6192 = this;
return cljs.core.pr_str.call(null,this$__6192);
});
cljs.core.Range.prototype.cljs$core$IReduce$ = true;
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (rng,f){
var this__6193 = this;
return cljs.core.ci_reduce.call(null,rng,f);
});
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (rng,f,s){
var this__6194 = this;
return cljs.core.ci_reduce.call(null,rng,f,s);
});
cljs.core.Range.prototype.cljs$core$ISeqable$ = true;
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (rng){
var this__6195 = this;
var comp__6196 = (((this__6195.step > 0))?cljs.core._LT_:cljs.core._GT_);
if(cljs.core.truth_(comp__6196.call(null,this__6195.start,this__6195.end)))
{return rng;
} else
{return null;
}
});
cljs.core.Range.prototype.cljs$core$ICounted$ = true;
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = (function (rng){
var this__6197 = this;
if(cljs.core.not.call(null,cljs.core._seq.call(null,rng)))
{return 0;
} else
{return Math['ceil'](((this__6197.end - this__6197.start) / this__6197.step));
}
});
cljs.core.Range.prototype.cljs$core$ISeq$ = true;
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = (function (rng){
var this__6198 = this;
return this__6198.start;
});
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = (function (rng){
var this__6199 = this;
if(cljs.core.truth_(cljs.core._seq.call(null,rng)))
{return (new cljs.core.Range(this__6199.meta,(this__6199.start + this__6199.step),this__6199.end,this__6199.step,null));
} else
{return cljs.core.list.call(null);
}
});
cljs.core.Range.prototype.cljs$core$IEquiv$ = true;
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (rng,other){
var this__6200 = this;
return cljs.core.equiv_sequential.call(null,rng,other);
});
cljs.core.Range.prototype.cljs$core$IWithMeta$ = true;
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (rng,meta){
var this__6201 = this;
return (new cljs.core.Range(meta,this__6201.start,this__6201.end,this__6201.step,this__6201.__hash));
});
cljs.core.Range.prototype.cljs$core$IMeta$ = true;
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = (function (rng){
var this__6202 = this;
return this__6202.meta;
});
cljs.core.Range.prototype.cljs$core$IIndexed$ = true;
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (rng,n){
var this__6203 = this;
if((n < cljs.core._count.call(null,rng)))
{return (this__6203.start + (n * this__6203.step));
} else
{if((function (){var and__3822__auto____6204 = (this__6203.start > this__6203.end);
if(and__3822__auto____6204)
{return (this__6203.step === 0);
} else
{return and__3822__auto____6204;
}
})())
{return this__6203.start;
} else
{throw (new Error("Index out of bounds"));
}
}
});
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (rng,n,not_found){
var this__6205 = this;
if((n < cljs.core._count.call(null,rng)))
{return (this__6205.start + (n * this__6205.step));
} else
{if((function (){var and__3822__auto____6206 = (this__6205.start > this__6205.end);
if(and__3822__auto____6206)
{return (this__6205.step === 0);
} else
{return and__3822__auto____6206;
}
})())
{return this__6205.start;
} else
{return not_found;
}
}
});
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$ = true;
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (rng){
var this__6207 = this;
return cljs.core.with_meta.call(null,cljs.core.List.EMPTY,this__6207.meta);
});
cljs.core.Range;
/**
* Returns a lazy seq of nums from start (inclusive) to end
* (exclusive), by step, where start defaults to 0, step to 1,
* and end to infinity.
*/
cljs.core.range = (function() {
var range = null;
var range__0 = (function (){
return range.call(null,0,Number['MAX_VALUE'],1);
});
var range__1 = (function (end){
return range.call(null,0,end,1);
});
var range__2 = (function (start,end){
return range.call(null,start,end,1);
});
var range__3 = (function (start,end,step){
return (new cljs.core.Range(null,start,end,step,null));
});
range = function(start,end,step){
switch(arguments.length){
case 0:
return range__0.call(this);
case 1:
return range__1.call(this,start);
case 2:
return range__2.call(this,start,end);
case 3:
return range__3.call(this,start,end,step);
}
throw('Invalid arity: ' + arguments.length);
};
range.cljs$lang$arity$0 = range__0;
range.cljs$lang$arity$1 = range__1;
range.cljs$lang$arity$2 = range__2;
range.cljs$lang$arity$3 = range__3;
return range;
})()
;
/**
* Returns a lazy seq of every nth item in coll.
*/
cljs.core.take_nth = (function take_nth(n,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____6208 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____6208))
{var s__6209 = temp__3974__auto____6208;
return cljs.core.cons.call(null,cljs.core.first.call(null,s__6209),take_nth.call(null,n,cljs.core.drop.call(null,n,s__6209)));
} else
{return null;
}
})));
});
/**
* Returns a vector of [(take-while pred coll) (drop-while pred coll)]
*/
cljs.core.split_with = (function split_with(pred,coll){
return cljs.core.PersistentVector.fromArray([cljs.core.take_while.call(null,pred,coll),cljs.core.drop_while.call(null,pred,coll)]);
});
/**
* Applies f to each value in coll, splitting it each time f returns
* a new value.  Returns a lazy seq of partitions.
*/
cljs.core.partition_by = (function partition_by(f,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____6211 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____6211))
{var s__6212 = temp__3974__auto____6211;
var fst__6213 = cljs.core.first.call(null,s__6212);
var fv__6214 = f.call(null,fst__6213);
var run__6215 = cljs.core.cons.call(null,fst__6213,cljs.core.take_while.call(null,(function (p1__6210_SHARP_){
return cljs.core._EQ_.call(null,fv__6214,f.call(null,p1__6210_SHARP_));
}),cljs.core.next.call(null,s__6212)));
return cljs.core.cons.call(null,run__6215,partition_by.call(null,f,cljs.core.seq.call(null,cljs.core.drop.call(null,cljs.core.count.call(null,run__6215),s__6212))));
} else
{return null;
}
})));
});
/**
* Returns a map from distinct items in coll to the number of times
* they appear.
*/
cljs.core.frequencies = (function frequencies(coll){
return cljs.core.persistent_BANG_.call(null,cljs.core.reduce.call(null,(function (counts,x){
return cljs.core.assoc_BANG_.call(null,counts,x,(cljs.core.get.call(null,counts,x,0) + 1));
}),cljs.core.transient$.call(null,cljs.core.ObjMap.fromObject([],{})),coll));
});
/**
* Returns a lazy seq of the intermediate values of the reduction (as
* per reduce) of coll by f, starting with init.
*/
cljs.core.reductions = (function() {
var reductions = null;
var reductions__2 = (function (f,coll){
return (new cljs.core.LazySeq(null,false,(function (){
var temp__3971__auto____6226 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3971__auto____6226))
{var s__6227 = temp__3971__auto____6226;
return reductions.call(null,f,cljs.core.first.call(null,s__6227),cljs.core.rest.call(null,s__6227));
} else
{return cljs.core.list.call(null,f.call(null));
}
})));
});
var reductions__3 = (function (f,init,coll){
return cljs.core.cons.call(null,init,(new cljs.core.LazySeq(null,false,(function (){
var temp__3974__auto____6228 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(temp__3974__auto____6228))
{var s__6229 = temp__3974__auto____6228;
return reductions.call(null,f,f.call(null,init,cljs.core.first.call(null,s__6229)),cljs.core.rest.call(null,s__6229));
} else
{return null;
}
}))));
});
reductions = function(f,init,coll){
switch(arguments.length){
case 2:
return reductions__2.call(this,f,init);
case 3:
return reductions__3.call(this,f,init,coll);
}
throw('Invalid arity: ' + arguments.length);
};
reductions.cljs$lang$arity$2 = reductions__2;
reductions.cljs$lang$arity$3 = reductions__3;
return reductions;
})()
;
/**
* Takes a set of functions and returns a fn that is the juxtaposition
* of those fns.  The returned fn takes a variable number of args, and
* returns a vector containing the result of applying each fn to the
* args (left-to-right).
* ((juxt a b c) x) => [(a x) (b x) (c x)]
* @param {...*} var_args
*/
cljs.core.juxt = (function() {
var juxt = null;
var juxt__1 = (function (f){
return (function() {
var G__6231 = null;
var G__6231__0 = (function (){
return cljs.core.vector.call(null,f.call(null));
});
var G__6231__1 = (function (x){
return cljs.core.vector.call(null,f.call(null,x));
});
var G__6231__2 = (function (x,y){
return cljs.core.vector.call(null,f.call(null,x,y));
});
var G__6231__3 = (function (x,y,z){
return cljs.core.vector.call(null,f.call(null,x,y,z));
});
var G__6231__4 = (function() { 
var G__6232__delegate = function (x,y,z,args){
return cljs.core.vector.call(null,cljs.core.apply.call(null,f,x,y,z,args));
};
var G__6232 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6232__delegate.call(this, x, y, z, args);
};
G__6232.cljs$lang$maxFixedArity = 3;
G__6232.cljs$lang$applyTo = (function (arglist__6233){
var x = cljs.core.first(arglist__6233);
var y = cljs.core.first(cljs.core.next(arglist__6233));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6233)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6233)));
return G__6232__delegate(x, y, z, args);
});
G__6232.cljs$lang$arity$variadic = G__6232__delegate;
return G__6232;
})()
;
G__6231 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__6231__0.call(this);
case 1:
return G__6231__1.call(this,x);
case 2:
return G__6231__2.call(this,x,y);
case 3:
return G__6231__3.call(this,x,y,z);
default:
return G__6231__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__6231.cljs$lang$maxFixedArity = 3;
G__6231.cljs$lang$applyTo = G__6231__4.cljs$lang$applyTo;
return G__6231;
})()
});
var juxt__2 = (function (f,g){
return (function() {
var G__6234 = null;
var G__6234__0 = (function (){
return cljs.core.vector.call(null,f.call(null),g.call(null));
});
var G__6234__1 = (function (x){
return cljs.core.vector.call(null,f.call(null,x),g.call(null,x));
});
var G__6234__2 = (function (x,y){
return cljs.core.vector.call(null,f.call(null,x,y),g.call(null,x,y));
});
var G__6234__3 = (function (x,y,z){
return cljs.core.vector.call(null,f.call(null,x,y,z),g.call(null,x,y,z));
});
var G__6234__4 = (function() { 
var G__6235__delegate = function (x,y,z,args){
return cljs.core.vector.call(null,cljs.core.apply.call(null,f,x,y,z,args),cljs.core.apply.call(null,g,x,y,z,args));
};
var G__6235 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6235__delegate.call(this, x, y, z, args);
};
G__6235.cljs$lang$maxFixedArity = 3;
G__6235.cljs$lang$applyTo = (function (arglist__6236){
var x = cljs.core.first(arglist__6236);
var y = cljs.core.first(cljs.core.next(arglist__6236));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6236)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6236)));
return G__6235__delegate(x, y, z, args);
});
G__6235.cljs$lang$arity$variadic = G__6235__delegate;
return G__6235;
})()
;
G__6234 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__6234__0.call(this);
case 1:
return G__6234__1.call(this,x);
case 2:
return G__6234__2.call(this,x,y);
case 3:
return G__6234__3.call(this,x,y,z);
default:
return G__6234__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__6234.cljs$lang$maxFixedArity = 3;
G__6234.cljs$lang$applyTo = G__6234__4.cljs$lang$applyTo;
return G__6234;
})()
});
var juxt__3 = (function (f,g,h){
return (function() {
var G__6237 = null;
var G__6237__0 = (function (){
return cljs.core.vector.call(null,f.call(null),g.call(null),h.call(null));
});
var G__6237__1 = (function (x){
return cljs.core.vector.call(null,f.call(null,x),g.call(null,x),h.call(null,x));
});
var G__6237__2 = (function (x,y){
return cljs.core.vector.call(null,f.call(null,x,y),g.call(null,x,y),h.call(null,x,y));
});
var G__6237__3 = (function (x,y,z){
return cljs.core.vector.call(null,f.call(null,x,y,z),g.call(null,x,y,z),h.call(null,x,y,z));
});
var G__6237__4 = (function() { 
var G__6238__delegate = function (x,y,z,args){
return cljs.core.vector.call(null,cljs.core.apply.call(null,f,x,y,z,args),cljs.core.apply.call(null,g,x,y,z,args),cljs.core.apply.call(null,h,x,y,z,args));
};
var G__6238 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6238__delegate.call(this, x, y, z, args);
};
G__6238.cljs$lang$maxFixedArity = 3;
G__6238.cljs$lang$applyTo = (function (arglist__6239){
var x = cljs.core.first(arglist__6239);
var y = cljs.core.first(cljs.core.next(arglist__6239));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6239)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6239)));
return G__6238__delegate(x, y, z, args);
});
G__6238.cljs$lang$arity$variadic = G__6238__delegate;
return G__6238;
})()
;
G__6237 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__6237__0.call(this);
case 1:
return G__6237__1.call(this,x);
case 2:
return G__6237__2.call(this,x,y);
case 3:
return G__6237__3.call(this,x,y,z);
default:
return G__6237__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__6237.cljs$lang$maxFixedArity = 3;
G__6237.cljs$lang$applyTo = G__6237__4.cljs$lang$applyTo;
return G__6237;
})()
});
var juxt__4 = (function() { 
var G__6240__delegate = function (f,g,h,fs){
var fs__6230 = cljs.core.list_STAR_.call(null,f,g,h,fs);
return (function() {
var G__6241 = null;
var G__6241__0 = (function (){
return cljs.core.reduce.call(null,(function (p1__6216_SHARP_,p2__6217_SHARP_){
return cljs.core.conj.call(null,p1__6216_SHARP_,p2__6217_SHARP_.call(null));
}),cljs.core.PersistentVector.fromArray([]),fs__6230);
});
var G__6241__1 = (function (x){
return cljs.core.reduce.call(null,(function (p1__6218_SHARP_,p2__6219_SHARP_){
return cljs.core.conj.call(null,p1__6218_SHARP_,p2__6219_SHARP_.call(null,x));
}),cljs.core.PersistentVector.fromArray([]),fs__6230);
});
var G__6241__2 = (function (x,y){
return cljs.core.reduce.call(null,(function (p1__6220_SHARP_,p2__6221_SHARP_){
return cljs.core.conj.call(null,p1__6220_SHARP_,p2__6221_SHARP_.call(null,x,y));
}),cljs.core.PersistentVector.fromArray([]),fs__6230);
});
var G__6241__3 = (function (x,y,z){
return cljs.core.reduce.call(null,(function (p1__6222_SHARP_,p2__6223_SHARP_){
return cljs.core.conj.call(null,p1__6222_SHARP_,p2__6223_SHARP_.call(null,x,y,z));
}),cljs.core.PersistentVector.fromArray([]),fs__6230);
});
var G__6241__4 = (function() { 
var G__6242__delegate = function (x,y,z,args){
return cljs.core.reduce.call(null,(function (p1__6224_SHARP_,p2__6225_SHARP_){
return cljs.core.conj.call(null,p1__6224_SHARP_,cljs.core.apply.call(null,p2__6225_SHARP_,x,y,z,args));
}),cljs.core.PersistentVector.fromArray([]),fs__6230);
};
var G__6242 = function (x,y,z,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6242__delegate.call(this, x, y, z, args);
};
G__6242.cljs$lang$maxFixedArity = 3;
G__6242.cljs$lang$applyTo = (function (arglist__6243){
var x = cljs.core.first(arglist__6243);
var y = cljs.core.first(cljs.core.next(arglist__6243));
var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6243)));
var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6243)));
return G__6242__delegate(x, y, z, args);
});
G__6242.cljs$lang$arity$variadic = G__6242__delegate;
return G__6242;
})()
;
G__6241 = function(x,y,z,var_args){
var args = var_args;
switch(arguments.length){
case 0:
return G__6241__0.call(this);
case 1:
return G__6241__1.call(this,x);
case 2:
return G__6241__2.call(this,x,y);
case 3:
return G__6241__3.call(this,x,y,z);
default:
return G__6241__4.cljs$lang$arity$variadic(x,y,z, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
G__6241.cljs$lang$maxFixedArity = 3;
G__6241.cljs$lang$applyTo = G__6241__4.cljs$lang$applyTo;
return G__6241;
})()
};
var G__6240 = function (f,g,h,var_args){
var fs = null;
if (goog.isDef(var_args)) {
  fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3),0);
} 
return G__6240__delegate.call(this, f, g, h, fs);
};
G__6240.cljs$lang$maxFixedArity = 3;
G__6240.cljs$lang$applyTo = (function (arglist__6244){
var f = cljs.core.first(arglist__6244);
var g = cljs.core.first(cljs.core.next(arglist__6244));
var h = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6244)));
var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__6244)));
return G__6240__delegate(f, g, h, fs);
});
G__6240.cljs$lang$arity$variadic = G__6240__delegate;
return G__6240;
})()
;
juxt = function(f,g,h,var_args){
var fs = var_args;
switch(arguments.length){
case 1:
return juxt__1.call(this,f);
case 2:
return juxt__2.call(this,f,g);
case 3:
return juxt__3.call(this,f,g,h);
default:
return juxt__4.cljs$lang$arity$variadic(f,g,h, cljs.core.array_seq(arguments, 3));
}
throw('Invalid arity: ' + arguments.length);
};
juxt.cljs$lang$maxFixedArity = 3;
juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
juxt.cljs$lang$arity$1 = juxt__1;
juxt.cljs$lang$arity$2 = juxt__2;
juxt.cljs$lang$arity$3 = juxt__3;
juxt.cljs$lang$arity$variadic = juxt__4.cljs$lang$arity$variadic;
return juxt;
})()
;
/**
* When lazy sequences are produced via functions that have side
* effects, any effects other than those needed to produce the first
* element in the seq do not occur until the seq is consumed. dorun can
* be used to force any effects. Walks through the successive nexts of
* the seq, does not retain the head and returns nil.
*/
cljs.core.dorun = (function() {
var dorun = null;
var dorun__1 = (function (coll){
while(true){
if(cljs.core.truth_(cljs.core.seq.call(null,coll)))
{{
var G__6246 = cljs.core.next.call(null,coll);
coll = G__6246;
continue;
}
} else
{return null;
}
break;
}
});
var dorun__2 = (function (n,coll){
while(true){
if(cljs.core.truth_((function (){var and__3822__auto____6245 = cljs.core.seq.call(null,coll);
if(cljs.core.truth_(and__3822__auto____6245))
{return (n > 0);
} else
{return and__3822__auto____6245;
}
})()))
{{
var G__6247 = (n - 1);
var G__6248 = cljs.core.next.call(null,coll);
n = G__6247;
coll = G__6248;
continue;
}
} else
{return null;
}
break;
}
});
dorun = function(n,coll){
switch(arguments.length){
case 1:
return dorun__1.call(this,n);
case 2:
return dorun__2.call(this,n,coll);
}
throw('Invalid arity: ' + arguments.length);
};
dorun.cljs$lang$arity$1 = dorun__1;
dorun.cljs$lang$arity$2 = dorun__2;
return dorun;
})()
;
/**
* When lazy sequences are produced via functions that have side
* effects, any effects other than those needed to produce the first
* element in the seq do not occur until the seq is consumed. doall can
* be used to force any effects. Walks through the successive nexts of
* the seq, retains the head and returns it, thus causing the entire
* seq to reside in memory at one time.
*/
cljs.core.doall = (function() {
var doall = null;
var doall__1 = (function (coll){
cljs.core.dorun.call(null,coll);
return coll;
});
var doall__2 = (function (n,coll){
cljs.core.dorun.call(null,n,coll);
return coll;
});
doall = function(n,coll){
switch(arguments.length){
case 1:
return doall__1.call(this,n);
case 2:
return doall__2.call(this,n,coll);
}
throw('Invalid arity: ' + arguments.length);
};
doall.cljs$lang$arity$1 = doall__1;
doall.cljs$lang$arity$2 = doall__2;
return doall;
})()
;
/**
* Returns the result of (re-find re s) if re fully matches s.
*/
cljs.core.re_matches = (function re_matches(re,s){
var matches__6249 = re.exec(s);
if(cljs.core._EQ_.call(null,cljs.core.first.call(null,matches__6249),s))
{if((cljs.core.count.call(null,matches__6249) === 1))
{return cljs.core.first.call(null,matches__6249);
} else
{return cljs.core.vec.call(null,matches__6249);
}
} else
{return null;
}
});
/**
* Returns the first regex match, if any, of s to re, using
* re.exec(s). Returns a vector, containing first the matching
* substring, then any capturing groups if the regular expression contains
* capturing groups.
*/
cljs.core.re_find = (function re_find(re,s){
var matches__6250 = re.exec(s);
if((matches__6250 == null))
{return null;
} else
{if((cljs.core.count.call(null,matches__6250) === 1))
{return cljs.core.first.call(null,matches__6250);
} else
{return cljs.core.vec.call(null,matches__6250);
}
}
});
/**
* Returns a lazy sequence of successive matches of re in s.
*/
cljs.core.re_seq = (function re_seq(re,s){
var match_data__6251 = cljs.core.re_find.call(null,re,s);
var match_idx__6252 = s.search(re);
var match_str__6253 = ((cljs.core.coll_QMARK_.call(null,match_data__6251))?cljs.core.first.call(null,match_data__6251):match_data__6251);
var post_match__6254 = cljs.core.subs.call(null,s,(match_idx__6252 + cljs.core.count.call(null,match_str__6253)));
if(cljs.core.truth_(match_data__6251))
{return (new cljs.core.LazySeq(null,false,(function (){
return cljs.core.cons.call(null,match_data__6251,re_seq.call(null,re,post_match__6254));
})));
} else
{return null;
}
});
/**
* Returns an instance of RegExp which has compiled the provided string.
*/
cljs.core.re_pattern = (function re_pattern(s){
var vec__6256__6257 = cljs.core.re_find.call(null,/^(?:\(\?([idmsux]*)\))?(.*)/,s);
var ___6258 = cljs.core.nth.call(null,vec__6256__6257,0,null);
var flags__6259 = cljs.core.nth.call(null,vec__6256__6257,1,null);
var pattern__6260 = cljs.core.nth.call(null,vec__6256__6257,2,null);
return (new RegExp(pattern__6260,flags__6259));
});
cljs.core.pr_sequential = (function pr_sequential(print_one,begin,sep,end,opts,coll){
return cljs.core.concat.call(null,cljs.core.PersistentVector.fromArray([begin]),cljs.core.flatten1.call(null,cljs.core.interpose.call(null,cljs.core.PersistentVector.fromArray([sep]),cljs.core.map.call(null,(function (p1__6255_SHARP_){
return print_one.call(null,p1__6255_SHARP_,opts);
}),coll))),cljs.core.PersistentVector.fromArray([end]));
});
cljs.core.string_print = (function string_print(x){
cljs.core._STAR_print_fn_STAR_.call(null,x);
return null;
});
cljs.core.flush = (function flush(){
return null;
});
cljs.core.pr_seq = (function pr_seq(obj,opts){
if((obj == null))
{return cljs.core.list.call(null,"nil");
} else
{if((void 0 === obj))
{return cljs.core.list.call(null,"#<undefined>");
} else
{if("\uFDD0'else")
{return cljs.core.concat.call(null,(cljs.core.truth_((function (){var and__3822__auto____6261 = cljs.core.get.call(null,opts,"\uFDD0'meta");
if(cljs.core.truth_(and__3822__auto____6261))
{var and__3822__auto____6265 = (function (){var G__6262__6263 = obj;
if((G__6262__6263 != null))
{if((function (){var or__3824__auto____6264 = (G__6262__6263.cljs$lang$protocol_mask$partition0$ & 65536);
if(or__3824__auto____6264)
{return or__3824__auto____6264;
} else
{return G__6262__6263.cljs$core$IMeta$;
}
})())
{return true;
} else
{if((!G__6262__6263.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IMeta,G__6262__6263);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IMeta,G__6262__6263);
}
})();
if(cljs.core.truth_(and__3822__auto____6265))
{return cljs.core.meta.call(null,obj);
} else
{return and__3822__auto____6265;
}
} else
{return and__3822__auto____6261;
}
})())?cljs.core.concat.call(null,cljs.core.PersistentVector.fromArray(["^"]),pr_seq.call(null,cljs.core.meta.call(null,obj),opts),cljs.core.PersistentVector.fromArray([" "])):null),(cljs.core.truth_((function (){var and__3822__auto____6266 = (obj != null);
if(and__3822__auto____6266)
{return obj.cljs$lang$type;
} else
{return and__3822__auto____6266;
}
})())?obj.cljs$lang$ctorPrSeq(obj):(((function (){var G__6267__6268 = obj;
if((G__6267__6268 != null))
{if((function (){var or__3824__auto____6269 = (G__6267__6268.cljs$lang$protocol_mask$partition0$ & 268435456);
if(or__3824__auto____6269)
{return or__3824__auto____6269;
} else
{return G__6267__6268.cljs$core$IPrintable$;
}
})())
{return true;
} else
{if((!G__6267__6268.cljs$lang$protocol_mask$partition0$))
{return cljs.core.type_satisfies_.call(null,cljs.core.IPrintable,G__6267__6268);
} else
{return false;
}
}
} else
{return cljs.core.type_satisfies_.call(null,cljs.core.IPrintable,G__6267__6268);
}
})())?cljs.core._pr_seq.call(null,obj,opts):(("\uFDD0'else")?cljs.core.list.call(null,"#<",[cljs.core.str(obj)].join(''),">"):null))));
} else
{return null;
}
}
}
});
cljs.core.pr_sb = (function pr_sb(objs,opts){
var first_obj__6270 = cljs.core.first.call(null,objs);
var sb__6271 = (new goog.string.StringBuffer());
var G__6272__6273 = cljs.core.seq.call(null,objs);
if(cljs.core.truth_(G__6272__6273))
{var obj__6274 = cljs.core.first.call(null,G__6272__6273);
var G__6272__6275 = G__6272__6273;
while(true){
if((obj__6274 === first_obj__6270))
{} else
{sb__6271.append(" ");
}
var G__6276__6277 = cljs.core.seq.call(null,cljs.core.pr_seq.call(null,obj__6274,opts));
if(cljs.core.truth_(G__6276__6277))
{var string__6278 = cljs.core.first.call(null,G__6276__6277);
var G__6276__6279 = G__6276__6277;
while(true){
sb__6271.append(string__6278);
var temp__3974__auto____6280 = cljs.core.next.call(null,G__6276__6279);
if(cljs.core.truth_(temp__3974__auto____6280))
{var G__6276__6281 = temp__3974__auto____6280;
{
var G__6284 = cljs.core.first.call(null,G__6276__6281);
var G__6285 = G__6276__6281;
string__6278 = G__6284;
G__6276__6279 = G__6285;
continue;
}
} else
{}
break;
}
} else
{}
var temp__3974__auto____6282 = cljs.core.next.call(null,G__6272__6275);
if(cljs.core.truth_(temp__3974__auto____6282))
{var G__6272__6283 = temp__3974__auto____6282;
{
var G__6286 = cljs.core.first.call(null,G__6272__6283);
var G__6287 = G__6272__6283;
obj__6274 = G__6286;
G__6272__6275 = G__6287;
continue;
}
} else
{}
break;
}
} else
{}
return sb__6271;
});
/**
* Prints a sequence of objects to a string, observing all the
* options given in opts
*/
cljs.core.pr_str_with_opts = (function pr_str_with_opts(objs,opts){
return [cljs.core.str(cljs.core.pr_sb.call(null,objs,opts))].join('');
});
/**
* Same as pr-str-with-opts followed by (newline)
*/
cljs.core.prn_str_with_opts = (function prn_str_with_opts(objs,opts){
var sb__6288 = cljs.core.pr_sb.call(null,objs,opts);
sb__6288.append("\n");
return [cljs.core.str(sb__6288)].join('');
});
/**
* Prints a sequence of objects using string-print, observing all
* the options given in opts
*/
cljs.core.pr_with_opts = (function pr_with_opts(objs,opts){
var first_obj__6289 = cljs.core.first.call(null,objs);
var G__6290__6291 = cljs.core.seq.call(null,objs);
if(cljs.core.truth_(G__6290__6291))
{var obj__6292 = cljs.core.first.call(null,G__6290__6291);
var G__6290__6293 = G__6290__6291;
while(true){
if((obj__6292 === first_obj__6289))
{} else
{cljs.core.string_print.call(null," ");
}
var G__6294__6295 = cljs.core.seq.call(null,cljs.core.pr_seq.call(null,obj__6292,opts));
if(cljs.core.truth_(G__6294__6295))
{var string__6296 = cljs.core.first.call(null,G__6294__6295);
var G__6294__6297 = G__6294__6295;
while(true){
cljs.core.string_print.call(null,string__6296);
var temp__3974__auto____6298 = cljs.core.next.call(null,G__6294__6297);
if(cljs.core.truth_(temp__3974__auto____6298))
{var G__6294__6299 = temp__3974__auto____6298;
{
var G__6302 = cljs.core.first.call(null,G__6294__6299);
var G__6303 = G__6294__6299;
string__6296 = G__6302;
G__6294__6297 = G__6303;
continue;
}
} else
{}
break;
}
} else
{}
var temp__3974__auto____6300 = cljs.core.next.call(null,G__6290__6293);
if(cljs.core.truth_(temp__3974__auto____6300))
{var G__6290__6301 = temp__3974__auto____6300;
{
var G__6304 = cljs.core.first.call(null,G__6290__6301);
var G__6305 = G__6290__6301;
obj__6292 = G__6304;
G__6290__6293 = G__6305;
continue;
}
} else
{return null;
}
break;
}
} else
{return null;
}
});
cljs.core.newline = (function newline(opts){
cljs.core.string_print.call(null,"\n");
if(cljs.core.truth_(cljs.core.get.call(null,opts,"\uFDD0'flush-on-newline")))
{return cljs.core.flush.call(null);
} else
{return null;
}
});
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core.pr_opts = (function pr_opts(){
return cljs.core.ObjMap.fromObject(["\uFDD0'flush-on-newline","\uFDD0'readably","\uFDD0'meta","\uFDD0'dup"],{"\uFDD0'flush-on-newline":cljs.core._STAR_flush_on_newline_STAR_,"\uFDD0'readably":cljs.core._STAR_print_readably_STAR_,"\uFDD0'meta":cljs.core._STAR_print_meta_STAR_,"\uFDD0'dup":cljs.core._STAR_print_dup_STAR_});
});
/**
* pr to a string, returning it. Fundamental entrypoint to IPrintable.
* @param {...*} var_args
*/
cljs.core.pr_str = (function() { 
var pr_str__delegate = function (objs){
return cljs.core.pr_str_with_opts.call(null,objs,cljs.core.pr_opts.call(null));
};
var pr_str = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return pr_str__delegate.call(this, objs);
};
pr_str.cljs$lang$maxFixedArity = 0;
pr_str.cljs$lang$applyTo = (function (arglist__6306){
var objs = cljs.core.seq(arglist__6306);;
return pr_str__delegate(objs);
});
pr_str.cljs$lang$arity$variadic = pr_str__delegate;
return pr_str;
})()
;
/**
* Same as pr-str followed by (newline)
* @param {...*} var_args
*/
cljs.core.prn_str = (function() { 
var prn_str__delegate = function (objs){
return cljs.core.prn_str_with_opts.call(null,objs,cljs.core.pr_opts.call(null));
};
var prn_str = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return prn_str__delegate.call(this, objs);
};
prn_str.cljs$lang$maxFixedArity = 0;
prn_str.cljs$lang$applyTo = (function (arglist__6307){
var objs = cljs.core.seq(arglist__6307);;
return prn_str__delegate(objs);
});
prn_str.cljs$lang$arity$variadic = prn_str__delegate;
return prn_str;
})()
;
/**
* Prints the object(s) using string-print.  Prints the
* object(s), separated by spaces if there is more than one.
* By default, pr and prn print in a way that objects can be
* read by the reader
* @param {...*} var_args
*/
cljs.core.pr = (function() { 
var pr__delegate = function (objs){
return cljs.core.pr_with_opts.call(null,objs,cljs.core.pr_opts.call(null));
};
var pr = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return pr__delegate.call(this, objs);
};
pr.cljs$lang$maxFixedArity = 0;
pr.cljs$lang$applyTo = (function (arglist__6308){
var objs = cljs.core.seq(arglist__6308);;
return pr__delegate(objs);
});
pr.cljs$lang$arity$variadic = pr__delegate;
return pr;
})()
;
/**
* Prints the object(s) using string-print.
* print and println produce output for human consumption.
* @param {...*} var_args
*/
cljs.core.print = (function() { 
var cljs_core_print__delegate = function (objs){
return cljs.core.pr_with_opts.call(null,objs,cljs.core.assoc.call(null,cljs.core.pr_opts.call(null),"\uFDD0'readably",false));
};
var cljs_core_print = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return cljs_core_print__delegate.call(this, objs);
};
cljs_core_print.cljs$lang$maxFixedArity = 0;
cljs_core_print.cljs$lang$applyTo = (function (arglist__6309){
var objs = cljs.core.seq(arglist__6309);;
return cljs_core_print__delegate(objs);
});
cljs_core_print.cljs$lang$arity$variadic = cljs_core_print__delegate;
return cljs_core_print;
})()
;
/**
* print to a string, returning it
* @param {...*} var_args
*/
cljs.core.print_str = (function() { 
var print_str__delegate = function (objs){
return cljs.core.pr_str_with_opts.call(null,objs,cljs.core.assoc.call(null,cljs.core.pr_opts.call(null),"\uFDD0'readably",false));
};
var print_str = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return print_str__delegate.call(this, objs);
};
print_str.cljs$lang$maxFixedArity = 0;
print_str.cljs$lang$applyTo = (function (arglist__6310){
var objs = cljs.core.seq(arglist__6310);;
return print_str__delegate(objs);
});
print_str.cljs$lang$arity$variadic = print_str__delegate;
return print_str;
})()
;
/**
* Same as print followed by (newline)
* @param {...*} var_args
*/
cljs.core.println = (function() { 
var println__delegate = function (objs){
cljs.core.pr_with_opts.call(null,objs,cljs.core.assoc.call(null,cljs.core.pr_opts.call(null),"\uFDD0'readably",false));
return cljs.core.newline.call(null,cljs.core.pr_opts.call(null));
};
var println = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return println__delegate.call(this, objs);
};
println.cljs$lang$maxFixedArity = 0;
println.cljs$lang$applyTo = (function (arglist__6311){
var objs = cljs.core.seq(arglist__6311);;
return println__delegate(objs);
});
println.cljs$lang$arity$variadic = println__delegate;
return println;
})()
;
/**
* println to a string, returning it
* @param {...*} var_args
*/
cljs.core.println_str = (function() { 
var println_str__delegate = function (objs){
return cljs.core.prn_str_with_opts.call(null,objs,cljs.core.assoc.call(null,cljs.core.pr_opts.call(null),"\uFDD0'readably",false));
};
var println_str = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return println_str__delegate.call(this, objs);
};
println_str.cljs$lang$maxFixedArity = 0;
println_str.cljs$lang$applyTo = (function (arglist__6312){
var objs = cljs.core.seq(arglist__6312);;
return println_str__delegate(objs);
});
println_str.cljs$lang$arity$variadic = println_str__delegate;
return println_str;
})()
;
/**
* Same as pr followed by (newline).
* @param {...*} var_args
*/
cljs.core.prn = (function() { 
var prn__delegate = function (objs){
cljs.core.pr_with_opts.call(null,objs,cljs.core.pr_opts.call(null));
return cljs.core.newline.call(null,cljs.core.pr_opts.call(null));
};
var prn = function (var_args){
var objs = null;
if (goog.isDef(var_args)) {
  objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return prn__delegate.call(this, objs);
};
prn.cljs$lang$maxFixedArity = 0;
prn.cljs$lang$applyTo = (function (arglist__6313){
var objs = cljs.core.seq(arglist__6313);;
return prn__delegate(objs);
});
prn.cljs$lang$arity$variadic = prn__delegate;
return prn;
})()
;
cljs.core.HashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
var pr_pair__6314 = (function (keyval){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,""," ","",opts,keyval);
});
return cljs.core.pr_sequential.call(null,pr_pair__6314,"{",", ","}",opts,coll);
});
(cljs.core.IPrintable["number"] = true);
(cljs.core._pr_seq["number"] = (function (n,opts){
return cljs.core.list.call(null,[cljs.core.str(n)].join(''));
}));
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.Subvec.prototype.cljs$core$IPrintable$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"["," ","]",opts,coll);
});
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
var pr_pair__6315 = (function (keyval){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,""," ","",opts,keyval);
});
return cljs.core.pr_sequential.call(null,pr_pair__6315,"{",", ","}",opts,coll);
});
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
var pr_pair__6316 = (function (keyval){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,""," ","",opts,keyval);
});
return cljs.core.pr_sequential.call(null,pr_pair__6316,"{",", ","}",opts,coll);
});
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"#queue ["," ","]",opts,cljs.core.seq.call(null,coll));
});
cljs.core.LazySeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"#{"," ","}",opts,coll);
});
(cljs.core.IPrintable["boolean"] = true);
(cljs.core._pr_seq["boolean"] = (function (bool,opts){
return cljs.core.list.call(null,[cljs.core.str(bool)].join(''));
}));
(cljs.core.IPrintable["string"] = true);
(cljs.core._pr_seq["string"] = (function (obj,opts){
if(cljs.core.keyword_QMARK_.call(null,obj))
{return cljs.core.list.call(null,[cljs.core.str(":"),cljs.core.str((function (){var temp__3974__auto____6317 = cljs.core.namespace.call(null,obj);
if(cljs.core.truth_(temp__3974__auto____6317))
{var nspc__6318 = temp__3974__auto____6317;
return [cljs.core.str(nspc__6318),cljs.core.str("/")].join('');
} else
{return null;
}
})()),cljs.core.str(cljs.core.name.call(null,obj))].join(''));
} else
{if(cljs.core.symbol_QMARK_.call(null,obj))
{return cljs.core.list.call(null,[cljs.core.str((function (){var temp__3974__auto____6319 = cljs.core.namespace.call(null,obj);
if(cljs.core.truth_(temp__3974__auto____6319))
{var nspc__6320 = temp__3974__auto____6319;
return [cljs.core.str(nspc__6320),cljs.core.str("/")].join('');
} else
{return null;
}
})()),cljs.core.str(cljs.core.name.call(null,obj))].join(''));
} else
{if("\uFDD0'else")
{return cljs.core.list.call(null,(cljs.core.truth_("\uFDD0'readably".call(null,opts))?goog.string.quote.call(null,obj):obj));
} else
{return null;
}
}
}
}));
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.RedNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"["," ","]",opts,coll);
});
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
var pr_pair__6321 = (function (keyval){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,""," ","",opts,keyval);
});
return cljs.core.pr_sequential.call(null,pr_pair__6321,"{",", ","}",opts,coll);
});
cljs.core.Vector.prototype.cljs$core$IPrintable$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"["," ","]",opts,coll);
});
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"#{"," ","}",opts,coll);
});
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"["," ","]",opts,coll);
});
cljs.core.List.prototype.cljs$core$IPrintable$ = true;
cljs.core.List.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
(cljs.core.IPrintable["array"] = true);
(cljs.core._pr_seq["array"] = (function (a,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"#<Array [",", ","]>",opts,a);
}));
(cljs.core.IPrintable["function"] = true);
(cljs.core._pr_seq["function"] = (function (this$){
return cljs.core.list.call(null,"#<",[cljs.core.str(this$)].join(''),">");
}));
cljs.core.EmptyList.prototype.cljs$core$IPrintable$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.list.call(null,"()");
});
cljs.core.BlackNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"["," ","]",opts,coll);
});
cljs.core.Cons.prototype.cljs$core$IPrintable$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.Range.prototype.cljs$core$IPrintable$ = true;
cljs.core.Range.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});
cljs.core.ObjMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
var pr_pair__6322 = (function (keyval){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,""," ","",opts,keyval);
});
return cljs.core.pr_sequential.call(null,pr_pair__6322,"{",", ","}",opts,coll);
});
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (coll,opts){
return cljs.core.pr_sequential.call(null,cljs.core.pr_seq,"("," ",")",opts,coll);
});

/**
* @constructor
*/
cljs.core.Atom = (function (state,meta,validator,watches){
this.state = state;
this.meta = meta;
this.validator = validator;
this.watches = watches;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 1345404928;
})
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Atom");
});
cljs.core.Atom.prototype.cljs$core$IHash$ = true;
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
var this__6323 = this;
return goog.getUid.call(null,this$);
});
cljs.core.Atom.prototype.cljs$core$IWatchable$ = true;
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = (function (this$,oldval,newval){
var this__6324 = this;
var G__6325__6326 = cljs.core.seq.call(null,this__6324.watches);
if(cljs.core.truth_(G__6325__6326))
{var G__6328__6330 = cljs.core.first.call(null,G__6325__6326);
var vec__6329__6331 = G__6328__6330;
var key__6332 = cljs.core.nth.call(null,vec__6329__6331,0,null);
var f__6333 = cljs.core.nth.call(null,vec__6329__6331,1,null);
var G__6325__6334 = G__6325__6326;
var G__6328__6335 = G__6328__6330;
var G__6325__6336 = G__6325__6334;
while(true){
var vec__6337__6338 = G__6328__6335;
var key__6339 = cljs.core.nth.call(null,vec__6337__6338,0,null);
var f__6340 = cljs.core.nth.call(null,vec__6337__6338,1,null);
var G__6325__6341 = G__6325__6336;
f__6340.call(null,key__6339,this$,oldval,newval);
var temp__3974__auto____6342 = cljs.core.next.call(null,G__6325__6341);
if(cljs.core.truth_(temp__3974__auto____6342))
{var G__6325__6343 = temp__3974__auto____6342;
{
var G__6350 = cljs.core.first.call(null,G__6325__6343);
var G__6351 = G__6325__6343;
G__6328__6335 = G__6350;
G__6325__6336 = G__6351;
continue;
}
} else
{return null;
}
break;
}
} else
{return null;
}
});
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = (function (this$,key,f){
var this__6344 = this;
return this$.watches = cljs.core.assoc.call(null,this__6344.watches,key,f);
});
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = (function (this$,key){
var this__6345 = this;
return this$.watches = cljs.core.dissoc.call(null,this__6345.watches,key);
});
cljs.core.Atom.prototype.cljs$core$IPrintable$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = (function (a,opts){
var this__6346 = this;
return cljs.core.concat.call(null,cljs.core.PersistentVector.fromArray(["#<Atom: "]),cljs.core._pr_seq.call(null,this__6346.state,opts),">");
});
cljs.core.Atom.prototype.cljs$core$IMeta$ = true;
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_){
var this__6347 = this;
return this__6347.meta;
});
cljs.core.Atom.prototype.cljs$core$IDeref$ = true;
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
var this__6348 = this;
return this__6348.state;
});
cljs.core.Atom.prototype.cljs$core$IEquiv$ = true;
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
var this__6349 = this;
return (o === other);
});
cljs.core.Atom;
/**
* Creates and returns an Atom with an initial value of x and zero or
* more options (in any order):
* 
* :meta metadata-map
* 
* :validator validate-fn
* 
* If metadata-map is supplied, it will be come the metadata on the
* atom. validate-fn must be nil or a side-effect-free fn of one
* argument, which will be passed the intended new state on any state
* change. If the new state is unacceptable, the validate-fn should
* return false or throw an Error.  If either of these error conditions
* occur, then the value of the atom will not change.
* @param {...*} var_args
*/
cljs.core.atom = (function() {
var atom = null;
var atom__1 = (function (x){
return (new cljs.core.Atom(x,null,null,null));
});
var atom__2 = (function() { 
var G__6358__delegate = function (x,p__6352){
var map__6353__6354 = p__6352;
var map__6353__6355 = ((cljs.core.seq_QMARK_.call(null,map__6353__6354))?cljs.core.apply.call(null,cljs.core.hash_map,map__6353__6354):map__6353__6354);
var validator__6356 = cljs.core.get.call(null,map__6353__6355,"\uFDD0'validator");
var meta__6357 = cljs.core.get.call(null,map__6353__6355,"\uFDD0'meta");
return (new cljs.core.Atom(x,meta__6357,validator__6356,null));
};
var G__6358 = function (x,var_args){
var p__6352 = null;
if (goog.isDef(var_args)) {
  p__6352 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return G__6358__delegate.call(this, x, p__6352);
};
G__6358.cljs$lang$maxFixedArity = 1;
G__6358.cljs$lang$applyTo = (function (arglist__6359){
var x = cljs.core.first(arglist__6359);
var p__6352 = cljs.core.rest(arglist__6359);
return G__6358__delegate(x, p__6352);
});
G__6358.cljs$lang$arity$variadic = G__6358__delegate;
return G__6358;
})()
;
atom = function(x,var_args){
var p__6352 = var_args;
switch(arguments.length){
case 1:
return atom__1.call(this,x);
default:
return atom__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1));
}
throw('Invalid arity: ' + arguments.length);
};
atom.cljs$lang$maxFixedArity = 1;
atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
atom.cljs$lang$arity$1 = atom__1;
atom.cljs$lang$arity$variadic = atom__2.cljs$lang$arity$variadic;
return atom;
})()
;
/**
* Sets the value of atom to newval without regard for the
* current value. Returns newval.
*/
cljs.core.reset_BANG_ = (function reset_BANG_(a,new_value){
var temp__3974__auto____6360 = a.validator;
if(cljs.core.truth_(temp__3974__auto____6360))
{var validate__6361 = temp__3974__auto____6360;
if(cljs.core.truth_(validate__6361.call(null,new_value)))
{} else
{throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str("Validator rejected reference state"),cljs.core.str("\n"),cljs.core.str(cljs.core.pr_str.call(null,cljs.core.with_meta(cljs.core.list("\uFDD1'validate","\uFDD1'new-value"),cljs.core.hash_map("\uFDD0'line",5917))))].join('')));
}
} else
{}
var old_value__6362 = a.state;
a.state = new_value;
cljs.core._notify_watches.call(null,a,old_value__6362,new_value);
return new_value;
});
/**
* Atomically swaps the value of atom to be:
* (apply f current-value-of-atom args). Note that f may be called
* multiple times, and thus should be free of side effects.  Returns
* the value that was swapped in.
* @param {...*} var_args
*/
cljs.core.swap_BANG_ = (function() {
var swap_BANG_ = null;
var swap_BANG___2 = (function (a,f){
return cljs.core.reset_BANG_.call(null,a,f.call(null,a.state));
});
var swap_BANG___3 = (function (a,f,x){
return cljs.core.reset_BANG_.call(null,a,f.call(null,a.state,x));
});
var swap_BANG___4 = (function (a,f,x,y){
return cljs.core.reset_BANG_.call(null,a,f.call(null,a.state,x,y));
});
var swap_BANG___5 = (function (a,f,x,y,z){
return cljs.core.reset_BANG_.call(null,a,f.call(null,a.state,x,y,z));
});
var swap_BANG___6 = (function() { 
var G__6363__delegate = function (a,f,x,y,z,more){
return cljs.core.reset_BANG_.call(null,a,cljs.core.apply.call(null,f,a.state,x,y,z,more));
};
var G__6363 = function (a,f,x,y,z,var_args){
var more = null;
if (goog.isDef(var_args)) {
  more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5),0);
} 
return G__6363__delegate.call(this, a, f, x, y, z, more);
};
G__6363.cljs$lang$maxFixedArity = 5;
G__6363.cljs$lang$applyTo = (function (arglist__6364){
var a = cljs.core.first(arglist__6364);
var f = cljs.core.first(cljs.core.next(arglist__6364));
var x = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6364)));
var y = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6364))));
var z = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6364)))));
var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6364)))));
return G__6363__delegate(a, f, x, y, z, more);
});
G__6363.cljs$lang$arity$variadic = G__6363__delegate;
return G__6363;
})()
;
swap_BANG_ = function(a,f,x,y,z,var_args){
var more = var_args;
switch(arguments.length){
case 2:
return swap_BANG___2.call(this,a,f);
case 3:
return swap_BANG___3.call(this,a,f,x);
case 4:
return swap_BANG___4.call(this,a,f,x,y);
case 5:
return swap_BANG___5.call(this,a,f,x,y,z);
default:
return swap_BANG___6.cljs$lang$arity$variadic(a,f,x,y,z, cljs.core.array_seq(arguments, 5));
}
throw('Invalid arity: ' + arguments.length);
};
swap_BANG_.cljs$lang$maxFixedArity = 5;
swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
swap_BANG_.cljs$lang$arity$2 = swap_BANG___2;
swap_BANG_.cljs$lang$arity$3 = swap_BANG___3;
swap_BANG_.cljs$lang$arity$4 = swap_BANG___4;
swap_BANG_.cljs$lang$arity$5 = swap_BANG___5;
swap_BANG_.cljs$lang$arity$variadic = swap_BANG___6.cljs$lang$arity$variadic;
return swap_BANG_;
})()
;
/**
* Atomically sets the value of atom to newval if and only if the
* current value of the atom is identical to oldval. Returns true if
* set happened, else false.
*/
cljs.core.compare_and_set_BANG_ = (function compare_and_set_BANG_(a,oldval,newval){
if(cljs.core._EQ_.call(null,a.state,oldval))
{cljs.core.reset_BANG_.call(null,a,newval);
return true;
} else
{return false;
}
});
cljs.core.deref = (function deref(o){
return cljs.core._deref.call(null,o);
});
/**
* Sets the validator-fn for an atom. validator-fn must be nil or a
* side-effect-free fn of one argument, which will be passed the intended
* new state on any state change. If the new state is unacceptable, the
* validator-fn should return false or throw an Error. If the current state
* is not acceptable to the new validator, an Error will be thrown and the
* validator will not be changed.
*/
cljs.core.set_validator_BANG_ = (function set_validator_BANG_(iref,val){
return iref.validator = val;
});
/**
* Gets the validator-fn for a var/ref/agent/atom.
*/
cljs.core.get_validator = (function get_validator(iref){
return iref.validator;
});
/**
* Atomically sets the metadata for a namespace/var/ref/agent/atom to be:
* 
* (apply f its-current-meta args)
* 
* f must be free of side-effects
* @param {...*} var_args
*/
cljs.core.alter_meta_BANG_ = (function() { 
var alter_meta_BANG___delegate = function (iref,f,args){
return iref.meta = cljs.core.apply.call(null,f,iref.meta,args);
};
var alter_meta_BANG_ = function (iref,f,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2),0);
} 
return alter_meta_BANG___delegate.call(this, iref, f, args);
};
alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
alter_meta_BANG_.cljs$lang$applyTo = (function (arglist__6365){
var iref = cljs.core.first(arglist__6365);
var f = cljs.core.first(cljs.core.next(arglist__6365));
var args = cljs.core.rest(cljs.core.next(arglist__6365));
return alter_meta_BANG___delegate(iref, f, args);
});
alter_meta_BANG_.cljs$lang$arity$variadic = alter_meta_BANG___delegate;
return alter_meta_BANG_;
})()
;
/**
* Atomically resets the metadata for an atom
*/
cljs.core.reset_meta_BANG_ = (function reset_meta_BANG_(iref,m){
return iref.meta = m;
});
/**
* Alpha - subject to change.
* 
* Adds a watch function to an atom reference. The watch fn must be a
* fn of 4 args: a key, the reference, its old-state, its
* new-state. Whenever the reference's state might have been changed,
* any registered watches will have their functions called. The watch
* fn will be called synchronously. Note that an atom's state
* may have changed again prior to the fn call, so use old/new-state
* rather than derefing the reference. Keys must be unique per
* reference, and can be used to remove the watch with remove-watch,
* but are otherwise considered opaque by the watch mechanism.  Bear in
* mind that regardless of the result or action of the watch fns the
* atom's value will change.  Example:
* 
* (def a (atom 0))
* (add-watch a :inc (fn [k r o n] (assert (== 0 n))))
* (swap! a inc)
* ;; Assertion Error
* (deref a)
* ;=> 1
*/
cljs.core.add_watch = (function add_watch(iref,key,f){
return cljs.core._add_watch.call(null,iref,key,f);
});
/**
* Alpha - subject to change.
* 
* Removes a watch (set by add-watch) from a reference
*/
cljs.core.remove_watch = (function remove_watch(iref,key){
return cljs.core._remove_watch.call(null,iref,key);
});
cljs.core.gensym_counter = null;
/**
* Returns a new symbol with a unique name. If a prefix string is
* supplied, the name is prefix# where # is some unique number. If
* prefix is not supplied, the prefix is 'G__'.
*/
cljs.core.gensym = (function() {
var gensym = null;
var gensym__0 = (function (){
return gensym.call(null,"G__");
});
var gensym__1 = (function (prefix_string){
if((cljs.core.gensym_counter == null))
{cljs.core.gensym_counter = cljs.core.atom.call(null,0);
} else
{}
return cljs.core.symbol.call(null,[cljs.core.str(prefix_string),cljs.core.str(cljs.core.swap_BANG_.call(null,cljs.core.gensym_counter,cljs.core.inc))].join(''));
});
gensym = function(prefix_string){
switch(arguments.length){
case 0:
return gensym__0.call(this);
case 1:
return gensym__1.call(this,prefix_string);
}
throw('Invalid arity: ' + arguments.length);
};
gensym.cljs$lang$arity$0 = gensym__0;
gensym.cljs$lang$arity$1 = gensym__1;
return gensym;
})()
;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;

/**
* @constructor
*/
cljs.core.Delay = (function (state,f){
this.state = state;
this.f = f;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 536887296;
})
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.Delay");
});
cljs.core.Delay.prototype.cljs$core$IPending$ = true;
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = (function (d){
var this__6366 = this;
return "\uFDD0'done".call(null,cljs.core.deref.call(null,this__6366.state));
});
cljs.core.Delay.prototype.cljs$core$IDeref$ = true;
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
var this__6367 = this;
return "\uFDD0'value".call(null,cljs.core.swap_BANG_.call(null,this__6367.state,(function (p__6368){
var curr_state__6369 = p__6368;
var curr_state__6370 = ((cljs.core.seq_QMARK_.call(null,curr_state__6369))?cljs.core.apply.call(null,cljs.core.hash_map,curr_state__6369):curr_state__6369);
var done__6371 = cljs.core.get.call(null,curr_state__6370,"\uFDD0'done");
if(cljs.core.truth_(done__6371))
{return curr_state__6370;
} else
{return cljs.core.ObjMap.fromObject(["\uFDD0'done","\uFDD0'value"],{"\uFDD0'done":true,"\uFDD0'value":this__6367.f.call(null)});
}
})));
});
cljs.core.Delay;
/**
* returns true if x is a Delay created with delay
*/
cljs.core.delay_QMARK_ = (function delay_QMARK_(x){
return cljs.core.instance_QMARK_.call(null,cljs.core.Delay,x);
});
/**
* If x is a Delay, returns the (possibly cached) value of its expression, else returns x
*/
cljs.core.force = (function force(x){
if(cljs.core.delay_QMARK_.call(null,x))
{return cljs.core.deref.call(null,x);
} else
{return x;
}
});
/**
* Returns true if a value has been produced for a promise, delay, future or lazy sequence.
*/
cljs.core.realized_QMARK_ = (function realized_QMARK_(d){
return cljs.core._realized_QMARK_.call(null,d);
});
/**
* Recursively transforms JavaScript arrays into ClojureScript
* vectors, and JavaScript objects into ClojureScript maps.  With
* option ':keywordize-keys true' will convert object fields from
* strings to keywords.
* @param {...*} var_args
*/
cljs.core.js__GT_clj = (function() { 
var js__GT_clj__delegate = function (x,options){
var map__6372__6373 = options;
var map__6372__6374 = ((cljs.core.seq_QMARK_.call(null,map__6372__6373))?cljs.core.apply.call(null,cljs.core.hash_map,map__6372__6373):map__6372__6373);
var keywordize_keys__6375 = cljs.core.get.call(null,map__6372__6374,"\uFDD0'keywordize-keys");
var keyfn__6376 = (cljs.core.truth_(keywordize_keys__6375)?cljs.core.keyword:cljs.core.str);
var f__6382 = (function thisfn(x){
if(cljs.core.seq_QMARK_.call(null,x))
{return cljs.core.doall.call(null,cljs.core.map.call(null,thisfn,x));
} else
{if(cljs.core.coll_QMARK_.call(null,x))
{return cljs.core.into.call(null,cljs.core.empty.call(null,x),cljs.core.map.call(null,thisfn,x));
} else
{if(cljs.core.truth_(goog.isArray.call(null,x)))
{return cljs.core.vec.call(null,cljs.core.map.call(null,thisfn,x));
} else
{if((cljs.core.type.call(null,x) === Object))
{return cljs.core.into.call(null,cljs.core.ObjMap.fromObject([],{}),(function (){var iter__525__auto____6381 = (function iter__6377(s__6378){
return (new cljs.core.LazySeq(null,false,(function (){
var s__6378__6379 = s__6378;
while(true){
if(cljs.core.truth_(cljs.core.seq.call(null,s__6378__6379)))
{var k__6380 = cljs.core.first.call(null,s__6378__6379);
return cljs.core.cons.call(null,cljs.core.PersistentVector.fromArray([keyfn__6376.call(null,k__6380),thisfn.call(null,(x[k__6380]))]),iter__6377.call(null,cljs.core.rest.call(null,s__6378__6379)));
} else
{return null;
}
break;
}
})));
});
return iter__525__auto____6381.call(null,cljs.core.js_keys.call(null,x));
})());
} else
{if("\uFDD0'else")
{return x;
} else
{return null;
}
}
}
}
}
});
return f__6382.call(null,x);
};
var js__GT_clj = function (x,var_args){
var options = null;
if (goog.isDef(var_args)) {
  options = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return js__GT_clj__delegate.call(this, x, options);
};
js__GT_clj.cljs$lang$maxFixedArity = 1;
js__GT_clj.cljs$lang$applyTo = (function (arglist__6383){
var x = cljs.core.first(arglist__6383);
var options = cljs.core.rest(arglist__6383);
return js__GT_clj__delegate(x, options);
});
js__GT_clj.cljs$lang$arity$variadic = js__GT_clj__delegate;
return js__GT_clj;
})()
;
/**
* Returns a memoized version of a referentially transparent function. The
* memoized version of the function keeps a cache of the mapping from arguments
* to results and, when calls with the same arguments are repeated often, has
* higher performance at the expense of higher memory use.
*/
cljs.core.memoize = (function memoize(f){
var mem__6384 = cljs.core.atom.call(null,cljs.core.ObjMap.fromObject([],{}));
return (function() { 
var G__6388__delegate = function (args){
var temp__3971__auto____6385 = cljs.core.get.call(null,cljs.core.deref.call(null,mem__6384),args);
if(cljs.core.truth_(temp__3971__auto____6385))
{var v__6386 = temp__3971__auto____6385;
return v__6386;
} else
{var ret__6387 = cljs.core.apply.call(null,f,args);
cljs.core.swap_BANG_.call(null,mem__6384,cljs.core.assoc,args,ret__6387);
return ret__6387;
}
};
var G__6388 = function (var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__6388__delegate.call(this, args);
};
G__6388.cljs$lang$maxFixedArity = 0;
G__6388.cljs$lang$applyTo = (function (arglist__6389){
var args = cljs.core.seq(arglist__6389);;
return G__6388__delegate(args);
});
G__6388.cljs$lang$arity$variadic = G__6388__delegate;
return G__6388;
})()
;
});
/**
* trampoline can be used to convert algorithms requiring mutual
* recursion without stack consumption. Calls f with supplied args, if
* any. If f returns a fn, calls that fn with no arguments, and
* continues to repeat, until the return value is not a fn, then
* returns that non-fn value. Note that if you want to return a fn as a
* final value, you must wrap it in some data structure and unpack it
* after trampoline returns.
* @param {...*} var_args
*/
cljs.core.trampoline = (function() {
var trampoline = null;
var trampoline__1 = (function (f){
while(true){
var ret__6390 = f.call(null);
if(cljs.core.fn_QMARK_.call(null,ret__6390))
{{
var G__6391 = ret__6390;
f = G__6391;
continue;
}
} else
{return ret__6390;
}
break;
}
});
var trampoline__2 = (function() { 
var G__6392__delegate = function (f,args){
return trampoline.call(null,(function (){
return cljs.core.apply.call(null,f,args);
}));
};
var G__6392 = function (f,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return G__6392__delegate.call(this, f, args);
};
G__6392.cljs$lang$maxFixedArity = 1;
G__6392.cljs$lang$applyTo = (function (arglist__6393){
var f = cljs.core.first(arglist__6393);
var args = cljs.core.rest(arglist__6393);
return G__6392__delegate(f, args);
});
G__6392.cljs$lang$arity$variadic = G__6392__delegate;
return G__6392;
})()
;
trampoline = function(f,var_args){
var args = var_args;
switch(arguments.length){
case 1:
return trampoline__1.call(this,f);
default:
return trampoline__2.cljs$lang$arity$variadic(f, cljs.core.array_seq(arguments, 1));
}
throw('Invalid arity: ' + arguments.length);
};
trampoline.cljs$lang$maxFixedArity = 1;
trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
trampoline.cljs$lang$arity$1 = trampoline__1;
trampoline.cljs$lang$arity$variadic = trampoline__2.cljs$lang$arity$variadic;
return trampoline;
})()
;
/**
* Returns a random floating point number between 0 (inclusive) and
* n (default 1) (exclusive).
*/
cljs.core.rand = (function() {
var rand = null;
var rand__0 = (function (){
return rand.call(null,1);
});
var rand__1 = (function (n){
return Math.random() * n;
});
rand = function(n){
switch(arguments.length){
case 0:
return rand__0.call(this);
case 1:
return rand__1.call(this,n);
}
throw('Invalid arity: ' + arguments.length);
};
rand.cljs$lang$arity$0 = rand__0;
rand.cljs$lang$arity$1 = rand__1;
return rand;
})()
;
/**
* Returns a random integer between 0 (inclusive) and n (exclusive).
*/
cljs.core.rand_int = (function rand_int(n){
return Math.floor(Math.random() * n);
});
/**
* Return a random element of the (sequential) collection. Will have
* the same performance characteristics as nth for the given
* collection.
*/
cljs.core.rand_nth = (function rand_nth(coll){
return cljs.core.nth.call(null,coll,cljs.core.rand_int.call(null,cljs.core.count.call(null,coll)));
});
/**
* Returns a map of the elements of coll keyed by the result of
* f on each element. The value at each key will be a vector of the
* corresponding elements, in the order they appeared in coll.
*/
cljs.core.group_by = (function group_by(f,coll){
return cljs.core.reduce.call(null,(function (ret,x){
var k__6394 = f.call(null,x);
return cljs.core.assoc.call(null,ret,k__6394,cljs.core.conj.call(null,cljs.core.get.call(null,ret,k__6394,cljs.core.PersistentVector.fromArray([])),x));
}),cljs.core.ObjMap.fromObject([],{}),coll);
});
/**
* Creates a hierarchy object for use with derive, isa? etc.
*/
cljs.core.make_hierarchy = (function make_hierarchy(){
return cljs.core.ObjMap.fromObject(["\uFDD0'parents","\uFDD0'descendants","\uFDD0'ancestors"],{"\uFDD0'parents":cljs.core.ObjMap.fromObject([],{}),"\uFDD0'descendants":cljs.core.ObjMap.fromObject([],{}),"\uFDD0'ancestors":cljs.core.ObjMap.fromObject([],{})});
});
cljs.core.global_hierarchy = cljs.core.atom.call(null,cljs.core.make_hierarchy.call(null));
/**
* Returns true if (= child parent), or child is directly or indirectly derived from
* parent, either via a JavaScript type inheritance relationship or a
* relationship established via derive. h must be a hierarchy obtained
* from make-hierarchy, if not supplied defaults to the global
* hierarchy
*/
cljs.core.isa_QMARK_ = (function() {
var isa_QMARK_ = null;
var isa_QMARK___2 = (function (child,parent){
return isa_QMARK_.call(null,cljs.core.deref.call(null,cljs.core.global_hierarchy),child,parent);
});
var isa_QMARK___3 = (function (h,child,parent){
var or__3824__auto____6395 = cljs.core._EQ_.call(null,child,parent);
if(or__3824__auto____6395)
{return or__3824__auto____6395;
} else
{var or__3824__auto____6396 = cljs.core.contains_QMARK_.call(null,"\uFDD0'ancestors".call(null,h).call(null,child),parent);
if(or__3824__auto____6396)
{return or__3824__auto____6396;
} else
{var and__3822__auto____6397 = cljs.core.vector_QMARK_.call(null,parent);
if(and__3822__auto____6397)
{var and__3822__auto____6398 = cljs.core.vector_QMARK_.call(null,child);
if(and__3822__auto____6398)
{var and__3822__auto____6399 = (cljs.core.count.call(null,parent) === cljs.core.count.call(null,child));
if(and__3822__auto____6399)
{var ret__6400 = true;
var i__6401 = 0;
while(true){
if((function (){var or__3824__auto____6402 = cljs.core.not.call(null,ret__6400);
if(or__3824__auto____6402)
{return or__3824__auto____6402;
} else
{return (i__6401 === cljs.core.count.call(null,parent));
}
})())
{return ret__6400;
} else
{{
var G__6403 = isa_QMARK_.call(null,h,child.call(null,i__6401),parent.call(null,i__6401));
var G__6404 = (i__6401 + 1);
ret__6400 = G__6403;
i__6401 = G__6404;
continue;
}
}
break;
}
} else
{return and__3822__auto____6399;
}
} else
{return and__3822__auto____6398;
}
} else
{return and__3822__auto____6397;
}
}
}
});
isa_QMARK_ = function(h,child,parent){
switch(arguments.length){
case 2:
return isa_QMARK___2.call(this,h,child);
case 3:
return isa_QMARK___3.call(this,h,child,parent);
}
throw('Invalid arity: ' + arguments.length);
};
isa_QMARK_.cljs$lang$arity$2 = isa_QMARK___2;
isa_QMARK_.cljs$lang$arity$3 = isa_QMARK___3;
return isa_QMARK_;
})()
;
/**
* Returns the immediate parents of tag, either via a JavaScript type
* inheritance relationship or a relationship established via derive. h
* must be a hierarchy obtained from make-hierarchy, if not supplied
* defaults to the global hierarchy
*/
cljs.core.parents = (function() {
var parents = null;
var parents__1 = (function (tag){
return parents.call(null,cljs.core.deref.call(null,cljs.core.global_hierarchy),tag);
});
var parents__2 = (function (h,tag){
return cljs.core.not_empty.call(null,cljs.core.get.call(null,"\uFDD0'parents".call(null,h),tag));
});
parents = function(h,tag){
switch(arguments.length){
case 1:
return parents__1.call(this,h);
case 2:
return parents__2.call(this,h,tag);
}
throw('Invalid arity: ' + arguments.length);
};
parents.cljs$lang$arity$1 = parents__1;
parents.cljs$lang$arity$2 = parents__2;
return parents;
})()
;
/**
* Returns the immediate and indirect parents of tag, either via a JavaScript type
* inheritance relationship or a relationship established via derive. h
* must be a hierarchy obtained from make-hierarchy, if not supplied
* defaults to the global hierarchy
*/
cljs.core.ancestors = (function() {
var ancestors = null;
var ancestors__1 = (function (tag){
return ancestors.call(null,cljs.core.deref.call(null,cljs.core.global_hierarchy),tag);
});
var ancestors__2 = (function (h,tag){
return cljs.core.not_empty.call(null,cljs.core.get.call(null,"\uFDD0'ancestors".call(null,h),tag));
});
ancestors = function(h,tag){
switch(arguments.length){
case 1:
return ancestors__1.call(this,h);
case 2:
return ancestors__2.call(this,h,tag);
}
throw('Invalid arity: ' + arguments.length);
};
ancestors.cljs$lang$arity$1 = ancestors__1;
ancestors.cljs$lang$arity$2 = ancestors__2;
return ancestors;
})()
;
/**
* Returns the immediate and indirect children of tag, through a
* relationship established via derive. h must be a hierarchy obtained
* from make-hierarchy, if not supplied defaults to the global
* hierarchy. Note: does not work on JavaScript type inheritance
* relationships.
*/
cljs.core.descendants = (function() {
var descendants = null;
var descendants__1 = (function (tag){
return descendants.call(null,cljs.core.deref.call(null,cljs.core.global_hierarchy),tag);
});
var descendants__2 = (function (h,tag){
return cljs.core.not_empty.call(null,cljs.core.get.call(null,"\uFDD0'descendants".call(null,h),tag));
});
descendants = function(h,tag){
switch(arguments.length){
case 1:
return descendants__1.call(this,h);
case 2:
return descendants__2.call(this,h,tag);
}
throw('Invalid arity: ' + arguments.length);
};
descendants.cljs$lang$arity$1 = descendants__1;
descendants.cljs$lang$arity$2 = descendants__2;
return descendants;
})()
;
/**
* Establishes a parent/child relationship between parent and
* tag. Parent must be a namespace-qualified symbol or keyword and
* child can be either a namespace-qualified symbol or keyword or a
* class. h must be a hierarchy obtained from make-hierarchy, if not
* supplied defaults to, and modifies, the global hierarchy.
*/
cljs.core.derive = (function() {
var derive = null;
var derive__2 = (function (tag,parent){
if(cljs.core.truth_(cljs.core.namespace.call(null,parent)))
{} else
{throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str(cljs.core.pr_str.call(null,cljs.core.with_meta(cljs.core.list("\uFDD1'namespace","\uFDD1'parent"),cljs.core.hash_map("\uFDD0'line",6201))))].join('')));
}
cljs.core.swap_BANG_.call(null,cljs.core.global_hierarchy,derive,tag,parent);
return null;
});
var derive__3 = (function (h,tag,parent){
if(cljs.core.not_EQ_.call(null,tag,parent))
{} else
{throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str(cljs.core.pr_str.call(null,cljs.core.with_meta(cljs.core.list("\uFDD1'not=","\uFDD1'tag","\uFDD1'parent"),cljs.core.hash_map("\uFDD0'line",6205))))].join('')));
}
var tp__6408 = "\uFDD0'parents".call(null,h);
var td__6409 = "\uFDD0'descendants".call(null,h);
var ta__6410 = "\uFDD0'ancestors".call(null,h);
var tf__6411 = (function (m,source,sources,target,targets){
return cljs.core.reduce.call(null,(function (ret,k){
return cljs.core.assoc.call(null,ret,k,cljs.core.reduce.call(null,cljs.core.conj,cljs.core.get.call(null,targets,k,cljs.core.set([])),cljs.core.cons.call(null,target,targets.call(null,target))));
}),m,cljs.core.cons.call(null,source,sources.call(null,source)));
});
var or__3824__auto____6412 = ((cljs.core.contains_QMARK_.call(null,tp__6408.call(null,tag),parent))?null:(function (){if(cljs.core.contains_QMARK_.call(null,ta__6410.call(null,tag),parent))
{throw (new Error([cljs.core.str(tag),cljs.core.str("already has"),cljs.core.str(parent),cljs.core.str("as ancestor")].join('')));
} else
{}
if(cljs.core.contains_QMARK_.call(null,ta__6410.call(null,parent),tag))
{throw (new Error([cljs.core.str("Cyclic derivation:"),cljs.core.str(parent),cljs.core.str("has"),cljs.core.str(tag),cljs.core.str("as ancestor")].join('')));
} else
{}
return cljs.core.ObjMap.fromObject(["\uFDD0'parents","\uFDD0'ancestors","\uFDD0'descendants"],{"\uFDD0'parents":cljs.core.assoc.call(null,"\uFDD0'parents".call(null,h),tag,cljs.core.conj.call(null,cljs.core.get.call(null,tp__6408,tag,cljs.core.set([])),parent)),"\uFDD0'ancestors":tf__6411.call(null,"\uFDD0'ancestors".call(null,h),tag,td__6409,parent,ta__6410),"\uFDD0'descendants":tf__6411.call(null,"\uFDD0'descendants".call(null,h),parent,ta__6410,tag,td__6409)});
})());
if(cljs.core.truth_(or__3824__auto____6412))
{return or__3824__auto____6412;
} else
{return h;
}
});
derive = function(h,tag,parent){
switch(arguments.length){
case 2:
return derive__2.call(this,h,tag);
case 3:
return derive__3.call(this,h,tag,parent);
}
throw('Invalid arity: ' + arguments.length);
};
derive.cljs$lang$arity$2 = derive__2;
derive.cljs$lang$arity$3 = derive__3;
return derive;
})()
;
/**
* Removes a parent/child relationship between parent and
* tag. h must be a hierarchy obtained from make-hierarchy, if not
* supplied defaults to, and modifies, the global hierarchy.
*/
cljs.core.underive = (function() {
var underive = null;
var underive__2 = (function (tag,parent){
cljs.core.swap_BANG_.call(null,cljs.core.global_hierarchy,underive,tag,parent);
return null;
});
var underive__3 = (function (h,tag,parent){
var parentMap__6413 = "\uFDD0'parents".call(null,h);
var childsParents__6414 = (cljs.core.truth_(parentMap__6413.call(null,tag))?cljs.core.disj.call(null,parentMap__6413.call(null,tag),parent):cljs.core.set([]));
var newParents__6415 = (cljs.core.truth_(cljs.core.not_empty.call(null,childsParents__6414))?cljs.core.assoc.call(null,parentMap__6413,tag,childsParents__6414):cljs.core.dissoc.call(null,parentMap__6413,tag));
var deriv_seq__6416 = cljs.core.flatten.call(null,cljs.core.map.call(null,(function (p1__6405_SHARP_){
return cljs.core.cons.call(null,cljs.core.first.call(null,p1__6405_SHARP_),cljs.core.interpose.call(null,cljs.core.first.call(null,p1__6405_SHARP_),cljs.core.second.call(null,p1__6405_SHARP_)));
}),cljs.core.seq.call(null,newParents__6415)));
if(cljs.core.contains_QMARK_.call(null,parentMap__6413.call(null,tag),parent))
{return cljs.core.reduce.call(null,(function (p1__6406_SHARP_,p2__6407_SHARP_){
return cljs.core.apply.call(null,cljs.core.derive,p1__6406_SHARP_,p2__6407_SHARP_);
}),cljs.core.make_hierarchy.call(null),cljs.core.partition.call(null,2,deriv_seq__6416));
} else
{return h;
}
});
underive = function(h,tag,parent){
switch(arguments.length){
case 2:
return underive__2.call(this,h,tag);
case 3:
return underive__3.call(this,h,tag,parent);
}
throw('Invalid arity: ' + arguments.length);
};
underive.cljs$lang$arity$2 = underive__2;
underive.cljs$lang$arity$3 = underive__3;
return underive;
})()
;
cljs.core.reset_cache = (function reset_cache(method_cache,method_table,cached_hierarchy,hierarchy){
cljs.core.swap_BANG_.call(null,method_cache,(function (_){
return cljs.core.deref.call(null,method_table);
}));
return cljs.core.swap_BANG_.call(null,cached_hierarchy,(function (_){
return cljs.core.deref.call(null,hierarchy);
}));
});
cljs.core.prefers_STAR_ = (function prefers_STAR_(x,y,prefer_table){
var xprefs__6417 = cljs.core.deref.call(null,prefer_table).call(null,x);
var or__3824__auto____6419 = (cljs.core.truth_((function (){var and__3822__auto____6418 = xprefs__6417;
if(cljs.core.truth_(and__3822__auto____6418))
{return xprefs__6417.call(null,y);
} else
{return and__3822__auto____6418;
}
})())?true:null);
if(cljs.core.truth_(or__3824__auto____6419))
{return or__3824__auto____6419;
} else
{var or__3824__auto____6421 = (function (){var ps__6420 = cljs.core.parents.call(null,y);
while(true){
if((cljs.core.count.call(null,ps__6420) > 0))
{if(cljs.core.truth_(prefers_STAR_.call(null,x,cljs.core.first.call(null,ps__6420),prefer_table)))
{} else
{}
{
var G__6424 = cljs.core.rest.call(null,ps__6420);
ps__6420 = G__6424;
continue;
}
} else
{return null;
}
break;
}
})();
if(cljs.core.truth_(or__3824__auto____6421))
{return or__3824__auto____6421;
} else
{var or__3824__auto____6423 = (function (){var ps__6422 = cljs.core.parents.call(null,x);
while(true){
if((cljs.core.count.call(null,ps__6422) > 0))
{if(cljs.core.truth_(prefers_STAR_.call(null,cljs.core.first.call(null,ps__6422),y,prefer_table)))
{} else
{}
{
var G__6425 = cljs.core.rest.call(null,ps__6422);
ps__6422 = G__6425;
continue;
}
} else
{return null;
}
break;
}
})();
if(cljs.core.truth_(or__3824__auto____6423))
{return or__3824__auto____6423;
} else
{return false;
}
}
}
});
cljs.core.dominates = (function dominates(x,y,prefer_table){
var or__3824__auto____6426 = cljs.core.prefers_STAR_.call(null,x,y,prefer_table);
if(cljs.core.truth_(or__3824__auto____6426))
{return or__3824__auto____6426;
} else
{return cljs.core.isa_QMARK_.call(null,x,y);
}
});
cljs.core.find_and_cache_best_method = (function find_and_cache_best_method(name,dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy){
var best_entry__6435 = cljs.core.reduce.call(null,(function (be,p__6427){
var vec__6428__6429 = p__6427;
var k__6430 = cljs.core.nth.call(null,vec__6428__6429,0,null);
var ___6431 = cljs.core.nth.call(null,vec__6428__6429,1,null);
var e__6432 = vec__6428__6429;
if(cljs.core.isa_QMARK_.call(null,dispatch_val,k__6430))
{var be2__6434 = (cljs.core.truth_((function (){var or__3824__auto____6433 = (be == null);
if(or__3824__auto____6433)
{return or__3824__auto____6433;
} else
{return cljs.core.dominates.call(null,k__6430,cljs.core.first.call(null,be),prefer_table);
}
})())?e__6432:be);
if(cljs.core.truth_(cljs.core.dominates.call(null,cljs.core.first.call(null,be2__6434),k__6430,prefer_table)))
{} else
{throw (new Error([cljs.core.str("Multiple methods in multimethod '"),cljs.core.str(name),cljs.core.str("' match dispatch value: "),cljs.core.str(dispatch_val),cljs.core.str(" -> "),cljs.core.str(k__6430),cljs.core.str(" and "),cljs.core.str(cljs.core.first.call(null,be2__6434)),cljs.core.str(", and neither is preferred")].join('')));
}
return be2__6434;
} else
{return be;
}
}),null,cljs.core.deref.call(null,method_table));
if(cljs.core.truth_(best_entry__6435))
{if(cljs.core._EQ_.call(null,cljs.core.deref.call(null,cached_hierarchy),cljs.core.deref.call(null,hierarchy)))
{cljs.core.swap_BANG_.call(null,method_cache,cljs.core.assoc,dispatch_val,cljs.core.second.call(null,best_entry__6435));
return cljs.core.second.call(null,best_entry__6435);
} else
{cljs.core.reset_cache.call(null,method_cache,method_table,cached_hierarchy,hierarchy);
return find_and_cache_best_method.call(null,name,dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy);
}
} else
{return null;
}
});
void 0;cljs.core.IMultiFn = {};
cljs.core._reset = (function _reset(mf){
if((function (){var and__3822__auto____6436 = mf;
if(and__3822__auto____6436)
{return mf.cljs$core$IMultiFn$_reset$arity$1;
} else
{return and__3822__auto____6436;
}
})())
{return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
} else
{return (function (){var or__3824__auto____6437 = (cljs.core._reset[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6437)
{return or__3824__auto____6437;
} else
{var or__3824__auto____6438 = (cljs.core._reset["_"]);
if(or__3824__auto____6438)
{return or__3824__auto____6438;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-reset",mf);
}
}
})().call(null,mf);
}
});
cljs.core._add_method = (function _add_method(mf,dispatch_val,method){
if((function (){var and__3822__auto____6439 = mf;
if(and__3822__auto____6439)
{return mf.cljs$core$IMultiFn$_add_method$arity$3;
} else
{return and__3822__auto____6439;
}
})())
{return mf.cljs$core$IMultiFn$_add_method$arity$3(mf,dispatch_val,method);
} else
{return (function (){var or__3824__auto____6440 = (cljs.core._add_method[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6440)
{return or__3824__auto____6440;
} else
{var or__3824__auto____6441 = (cljs.core._add_method["_"]);
if(or__3824__auto____6441)
{return or__3824__auto____6441;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-add-method",mf);
}
}
})().call(null,mf,dispatch_val,method);
}
});
cljs.core._remove_method = (function _remove_method(mf,dispatch_val){
if((function (){var and__3822__auto____6442 = mf;
if(and__3822__auto____6442)
{return mf.cljs$core$IMultiFn$_remove_method$arity$2;
} else
{return and__3822__auto____6442;
}
})())
{return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf,dispatch_val);
} else
{return (function (){var or__3824__auto____6443 = (cljs.core._remove_method[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6443)
{return or__3824__auto____6443;
} else
{var or__3824__auto____6444 = (cljs.core._remove_method["_"]);
if(or__3824__auto____6444)
{return or__3824__auto____6444;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-remove-method",mf);
}
}
})().call(null,mf,dispatch_val);
}
});
cljs.core._prefer_method = (function _prefer_method(mf,dispatch_val,dispatch_val_y){
if((function (){var and__3822__auto____6445 = mf;
if(and__3822__auto____6445)
{return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
} else
{return and__3822__auto____6445;
}
})())
{return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf,dispatch_val,dispatch_val_y);
} else
{return (function (){var or__3824__auto____6446 = (cljs.core._prefer_method[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6446)
{return or__3824__auto____6446;
} else
{var or__3824__auto____6447 = (cljs.core._prefer_method["_"]);
if(or__3824__auto____6447)
{return or__3824__auto____6447;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-prefer-method",mf);
}
}
})().call(null,mf,dispatch_val,dispatch_val_y);
}
});
cljs.core._get_method = (function _get_method(mf,dispatch_val){
if((function (){var and__3822__auto____6448 = mf;
if(and__3822__auto____6448)
{return mf.cljs$core$IMultiFn$_get_method$arity$2;
} else
{return and__3822__auto____6448;
}
})())
{return mf.cljs$core$IMultiFn$_get_method$arity$2(mf,dispatch_val);
} else
{return (function (){var or__3824__auto____6449 = (cljs.core._get_method[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6449)
{return or__3824__auto____6449;
} else
{var or__3824__auto____6450 = (cljs.core._get_method["_"]);
if(or__3824__auto____6450)
{return or__3824__auto____6450;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-get-method",mf);
}
}
})().call(null,mf,dispatch_val);
}
});
cljs.core._methods = (function _methods(mf){
if((function (){var and__3822__auto____6451 = mf;
if(and__3822__auto____6451)
{return mf.cljs$core$IMultiFn$_methods$arity$1;
} else
{return and__3822__auto____6451;
}
})())
{return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
} else
{return (function (){var or__3824__auto____6452 = (cljs.core._methods[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6452)
{return or__3824__auto____6452;
} else
{var or__3824__auto____6453 = (cljs.core._methods["_"]);
if(or__3824__auto____6453)
{return or__3824__auto____6453;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-methods",mf);
}
}
})().call(null,mf);
}
});
cljs.core._prefers = (function _prefers(mf){
if((function (){var and__3822__auto____6454 = mf;
if(and__3822__auto____6454)
{return mf.cljs$core$IMultiFn$_prefers$arity$1;
} else
{return and__3822__auto____6454;
}
})())
{return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
} else
{return (function (){var or__3824__auto____6455 = (cljs.core._prefers[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6455)
{return or__3824__auto____6455;
} else
{var or__3824__auto____6456 = (cljs.core._prefers["_"]);
if(or__3824__auto____6456)
{return or__3824__auto____6456;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-prefers",mf);
}
}
})().call(null,mf);
}
});
cljs.core._dispatch = (function _dispatch(mf,args){
if((function (){var and__3822__auto____6457 = mf;
if(and__3822__auto____6457)
{return mf.cljs$core$IMultiFn$_dispatch$arity$2;
} else
{return and__3822__auto____6457;
}
})())
{return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf,args);
} else
{return (function (){var or__3824__auto____6458 = (cljs.core._dispatch[goog.typeOf.call(null,mf)]);
if(or__3824__auto____6458)
{return or__3824__auto____6458;
} else
{var or__3824__auto____6459 = (cljs.core._dispatch["_"]);
if(or__3824__auto____6459)
{return or__3824__auto____6459;
} else
{throw cljs.core.missing_protocol.call(null,"IMultiFn.-dispatch",mf);
}
}
})().call(null,mf,args);
}
});
void 0;cljs.core.do_dispatch = (function do_dispatch(mf,dispatch_fn,args){
var dispatch_val__6460 = cljs.core.apply.call(null,dispatch_fn,args);
var target_fn__6461 = cljs.core._get_method.call(null,mf,dispatch_val__6460);
if(cljs.core.truth_(target_fn__6461))
{} else
{throw (new Error([cljs.core.str("No method in multimethod '"),cljs.core.str(cljs.core.name),cljs.core.str("' for dispatch value: "),cljs.core.str(dispatch_val__6460)].join('')));
}
return cljs.core.apply.call(null,target_fn__6461,args);
});

/**
* @constructor
*/
cljs.core.MultiFn = (function (name,dispatch_fn,default_dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy){
this.name = name;
this.dispatch_fn = dispatch_fn;
this.default_dispatch_val = default_dispatch_val;
this.hierarchy = hierarchy;
this.method_table = method_table;
this.prefer_table = prefer_table;
this.method_cache = method_cache;
this.cached_hierarchy = cached_hierarchy;
this.cljs$lang$protocol_mask$partition0$ = 2097152;
this.cljs$lang$protocol_mask$partition1$ = 32;
})
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorPrSeq = (function (this__354__auto__){
return cljs.core.list.call(null,"cljs.core.MultiFn");
});
cljs.core.MultiFn.prototype.cljs$core$IHash$ = true;
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
var this__6462 = this;
return goog.getUid.call(null,this$);
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$ = true;
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = (function (mf){
var this__6463 = this;
cljs.core.swap_BANG_.call(null,this__6463.method_table,(function (mf){
return cljs.core.ObjMap.fromObject([],{});
}));
cljs.core.swap_BANG_.call(null,this__6463.method_cache,(function (mf){
return cljs.core.ObjMap.fromObject([],{});
}));
cljs.core.swap_BANG_.call(null,this__6463.prefer_table,(function (mf){
return cljs.core.ObjMap.fromObject([],{});
}));
cljs.core.swap_BANG_.call(null,this__6463.cached_hierarchy,(function (mf){
return null;
}));
return mf;
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = (function (mf,dispatch_val,method){
var this__6464 = this;
cljs.core.swap_BANG_.call(null,this__6464.method_table,cljs.core.assoc,dispatch_val,method);
cljs.core.reset_cache.call(null,this__6464.method_cache,this__6464.method_table,this__6464.cached_hierarchy,this__6464.hierarchy);
return mf;
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = (function (mf,dispatch_val){
var this__6465 = this;
cljs.core.swap_BANG_.call(null,this__6465.method_table,cljs.core.dissoc,dispatch_val);
cljs.core.reset_cache.call(null,this__6465.method_cache,this__6465.method_table,this__6465.cached_hierarchy,this__6465.hierarchy);
return mf;
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = (function (mf,dispatch_val){
var this__6466 = this;
if(cljs.core._EQ_.call(null,cljs.core.deref.call(null,this__6466.cached_hierarchy),cljs.core.deref.call(null,this__6466.hierarchy)))
{} else
{cljs.core.reset_cache.call(null,this__6466.method_cache,this__6466.method_table,this__6466.cached_hierarchy,this__6466.hierarchy);
}
var temp__3971__auto____6467 = cljs.core.deref.call(null,this__6466.method_cache).call(null,dispatch_val);
if(cljs.core.truth_(temp__3971__auto____6467))
{var target_fn__6468 = temp__3971__auto____6467;
return target_fn__6468;
} else
{var temp__3971__auto____6469 = cljs.core.find_and_cache_best_method.call(null,this__6466.name,dispatch_val,this__6466.hierarchy,this__6466.method_table,this__6466.prefer_table,this__6466.method_cache,this__6466.cached_hierarchy);
if(cljs.core.truth_(temp__3971__auto____6469))
{var target_fn__6470 = temp__3971__auto____6469;
return target_fn__6470;
} else
{return cljs.core.deref.call(null,this__6466.method_table).call(null,this__6466.default_dispatch_val);
}
}
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = (function (mf,dispatch_val_x,dispatch_val_y){
var this__6471 = this;
if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null,dispatch_val_x,dispatch_val_y,this__6471.prefer_table)))
{throw (new Error([cljs.core.str("Preference conflict in multimethod '"),cljs.core.str(this__6471.name),cljs.core.str("': "),cljs.core.str(dispatch_val_y),cljs.core.str(" is already preferred to "),cljs.core.str(dispatch_val_x)].join('')));
} else
{}
cljs.core.swap_BANG_.call(null,this__6471.prefer_table,(function (old){
return cljs.core.assoc.call(null,old,dispatch_val_x,cljs.core.conj.call(null,cljs.core.get.call(null,old,dispatch_val_x,cljs.core.set([])),dispatch_val_y));
}));
return cljs.core.reset_cache.call(null,this__6471.method_cache,this__6471.method_table,this__6471.cached_hierarchy,this__6471.hierarchy);
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = (function (mf){
var this__6472 = this;
return cljs.core.deref.call(null,this__6472.method_table);
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = (function (mf){
var this__6473 = this;
return cljs.core.deref.call(null,this__6473.prefer_table);
});
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = (function (mf,args){
var this__6474 = this;
return cljs.core.do_dispatch.call(null,mf,this__6474.dispatch_fn,args);
});
cljs.core.MultiFn;
cljs.core.MultiFn.prototype.call = (function() { 
var G__6475__delegate = function (_,args){
return cljs.core._dispatch.call(null,this,args);
};
var G__6475 = function (_,var_args){
var args = null;
if (goog.isDef(var_args)) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);
} 
return G__6475__delegate.call(this, _, args);
};
G__6475.cljs$lang$maxFixedArity = 1;
G__6475.cljs$lang$applyTo = (function (arglist__6476){
var _ = cljs.core.first(arglist__6476);
var args = cljs.core.rest(arglist__6476);
return G__6475__delegate(_, args);
});
G__6475.cljs$lang$arity$variadic = G__6475__delegate;
return G__6475;
})()
;
cljs.core.MultiFn.prototype.apply = (function (_,args){
return cljs.core._dispatch.call(null,this,args);
});
/**
* Removes all of the methods of multimethod.
*/
cljs.core.remove_all_methods = (function remove_all_methods(multifn){
return cljs.core._reset.call(null,multifn);
});
/**
* Removes the method of multimethod associated with dispatch-value.
*/
cljs.core.remove_method = (function remove_method(multifn,dispatch_val){
return cljs.core._remove_method.call(null,multifn,dispatch_val);
});
/**
* Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y
* when there is a conflict
*/
cljs.core.prefer_method = (function prefer_method(multifn,dispatch_val_x,dispatch_val_y){
return cljs.core._prefer_method.call(null,multifn,dispatch_val_x,dispatch_val_y);
});
/**
* Given a multimethod, returns a map of dispatch values -> dispatch fns
*/
cljs.core.methods$ = (function methods$(multifn){
return cljs.core._methods.call(null,multifn);
});
/**
* Given a multimethod and a dispatch value, returns the dispatch fn
* that would apply to that value, or nil if none apply and no default
*/
cljs.core.get_method = (function get_method(multifn,dispatch_val){
return cljs.core._get_method.call(null,multifn,dispatch_val);
});
/**
* Given a multimethod, returns a map of preferred value -> set of other values
*/
cljs.core.prefers = (function prefers(multifn){
return cljs.core._prefers.call(null,multifn);
});
